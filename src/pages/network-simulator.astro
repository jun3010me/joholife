；rlｒ；ｐとおｓ４おそｐ４そそお４とｔ４ｔっちちきい---
// network-simulator.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="ネットワーク構築シミュレータ">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover, shrink-to-fit=no">
    
    <link rel="stylesheet" href="/network-simulator/styles/main.css">
    <link rel="stylesheet" href="/network-simulator/styles/mobile.css">
    <link rel="stylesheet" href="/network-simulator/styles/dialogs.css">

    <div class="app-container">
        <!-- 機器パレット（外部コンポーネントから読み込み） -->
        <div id="device-palette-container"></div>

        <!-- メインキャンバス -->
        <div class="main-canvas">
            <div class="canvas-container">
                <canvas id="network-canvas"></canvas>
                <!-- ステータスパネル（外部コンポーネントから読み込み） -->
                <div id="status-panels-container"></div>
            </div>
        </div>

        <!-- コントロールパネル（外部コンポーネントから読み込み） -->
        <div id="control-panel-container"></div>
    </div>

    <!-- デバイス設定ダイアログ（外部コンポーネントから読み込み） -->
    <div id="device-config-dialog-container"></div>
    
    <!-- 宛先選択ダイアログ（外部コンポーネントから読み込み） -->
    <div id="destination-dialog-container"></div>
    
    <!-- 隠しファイル入力 -->
    <input type="file" id="file-input" accept=".json" style="display: none;">

    <!-- コンポーネントローダー -->
    <script is:inline>
        // HTMLコンポーネントを読み込む関数
        async function loadComponent(containerSelector, componentPath) {
            try {
                const response = await fetch(componentPath);
                const html = await response.text();
                const container = document.querySelector(containerSelector);
                if (container) {
                    container.innerHTML = html;
                }
            } catch (error) {
                console.error('コンポーネント読み込みエラー:', componentPath, error);
            }
        }
        
        // コンポーネント読み込み完了フラグ
        window.componentsLoaded = false;
        
        // DOMContentLoadedイベントでコンポーネントを読み込み
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('コンポーネント読み込み開始...');
            
            await loadComponent('#device-palette-container', '/network-simulator/components/device-palette.html');
            await loadComponent('#status-panels-container', '/network-simulator/components/status-panels.html');
            await loadComponent('#control-panel-container', '/network-simulator/components/control-panel.html');
            await loadComponent('#device-config-dialog-container', '/network-simulator/components/device-config-dialog.html');
            await loadComponent('#destination-dialog-container', '/network-simulator/components/destination-dialog.html');
            
            console.log('コンポーネント読み込み完了');
            window.componentsLoaded = true;
            
            // コンポーネント読み込み完了イベントを発火
            window.dispatchEvent(new Event('componentsLoaded'));
        });
    </script>
    
    <!-- ネットワークシミュレータスクリプト -->
    <script src="/network-simulator/scripts/network/tcp-simulator.js" is:inline></script>
    <script src="/network-simulator/scripts/network/http-simulator.js" is:inline></script>
    <script src="/network-simulator/scripts/network/route-calculator.js" is:inline></script>
    <script src="/network-simulator/scripts/utils/animation-helper.js" is:inline></script>
    <script src="/network-simulator/scripts/utils/tcp-integration.js" is:inline></script>
    <script src="/network-simulator/scripts/core/network-simulator.js" is:inline></script>
</Layout>