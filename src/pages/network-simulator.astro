---
// network-simulator.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="ネットワーク通信シミュレータ">
    <div class="network-simulator">
        <div class="simulator-header">
            <h1>🌐 ネットワーク通信シミュレータ</h1>
            <p>クライアントとサーバー間のパケット通信を視覚的に学ぼう！</p>
        </div>

        <div class="simulator-content">
            <div class="network-section">
                <div class="section-header">
                    <h3>📡 ネットワーク図</h3>
                    <div class="controls">
                        <button id="start-communication" class="btn btn-primary">
                            ▶️ 通信開始
                        </button>
                        <button id="stop-communication" class="btn btn-secondary">
                            ⏹️ 停止
                        </button>
                        <button id="step-backward" class="btn btn-outline" disabled>
                            ◀️ 戻る
                        </button>
                        <button id="step-forward" class="btn btn-outline">
                            ▶️ 進む
                        </button>
                        <button id="reset-network" class="btn btn-secondary">
                            🔄 リセット
                        </button>
                    </div>
                </div>
                <div id="network-container"></div>
            </div>

            <div class="info-section">
                <div class="section-header">
                    <h3>📊 通信ログ</h3>
                    <button id="clear-log" class="btn btn-outline">🗑️ クリア</button>
                </div>
                <div id="communication-log">
                    <div class="log-item">
                        ネットワーク通信シミュレータが準備できました。
                    </div>
                </div>

                <div class="network-info">
                    <h4>💡 学習ポイント</h4>
                    <ul>
                        <li><strong>DNS解決</strong>: ドメイン名をIPアドレスに変換する仕組み</li>
                        <li><strong>HTTP通信</strong>: ブラウザとWebサーバーの基本的な通信方式</li>
                        <li><strong>リクエスト</strong>: クライアントがサーバーに送る要求</li>
                        <li><strong>レスポンス</strong>: サーバーがクライアントに返す応答</li>
                        <li><strong>パケット</strong>: ネットワークで送受信されるデータの塊</li>
                        <li><strong>ルーティング</strong>: パケットが目的地まで届くための経路選択</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="explanation-section">
            <h3>📚 ネットワーク通信の仕組み</h3>
            <div class="explanation-grid">
                <div class="explanation-card">
                    <h4>1️⃣ DNS解決</h4>
                    <p>ブラウザが「example.com」のようなドメイン名をIPアドレスに変換するためDNSサーバーに問い合わせます。</p>
                </div>
                <div class="explanation-card">
                    <h4>2️⃣ HTTPリクエスト</h4>
                    <p>IPアドレスが分かったら、ブラウザがWebサーバーにHTTPリクエストを送信します。</p>
                </div>
                <div class="explanation-card">
                    <h4>3️⃣ パケットルーティング</h4>
                    <p>パケットはルーター、インターネットを経由して目的のサーバーまで届けられます。</p>
                </div>
                <div class="explanation-card">
                    <h4>4️⃣ HTTPレスポンス</h4>
                    <p>サーバーが要求されたWebページを同じ経路を通ってクライアントに返送します。</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Vis.js Network CSS -->
    <link rel="stylesheet" href="https://unpkg.com/vis-network/standalone/umd/vis-network.min.css">
    
    <script>
        let network = null;
        let nodes = null;
        let edges = null;
        let isAnimating = false;
        let animationInterval = null;
        let packetCounter = 0;
        let currentStep = 0;
        let totalSteps = 0;
        let animationSteps = [];
        let isManualMode = false;

        // 雲のSVGを作成
        function createCloudSVG() {
            const svgString = `
                <svg xmlns="http://www.w3.org/2000/svg" width="90" height="70" viewBox="0 0 90 70">
                    <path d="M20,45 Q8,32 20,27 Q15,15 25,22 Q30,8 40,15 Q50,3 60,15 Q70,8 78,22 Q88,15 83,27 Q95,32 83,45 Q88,58 78,53 Q70,67 60,58 Q50,72 40,58 Q30,67 25,53 Q15,58 20,45 Z" 
                          fill="#e0f2fe" stroke="#0ea5e9" stroke-width="2"/>
                    <text x="45" y="40" text-anchor="middle" font-family="Arial" font-size="9" fill="#0ea5e9">Internet</text>
                </svg>
            `;
            return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgString);
        }

        // ネットワークの初期化
        function initNetwork() {
            // ノード（デバイス）の定義
            nodes = new vis.DataSet([
                {
                    id: 'client',
                    label: '💻 クライアントPC\n(ブラウザ)',
                    x: -300,
                    y: 0,
                    color: {border: '#2563eb', background: '#dbeafe'},
                    font: {size: 12, color: '#1e293b'},
                    shape: 'box',
                    widthConstraint: 120,
                    heightConstraint: 80,
                    physics: false
                },
                {
                    id: 'router',
                    label: '🌐 ルーター',
                    x: -150,
                    y: 0,
                    color: {border: '#059669', background: '#d1fae5'},
                    font: {size: 12, color: '#1e293b'},
                    shape: 'diamond',
                    size: 25,
                    physics: false
                },
                {
                    id: 'internet',
                    label: '☁️ インターネット',
                    x: 0,
                    y: 0,
                    color: {border: '#0ea5e9', background: '#e0f2fe'},
                    font: {size: 12, color: '#1e293b'},
                    shape: 'image',
                    image: createCloudSVG(),
                    size: 50,
                    physics: false
                },
                {
                    id: 'dns',
                    label: '🔍 DNSサーバー\n(8.8.8.8)',
                    x: 50,
                    y: -180,
                    color: {border: '#7c3aed', background: '#ede9fe'},
                    font: {size: 12, color: '#1e293b'},
                    shape: 'box',
                    widthConstraint: 120,
                    heightConstraint: 80,
                    physics: false
                },
                {
                    id: 'server',
                    label: '🖥️ Webサーバー\n(example.com)',
                    x: 250,
                    y: 0,
                    color: {border: '#dc2626', background: '#fee2e2'},
                    font: {size: 12, color: '#1e293b'},
                    shape: 'box',
                    widthConstraint: 120,
                    heightConstraint: 80,
                    physics: false
                }
            ]);

            // エッジ（接続）の定義
            edges = new vis.DataSet([
                {
                    id: 'client-router',
                    from: 'client',
                    to: 'router',
                    label: 'LAN',
                    color: {color: '#64748b'},
                    width: 2,
                    arrows: {to: false}
                },
                {
                    id: 'router-internet',
                    from: 'router',
                    to: 'internet',
                    label: 'ISP',
                    color: {color: '#64748b'},
                    width: 2,
                    arrows: {to: false}
                },
                {
                    id: 'internet-dns',
                    from: 'internet',
                    to: 'dns',
                    label: 'DNS接続',
                    color: {color: '#7c3aed'},
                    width: 2,
                    arrows: {to: false}
                },
                {
                    id: 'internet-server',
                    from: 'internet',
                    to: 'server',
                    label: 'HTTP接続',
                    color: {color: '#dc2626'},
                    width: 2,
                    arrows: {to: false}
                }
            ]);

            const container = document.getElementById('network-container');
            const data = { nodes, edges };
            const options = {
                layout: {
                    hierarchical: false
                },
                physics: {
                    enabled: false
                },
                interaction: {
                    dragNodes: false,
                    dragView: true,
                    zoomView: true
                },
                nodes: {
                    borderWidth: 2,
                    shadow: true
                },
                edges: {
                    shadow: true,
                    smooth: {
                        type: 'continuous'
                    }
                }
            };

            network = new vis.Network(container, data, options);
            
            // ネットワークの初期表示調整
            network.fit();
        }

        // パケットアニメーション用のノードを作成
        function createPacket(id, label, fromPos, toPos, color = '#f59e0b') {
            return {
                id: id,
                label: label,
                x: fromPos.x,
                y: fromPos.y,
                color: {border: color, background: color + '80'},
                font: {size: 10, color: '#ffffff'},
                shape: 'dot',
                size: 15,
                physics: false
            };
        }

        // パケットを移動させる
        function movePacket(packetId, fromPos, toPos, duration = 2000) {
            return new Promise((resolve) => {
                const startTime = Date.now();
                const packetInterval = setInterval(() => {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    
                    // イージング関数（滑らかな移動）
                    const easeProgress = 1 - Math.pow(1 - progress, 3);
                    
                    const currentX = fromPos.x + (toPos.x - fromPos.x) * easeProgress;
                    const currentY = fromPos.y + (toPos.y - fromPos.y) * easeProgress;
                    
                    try {
                        nodes.update({
                            id: packetId,
                            x: currentX,
                            y: currentY
                        });
                    } catch (e) {
                        // ノードが既に削除されている場合
                        clearInterval(packetInterval);
                        resolve();
                        return;
                    }
                    
                    if (progress >= 1) {
                        clearInterval(packetInterval);
                        // パケットを削除
                        try {
                            nodes.remove(packetId);
                        } catch (e) {
                            // ノードが既に削除されている場合のエラーを無視
                        }
                        resolve();
                    }
                }, 16); // 60FPS
            });
        }

        // 通信ログに追加
        function addLog(message, type = 'info') {
            const logContainer = document.getElementById('communication-log');
            const logItem = document.createElement('div');
            logItem.className = `log-item ${type}`;
            
            const timestamp = new Date().toLocaleTimeString();
            logItem.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
            
            logContainer.appendChild(logItem);
            logContainer.scrollTop = logContainer.scrollHeight;
        }

        // アニメーションステップを準備
        function prepareAnimationSteps() {
            const clientPos = network.getPositions(['client'])['client'];
            const routerPos = network.getPositions(['router'])['router'];
            const internetPos = network.getPositions(['internet'])['internet'];
            const dnsPos = network.getPositions(['dns'])['dns'];
            const serverPos = network.getPositions(['server'])['server'];

            const dnsQueryId = `dns-query-${++packetCounter}`;
            const dnsResponseId = `dns-response-${packetCounter}`;
            const requestId = `http-request-${++packetCounter}`;
            const responseId = `http-response-${packetCounter}`;

            animationSteps = [
                // DNS解決フェーズ
                { type: 'log', message: '🔍 クライアント: example.com のIPアドレスを解決中...', logType: 'dns' },
                
                // DNS Query steps
                { type: 'packet', id: dnsQueryId + '-1', label: 'DNS Query\nexample.com', from: clientPos, to: routerPos, color: '#7c3aed' },
                { type: 'packet', id: dnsQueryId + '-2', label: 'DNS Query\nexample.com', from: routerPos, to: internetPos, color: '#7c3aed' },
                { type: 'packet', id: dnsQueryId + '-3', label: 'DNS Query\nexample.com', from: internetPos, to: dnsPos, color: '#7c3aed' },
                
                { type: 'log', message: '🔍 DNSサーバー: ドメイン名を解決中...', logType: 'processing' },
                { type: 'log', message: '🔍 DNSサーバー: IPアドレス 192.168.1.100 を返送', logType: 'dns' },
                
                // DNS Response steps
                { type: 'packet', id: dnsResponseId + '-1', label: 'DNS Response\n192.168.1.100', from: dnsPos, to: internetPos, color: '#a855f7' },
                { type: 'packet', id: dnsResponseId + '-2', label: 'DNS Response\n192.168.1.100', from: internetPos, to: routerPos, color: '#a855f7' },
                { type: 'packet', id: dnsResponseId + '-3', label: 'DNS Response\n192.168.1.100', from: routerPos, to: clientPos, color: '#a855f7' },
                
                { type: 'log', message: '✅ クライアント: DNS解決完了 (example.com → 192.168.1.100)', logType: 'success' },
                
                // HTTPリクエストフェーズ
                { type: 'log', message: '🔵 クライアント: HTTPリクエストを送信中...', logType: 'request' },
                
                // HTTP Request steps
                { type: 'packet', id: requestId + '-1', label: 'GET /index.html\nHost: example.com', from: clientPos, to: routerPos, color: '#2563eb' },
                { type: 'log', message: '🌐 ルーター: HTTPリクエストを転送中...', logType: 'info' },
                { type: 'packet', id: requestId + '-2', label: 'GET /index.html\nHost: example.com', from: routerPos, to: internetPos, color: '#2563eb' },
                { type: 'log', message: '☁️ インターネット: パケットをルーティング中...', logType: 'info' },
                { type: 'packet', id: requestId + '-3', label: 'GET /index.html\nHost: example.com', from: internetPos, to: serverPos, color: '#2563eb' },
                
                // サーバー処理
                { type: 'log', message: '🖥️ Webサーバー: リクエストを処理中...', logType: 'processing' },
                
                // HTTPレスポンスフェーズ
                { type: 'log', message: '🔴 Webサーバー: HTTPレスポンスを送信中...', logType: 'response' },
                
                // HTTP Response steps
                { type: 'packet', id: responseId + '-1', label: '200 OK\nHTML Data', from: serverPos, to: internetPos, color: '#dc2626' },
                { type: 'log', message: '☁️ インターネット: レスポンスをルーティング中...', logType: 'info' },
                { type: 'packet', id: responseId + '-2', label: '200 OK\nHTML Data', from: internetPos, to: routerPos, color: '#dc2626' },
                { type: 'log', message: '🌐 ルーター: レスポンスを転送中...', logType: 'info' },
                { type: 'packet', id: responseId + '-3', label: '200 OK\nHTML Data', from: routerPos, to: clientPos, color: '#dc2626' },
                
                { type: 'log', message: '✅ クライアント: Webページの表示が完了しました！', logType: 'success' }
            ];

            totalSteps = animationSteps.length;
            currentStep = 0;
        }

        // ステップを実行
        async function executeStep(stepIndex, isReverse = false) {
            if (stepIndex < 0 || stepIndex >= animationSteps.length) return;
            
            const step = animationSteps[stepIndex];
            
            if (step.type === 'log') {
                if (!isReverse) {
                    addLog(step.message, step.logType);
                } else {
                    // 戻る場合はログを削除（最後のログエントリを削除）
                    const logContainer = document.getElementById('communication-log');
                    const lastLog = logContainer.lastElementChild;
                    if (lastLog && lastLog.classList.contains('log-item')) {
                        logContainer.removeChild(lastLog);
                    }
                }
            } else if (step.type === 'packet') {
                if (!isReverse) {
                    // パケットを作成して移動（既存チェック付き）
                    try {
                        // 既に存在するかチェック
                        const existingNode = nodes.get(step.id);
                        if (!existingNode) {
                            const packet = createPacket(step.id, step.label, step.from, step.to, step.color);
                            nodes.add(packet);
                            await movePacket(step.id, step.from, step.to, isManualMode ? 800 : 1000);
                        }
                    } catch (e) {
                        console.warn(`パケット ${step.id} の作成でエラー:`, e);
                    }
                } else {
                    // 戻る場合は逆のアニメーションを実行
                    try {
                        // パケットが存在しない場合は作成して逆方向に移動
                        const existingNode = nodes.get(step.id);
                        if (!existingNode) {
                            const packet = createPacket(step.id, step.label, step.to, step.from, step.color);
                            nodes.add(packet);
                            // 逆方向に移動（to -> from）
                            await movePacket(step.id, step.to, step.from, 800);
                        } else {
                            // 既に存在する場合はそのまま削除
                            nodes.remove(step.id);
                        }
                    } catch (e) {
                        console.warn(`パケット ${step.id} の戻しでエラー:`, e);
                    }
                }
            }
        }

        // HTTP通信シミュレーション
        async function simulateHttpCommunication() {
            if (!isManualMode) {
                // 自動モードの場合は従来通り
                prepareAnimationSteps();
                for (let i = 0; i < animationSteps.length; i++) {
                    if (!isAnimating) break;
                    await executeStep(i);
                    if (animationSteps[i].type === 'log' && animationSteps[i].logType === 'processing') {
                        await new Promise(resolve => setTimeout(resolve, 800));
                    }
                }
            }
        }

        // 通信開始
        async function startCommunication() {
            if (isAnimating) return;
            
            // リセットしてから開始
            resetNetwork();
            
            isAnimating = true;
            isManualMode = false;
            document.getElementById('start-communication').disabled = true;
            document.getElementById('step-forward').disabled = true;
            document.getElementById('step-backward').disabled = true;
            
            addLog('🚀 HTTP通信を開始します...', 'info');
            
            try {
                await simulateHttpCommunication();
                
                // 連続実行の場合
                if (isAnimating) {
                    animationInterval = setTimeout(() => {
                        if (isAnimating) {
                            startCommunication();
                        }
                    }, 3000);
                }
            } catch (error) {
                console.error('Animation error:', error);
                addLog('❌ 通信エラーが発生しました', 'error');
            } finally {
                if (!animationInterval) {
                    isAnimating = false;
                    document.getElementById('start-communication').disabled = false;
                    document.getElementById('step-forward').disabled = false;
                    document.getElementById('step-backward').disabled = false;
                }
            }
        }

        // 通信停止
        function stopCommunication() {
            isAnimating = false;
            isManualMode = true;
            if (animationInterval) {
                clearTimeout(animationInterval);
                animationInterval = null;
            }
            document.getElementById('start-communication').disabled = false;
            document.getElementById('step-forward').disabled = false;
            document.getElementById('step-backward').disabled = false;
            addLog('⏹️ 通信を停止しました（手動モードに切り替え）', 'info');
            
            // ステップが準備されていない場合は準備
            if (animationSteps.length === 0) {
                prepareAnimationSteps();
            }
        }

        // 手動で次のステップに進む
        async function stepForward() {
            // ステップが準備されていない場合は準備
            if (animationSteps.length === 0) {
                prepareAnimationSteps();
                addLog('📋 手動モードでアニメーションを開始します', 'info');
                isManualMode = true;
            }
            
            if (currentStep >= totalSteps) {
                addLog('🎯 全てのステップが既に完了しています', 'info');
                return;
            }
            
            // 重複実行の防止
            const button = document.getElementById('step-forward');
            if (button.disabled) return;
            
            button.disabled = true;
            
            try {
                await executeStep(currentStep);
                currentStep++;
                
                // ボタンの状態を更新
                document.getElementById('step-backward').disabled = currentStep === 0;
                document.getElementById('step-forward').disabled = currentStep >= totalSteps;
                
                if (currentStep >= totalSteps) {
                    addLog('🎯 全てのステップが完了しました', 'success');
                }
            } finally {
                // ボタンを再有効化（完了していない場合のみ）
                if (currentStep < totalSteps) {
                    button.disabled = false;
                }
            }
        }

        // 手動で前のステップに戻る
        async function stepBackward() {
            if (currentStep <= 0) {
                addLog('🔙 既に最初のステップです', 'info');
                return;
            }
            
            // 重複実行の防止
            const button = document.getElementById('step-backward');
            if (button.disabled) return;
            
            button.disabled = true;
            
            try {
                // 現在のステップを1つ戻して、そのステップの逆操作を実行
                currentStep--;
                const step = animationSteps[currentStep];
                
                if (step.type === 'log') {
                    // ログの削除
                    const logContainer = document.getElementById('communication-log');
                    const lastLog = logContainer.lastElementChild;
                    if (lastLog && lastLog.classList.contains('log-item')) {
                        logContainer.removeChild(lastLog);
                    }
                } else if (step.type === 'packet') {
                    // パケットの逆アニメーション
                    try {
                        // パケットを作成して逆方向に移動
                        const packet = createPacket(step.id + '-reverse', step.label, step.to, step.from, step.color);
                        nodes.add(packet);
                        await movePacket(step.id + '-reverse', step.to, step.from, 800);
                        
                        // 元のパケットも削除（存在する場合）
                        try {
                            nodes.remove(step.id);
                        } catch (e) {
                            // 元のパケットが存在しない場合は無視
                        }
                    } catch (e) {
                        console.warn(`パケット ${step.id} の逆アニメーションでエラー:`, e);
                    }
                }
                
                // ボタンの状態を更新
                document.getElementById('step-backward').disabled = currentStep === 0;
                document.getElementById('step-forward').disabled = currentStep >= totalSteps;
                
                addLog(`⏪ ステップ ${currentStep + 1} に戻りました`, 'info');
            } finally {
                // ボタンを再有効化（最初でない場合のみ）
                if (currentStep > 0) {
                    button.disabled = false;
                }
            }
        }

        // ネットワークリセット
        function resetNetwork() {
            stopCommunication();
            
            // パケットノードのみを削除（DNSサーバーなどの固定ノードは残す）
            const allNodes = nodes.get();
            const packetNodes = allNodes.filter(node => 
                node.id.includes('request') || node.id.includes('response') || 
                (node.id.includes('dns') && (node.id.includes('query') || node.id.includes('response')))
            );
            
            packetNodes.forEach(packet => {
                try {
                    nodes.remove(packet.id);
                } catch (e) {
                    // 既に削除済みの場合は無視
                }
            });
            
            // ステップカウンターをリセット
            packetCounter = 0;
            currentStep = 0;
            totalSteps = 0;
            animationSteps = [];
            isManualMode = false;
            
            // ボタンの状態をリセット
            document.getElementById('start-communication').disabled = false;
            document.getElementById('step-forward').disabled = false;
            document.getElementById('step-backward').disabled = true;
            
            addLog('🔄 ネットワークをリセットしました', 'info');
        }

        // ログクリア
        function clearLog() {
            const logContainer = document.getElementById('communication-log');
            logContainer.innerHTML = '<div class="log-item">ログをクリアしました。</div>';
        }

        // イベントリスナーの設定
        document.addEventListener('DOMContentLoaded', () => {
            // Vis.jsスクリプトを読み込み
            const script = document.createElement('script');
            script.src = 'https://unpkg.com/vis-network/standalone/umd/vis-network.min.js';
            script.onload = () => {
                initNetwork();
                addLog('📡 ネットワークシミュレータが初期化されました', 'success');
            };
            script.onerror = () => {
                addLog('❌ Vis.jsライブラリの読み込みに失敗しました', 'error');
            };
            document.head.appendChild(script);

            // ボタンイベント
            document.getElementById('start-communication').addEventListener('click', startCommunication);
            document.getElementById('stop-communication').addEventListener('click', stopCommunication);
            document.getElementById('step-forward').addEventListener('click', stepForward);
            document.getElementById('step-backward').addEventListener('click', stepBackward);
            document.getElementById('reset-network').addEventListener('click', resetNetwork);
            document.getElementById('clear-log').addEventListener('click', clearLog);
        });
    </script>

    <style>
        .network-simulator {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .simulator-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .simulator-header h1 {
            color: #2563eb;
            margin-bottom: 10px;
            font-size: clamp(1.4rem, 4vw, 2.25rem);
        }

        .simulator-content {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px 15px;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #2563eb;
            flex-wrap: wrap;
            gap: 10px;
        }

        .section-header h3 {
            margin: 0;
            color: #1e293b;
            font-size: clamp(1rem, 2.5vw, 1.25rem);
        }

        .controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        #network-container {
            width: 100%;
            height: 400px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background: #ffffff;
        }

        #communication-log {
            height: 300px;
            padding: 15px;
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 8px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 12px;
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .log-item {
            margin-bottom: 8px;
            padding: 4px 0;
            border-bottom: 1px solid #334155;
        }

        .log-item:last-child {
            border-bottom: none;
        }

        .log-item.request {
            color: #60a5fa;
        }

        .log-item.response {
            color: #f87171;
        }

        .log-item.processing {
            color: #fbbf24;
        }

        .log-item.success {
            color: #34d399;
        }

        .log-item.error {
            color: #ef4444;
        }

        .log-item.info {
            color: #a1a1aa;
        }

        .log-item.dns {
            color: #c084fc;
        }

        .timestamp {
            color: #64748b;
            font-size: 10px;
        }

        .network-info {
            background: #f0f9ff;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #0ea5e9;
        }

        .network-info h4 {
            color: #0c4a6e;
            margin-bottom: 15px;
        }

        .network-info ul {
            list-style: none;
            padding: 0;
        }

        .network-info li {
            padding: 8px 0;
            border-bottom: 1px solid #bae6fd;
        }

        .network-info li:last-child {
            border-bottom: none;
        }

        .explanation-section {
            background: #f8fafc;
            padding: 30px;
            border-radius: 12px;
            border-left: 4px solid #10b981;
        }

        .explanation-section h3 {
            color: #1e293b;
            margin-bottom: 20px;
            text-align: center;
        }

        .explanation-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .explanation-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .explanation-card h4 {
            color: #2563eb;
            margin-bottom: 10px;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 0.875rem;
            white-space: nowrap;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: #1d4ed8;
        }

        .btn-secondary {
            background: #64748b;
            color: white;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-outline {
            background: transparent;
            color: #64748b;
            border: 1px solid #d1d5db;
        }

        .btn-outline:hover {
            background: #f9fafb;
            border-color: #9ca3af;
        }

        /* レスポンシブ対応 */
        @media (max-width: 1024px) {
            .simulator-content {
                grid-template-columns: 1fr;
            }
            
            #network-container {
                height: 350px;
            }
        }

        @media (max-width: 768px) {
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }
            
            .controls {
                width: 100%;
                justify-content: center;
            }
            
            .explanation-grid {
                grid-template-columns: 1fr;
            }
            
            #communication-log {
                height: 250px;
            }
        }
    </style>
</Layout>