---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="ÂïèÈ°åÊºîÁøí - „Åò„Çá„ÅÜ„Åª„ÅÜ„Çâ„ÅÑ„Åµ">
  <div class="container mx-auto px-4 py-8">
    <div id="quiz-app" class="max-w-6xl mx-auto">
      <!-- React component will be mounted here via script -->
    </div>
  </div>
</Layout>

<script>
// YAML parsing function (simple implementation for basic YAML)
function parseSimpleYAML(yamlText) {
  const lines = yamlText.split('\n');
  const result = {};
  let currentArray = null;
  let currentArrayKey = null;
  let currentObject = null;
  let indentLevel = 0;
  
  for (let line of lines) {
    line = line.trim();
    if (!line || line.startsWith('#')) continue;
    
    if (line.includes(':')) {
      const [key, value] = line.split(':').map(s => s.trim());
      if (value === '') {
        // This might be a parent key
        if (key === 'questions') {
          result[key] = [];
          currentArray = result[key];
          currentArrayKey = key;
        } else {
          result[key] = value;
        }
      } else if (value.startsWith('[') && value.endsWith(']')) {
        // Array value
        result[key] = value.slice(1, -1).split(',').map(s => s.trim().replace(/['"]/g, ''));
      } else {
        result[key] = value.replace(/['"]/g, '');
      }
    } else if (line.startsWith('- ') && currentArray) {
      if (line === '- id:' || line.startsWith('- id:')) {
        currentObject = {};
        currentArray.push(currentObject);
      } else {
        const value = line.substring(2).trim();
        if (currentArray === result.tags) {
          currentArray.push(value.replace(/['"]/g, ''));
        }
      }
    } else if (currentObject && line.includes(':')) {
      const [key, value] = line.split(':').map(s => s.trim());
      if (key === 'options') {
        currentObject[key] = [];
      } else {
        currentObject[key] = value.replace(/['"]/g, '');
      }
    }
  }
  
  return result;
}

async function loadQuestionSet(setId) {
  try {
    const response = await fetch(`/questions/${setId}/questions.yaml`);
    if (!response.ok) {
      throw new Error(`Failed to load question set: ${response.status}`);
    }
    
    const yamlContent = await response.text();
    console.log('Loaded YAML for', setId, ':', yamlContent.substring(0, 200));
    
    // YAML parsing with proper indentation handling
    const lines = yamlContent.split('\n');
    const questionSet = {
      id: setId,
      title: '',
      description: '',
      icon: 'üìù',
      difficulty: 'medium',
      estimatedTime: 10,
      questions: [],
      tags: [],
      category: 'general'
    };
    
    let currentQuestion = null;
    let currentOption = null;
    let inQuestions = false;
    let inTags = false;
    let inOptions = false;
    let inQuestionTags = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const trimmed = line.trim();
      const indent = line.length - line.trimStart().length;
      
      if (!trimmed || trimmed.startsWith('#')) continue;
      
      // Root level properties
      if (indent === 0 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'title') {
          questionSet.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          questionSet.description = value.replace(/['"]/g, '');
        } else if (key === 'icon') {
          questionSet.icon = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          questionSet.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'estimatedTime') {
          questionSet.estimatedTime = parseInt(value) || 10;
        } else if (key === 'category') {
          questionSet.category = value.replace(/['"]/g, '');
        } else if (key === 'questions') {
          inQuestions = true;
          inTags = false;
        } else if (key === 'tags') {
          inTags = true;
          inQuestions = false;
        }
      }
      // Tags section
      else if (inTags && indent === 2 && trimmed.startsWith('- ')) {
        questionSet.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Questions section
      else if (inQuestions && indent === 2 && trimmed.startsWith('- id:')) {
        currentQuestion = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          type: 'single-choice',
          title: '',
          description: '',
          options: [],
          explanation: '',
          difficulty: 'medium',
          tags: [],
          points: 1
        };
        questionSet.questions.push(currentQuestion);
        inOptions = false;
        inQuestionTags = false;
      }
      // Question properties
      else if (currentQuestion && indent === 4 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'type') {
          currentQuestion.type = value.replace(/['"]/g, '');
        } else if (key === 'title') {
          currentQuestion.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          currentQuestion.description = value.replace(/['"]/g, '');
        } else if (key === 'explanation') {
          currentQuestion.explanation = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          currentQuestion.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'points') {
          currentQuestion.points = parseInt(value) || 1;
        } else if (key === 'hint') {
          currentQuestion.hint = value.replace(/['"]/g, '');
        } else if (key === 'options') {
          inOptions = true;
          inQuestionTags = false;
        } else if (key === 'tags') {
          inQuestionTags = true;
          inOptions = false;
        }
      }
      // Question tags
      else if (inQuestionTags && indent === 6 && trimmed.startsWith('- ')) {
        currentQuestion.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Options
      else if (inOptions && indent === 6 && trimmed.startsWith('- id:')) {
        currentOption = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          text: '',
          isCorrect: false,
          explanation: ''
        };
        currentQuestion.options.push(currentOption);
      }
      // Option properties
      else if (currentOption && indent === 8 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'text') {
          currentOption.text = value.replace(/['"]/g, '');
        } else if (key === 'isCorrect') {
          currentOption.isCorrect = value.replace(/['"]/g, '') === 'true';
        } else if (key === 'explanation') {
          currentOption.explanation = value.replace(/['"]/g, '');
        }
      }
    }
    
    console.log('Parsed question set:', questionSet);
    return questionSet;
  } catch (error) {
    console.error(`Error loading question set ${setId}:`, error);
    return null;
  }
}

async function loadAvailableQuestionSets() {
  try {
    const response = await fetch('/questions/index.yaml');
    if (!response.ok) {
      throw new Error(`Failed to load question sets index: ${response.status}`);
    }

    const yamlContent = await response.text();
    console.log('Loaded index YAML');

    const questionSets = [];

    // Parse the new structured YAML format
    const lines = yamlContent.split('\n');
    let currentSet = null;

    for (let line of lines) {
      const trimmed = line.trim();

      // New question set starts with "- id:"
      if (trimmed.startsWith('- id:')) {
        if (currentSet) {
          questionSets.push(currentSet);
        }
        currentSet = {
          id: trimmed.substring(5).trim()
        };
      } else if (currentSet && trimmed.includes(':')) {
        // Parse other properties
        const colonIndex = trimmed.indexOf(':');
        const key = trimmed.substring(0, colonIndex).trim();
        let value = trimmed.substring(colonIndex + 1).trim();

        // Remove quotes if present
        if ((value.startsWith('"') && value.endsWith('"')) ||
            (value.startsWith("'") && value.endsWith("'"))) {
          value = value.slice(1, -1);
        }

        // Convert estimatedTime to number
        if (key === 'estimatedTime') {
          value = parseInt(value, 10);
        }

        currentSet[key] = value;
      }
    }

    // Don't forget the last set
    if (currentSet) {
      questionSets.push(currentSet);
    }

    console.log(`Loaded ${questionSets.length} question sets from index`);
    return questionSets;
  } catch (error) {
    console.error('Error loading available question sets:', error);
    return [];
  }
}

class QuizApp {
  constructor() {
    this.questionSets = [];
    this.init();
  }

  async init() {
    try {
      this.questionSets = await loadAvailableQuestionSets();

      // „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞ÂïèÈ°å„Çª„ÉÉ„Éà„ÇíË™≠„ÅøËæº„Åø
      const programmingSets = await this.loadProgrammingExercises();
      this.questionSets = [...this.questionSets, ...programmingSets];

      this.render();
    } catch (error) {
      console.error('Error loading question sets:', error);
      this.renderError();
    }
  }

  async loadProgrammingExercises() {
    try {
      const response = await fetch('/programming-exercises/index.yaml');
      if (!response.ok) {
        console.log('No programming exercises found');
        return [];
      }

      const yamlContent = await response.text();
      const lines = yamlContent.split('\n');
      const exerciseIds = [];

      for (let line of lines) {
        const trimmed = line.trim();
        if (trimmed.startsWith('- ')) {
          exerciseIds.push(trimmed.substring(2).trim());
        }
      }

      const exercises = [];
      for (const exerciseId of exerciseIds) {
        const exerciseResponse = await fetch(`/programming-exercises/${exerciseId}.yaml`);
        if (exerciseResponse.ok) {
          const exerciseYaml = await exerciseResponse.text();
          const exercise = this.parseProgrammingExercise(exerciseYaml);
          exercises.push(exercise);
        }
      }

      return exercises;
    } catch (error) {
      console.error('Error loading programming exercises:', error);
      return [];
    }
  }

  parseProgrammingExercise(yamlContent) {
    const lines = yamlContent.split('\n');
    const exercise = {
      id: '',
      title: '',
      description: '',
      icon: 'üêç',
      difficulty: 'easy',
      estimatedTime: 10,
      category: '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞'
    };

    for (let line of lines) {
      const trimmed = line.trim();
      if (trimmed.includes(':')) {
        const colonIndex = trimmed.indexOf(':');
        const key = trimmed.substring(0, colonIndex).trim();
        let value = trimmed.substring(colonIndex + 1).trim();

        if ((value.startsWith('"') && value.endsWith('"')) ||
            (value.startsWith("'") && value.endsWith("'"))) {
          value = value.slice(1, -1);
        }

        if (key === 'estimatedTime') {
          value = parseInt(value, 10);
        }

        if (['id', 'title', 'description', 'icon', 'difficulty', 'estimatedTime', 'category'].includes(key)) {
          exercise[key] = value;
        }
      }
    }

    return exercise;
  }

  render() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    // Create React component props
    const props = {
      questionSets: this.questionSets,
      onSelectUnit: (unitId) => {
        window.location.href = `/quiz/${unitId}`;
      },
      isLoading: false
    };

    // „Ç´„ÉÜ„Ç¥„É™ÂÆöÁæ©„Å®È†ÜÂ∫è
    const categoryConfig = [
      {
        id: 'digital',
        title: '„Éá„Ç∏„Çø„É´Âåñ',
        icon: 'üíæ',
        order: ['binary_conversion', 'hex_conversion', 'image_digitization', 'logic-circuits']
      },
      {
        id: 'ethics',
        title: 'ÊÉÖÂ†±„É¢„É©„É´',
        icon: '‚öñÔ∏è',
        order: ['copyright', 'industrial', 'portrait', 'moraru', 'sports_festival_smartphone']
      },
      {
        id: 'network',
        title: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ',
        icon: 'üåê',
        order: [
          'network1', 'network2',
          'network-construction', 'network-troubleshooting', 'network-construction-3',
          'network-construction-4', 'network-construction-5',
          'subnet_mask_conversion', 'subnet_calculation', 'subnet_address_calculation',
          'network-construction-6', 'network-construction-7'
        ]
      },
      {
        id: 'programming',
        title: '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞',
        icon: 'üêç',
        order: ['hello-world', 'multiplication', 'conditional'],
        isProgramming: true
      }
    ];

    // „Ç´„ÉÜ„Ç¥„É™„Åî„Å®„Å´ÂïèÈ°å„Çª„ÉÉ„Éà„Çí„Ç∞„É´„Éº„ÉóÂåñ
    const categorizedSets = {};
    categoryConfig.forEach(category => {
      categorizedSets[category.id] = {
        ...category,
        sets: []
      };
    });

    // ÂêÑÂïèÈ°å„Çª„ÉÉ„Éà„ÇíÂØæÂøú„Åô„Çã„Ç´„ÉÜ„Ç¥„É™„Å´ÊåØ„ÇäÂàÜ„Åë
    this.questionSets.forEach(questionSet => {
      for (const category of categoryConfig) {
        if (category.order.includes(questionSet.id)) {
          categorizedSets[category.id].sets.push(questionSet);
          break;
        }
      }
    });

    // „Ç´„ÉÜ„Ç¥„É™„ÅÆÈ†ÜÂ∫è„Åß‰∏¶„ÅπÊõø„Åà„ÄÅÂêÑ„Ç´„ÉÜ„Ç¥„É™ÂÜÖ„ÇÇÂÆöÁæ©„Åï„Çå„ÅüÈ†ÜÂ∫è„Å´Âæì„ÅÜ
    Object.values(categorizedSets).forEach(category => {
      category.sets.sort((a, b) => {
        const indexA = category.order.indexOf(a.id);
        const indexB = category.order.indexOf(b.id);
        return indexA - indexB;
      });
    });

    // Render UnitSelector component
    // Note: In a real implementation, you'd use React's render method
    // For now, we'll handle the navigation in a simpler way
    container.innerHTML = `
      <div style="margin-bottom: 3rem;">
        <div style="text-align: center; margin-bottom: 3rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 1rem;">
            ÂïèÈ°åÊºîÁøí„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ
          </h2>
          <div id="alert-container" style="margin-bottom: 1rem;"></div>
          <p style="color: var(--text-secondary);">
            Â≠¶Áøí„Åó„Åü„ÅÑÂçòÂÖÉ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          </p>
        </div>

        ${categoryConfig.map(category => {
          const categorySets = categorizedSets[category.id].sets;
          if (categorySets.length === 0) return '';

          return `
            <div style="margin-bottom: 3rem;">
              <h3 style="
                font-size: 1.5rem;
                font-weight: 700;
                color: var(--text-primary);
                margin-bottom: 1.5rem;
                padding-bottom: 0.5rem;
                border-bottom: 3px solid var(--primary-color);
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <span style="font-size: 1.75rem;">${category.icon}</span>
                ${category.title}
              </h3>
              <div class="learning-grid">
                ${categorySets.map(questionSet => {
                  const href = category.isProgramming
                    ? `/programming-exercise/${questionSet.id}`
                    : `/quiz/${questionSet.id}`;
                  return `
                  <a href="${href}" class="topic-card-link">
                    <div class="topic-card bg-gradient-to-br ${this.getDifficultyColor(questionSet.difficulty)}">
                      <div class="topic-icon">${questionSet.icon}</div>
                      <h3>${questionSet.title}</h3>
                      <p>${questionSet.description}</p>
                      <div style="display: flex; align-items: center; justify-content: space-between; font-size: 0.875rem; color: rgba(255,255,255,0.8); margin-top: 1rem;">
                        <div style="display: flex; align-items: center; gap: 1rem;">
                          <span style="display: flex; align-items: center;">
                            <svg style="width: 16px; height: 16px; margin-right: 4px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            Á¥Ñ${questionSet.estimatedTime}ÂàÜ
                          </span>
                          <span style="display: flex; align-items: center;">
                            <svg style="width: 16px; height: 16px; margin-right: 4px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                            ${questionSet.difficulty === 'easy' ? 'ÂàùÁ¥ö' : questionSet.difficulty === 'medium' ? '‰∏≠Á¥ö' : '‰∏äÁ¥ö'}
                          </span>
                        </div>
                      </div>
                      <div class="topic-arrow">‚Üí</div>
                    </div>
                  </a>
                `;
                }).join('')}
              </div>
            </div>
          `;
        }).join('')}
      </div>
    `;
  }

  renderError() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          ÂïèÈ°å„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü
        </h3>
        <p class="text-gray-500 mb-4">
          ÂïèÈ°å„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ
        </p>
        <button 
          onclick="window.location.reload()"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          ÂÜçË™≠„ÅøËæº„Åø
        </button>
      </div>
    `;
  }

  getDifficultyColor(difficulty) {
    switch (difficulty) {
      case 'easy':
        return 'from-green-500 to-emerald-600';
      case 'medium':
        return 'from-yellow-500 to-orange-600';
      case 'hard':
        return 'from-red-500 to-pink-600';
      default:
        return 'from-blue-500 to-purple-600';
    }
  }

  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy':
        return 'ÂàùÁ¥ö';
      case 'medium':
        return '‰∏≠Á¥ö';
      case 'hard':
        return '‰∏äÁ¥ö';
      default:
        return '‰∏≠Á¥ö';
    }
  }

  showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) return;

    const alertTypes = {
      info: {
        backgroundColor: '#dbeafe',
        borderColor: '#93c5fd',
        textColor: '#1e40af',
        icon: '‚ÑπÔ∏è'
      },
      success: {
        backgroundColor: '#dcfce7',
        borderColor: '#86efac',
        textColor: '#166534',
        icon: '‚úÖ'
      },
      warning: {
        backgroundColor: '#fef3c7',
        borderColor: '#fbbf24',
        textColor: '#92400e',
        icon: '‚ö†Ô∏è'
      },
      error: {
        backgroundColor: '#fecaca',
        borderColor: '#f87171',
        textColor: '#991b1b',
        icon: '‚ùå'
      }
    };

    const alertStyle = alertTypes[type] || alertTypes.info;

    alertContainer.innerHTML = `
      <div style="
        background-color: ${alertStyle.backgroundColor};
        border: 1px solid ${alertStyle.borderColor};
        color: ${alertStyle.textColor};
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      ">
        <span style="font-size: 1.2rem;">${alertStyle.icon}</span>
        <span style="flex: 1;">${message}</span>
        <button onclick="this.parentElement.style.display='none'" 
                style="
                  background: none;
                  border: none;
                  font-size: 1.5rem;
                  cursor: pointer;
                  color: ${alertStyle.textColor};
                  padding: 0;
                  margin-left: 0.5rem;
                  width: 24px;
                  height: 24px;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  border-radius: 50%;
                  transition: background-color 0.2s;
                "
                onmouseover="this.style.backgroundColor='rgba(0,0,0,0.1)'"
                onmouseout="this.style.backgroundColor='transparent'">
          √ó
        </button>
      </div>
    `;
  }

  hideAlert() {
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) return;
    alertContainer.innerHTML = '';
  }
}

// Initialize the app when DOM is loaded
let quizApp;
document.addEventListener('DOMContentLoaded', () => {
  quizApp = new QuizApp();
  window.quizApp = quizApp; // Make it globally accessible
});
</script>

<style>
/* Additional styles for the quiz app */
.quiz-container {
  min-height: 60vh;
}
</style>