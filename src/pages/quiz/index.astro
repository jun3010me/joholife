---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="問題演習 - じょうほうらいふ">
  <div class="container mx-auto px-4 py-8">
    <div id="quiz-app" class="max-w-6xl mx-auto">
      <!-- React component will be mounted here via script -->
    </div>
  </div>
</Layout>

<script>
// YAML parsing function (simple implementation for basic YAML)
function parseSimpleYAML(yamlText) {
  const lines = yamlText.split('\n');
  const result = {};
  let currentArray = null;
  let currentArrayKey = null;
  let currentObject = null;
  let indentLevel = 0;
  
  for (let line of lines) {
    line = line.trim();
    if (!line || line.startsWith('#')) continue;
    
    if (line.includes(':')) {
      const [key, value] = line.split(':').map(s => s.trim());
      if (value === '') {
        // This might be a parent key
        if (key === 'questions') {
          result[key] = [];
          currentArray = result[key];
          currentArrayKey = key;
        } else {
          result[key] = value;
        }
      } else if (value.startsWith('[') && value.endsWith(']')) {
        // Array value
        result[key] = value.slice(1, -1).split(',').map(s => s.trim().replace(/['"]/g, ''));
      } else {
        result[key] = value.replace(/['"]/g, '');
      }
    } else if (line.startsWith('- ') && currentArray) {
      if (line === '- id:' || line.startsWith('- id:')) {
        currentObject = {};
        currentArray.push(currentObject);
      } else {
        const value = line.substring(2).trim();
        if (currentArray === result.tags) {
          currentArray.push(value.replace(/['"]/g, ''));
        }
      }
    } else if (currentObject && line.includes(':')) {
      const [key, value] = line.split(':').map(s => s.trim());
      if (key === 'options') {
        currentObject[key] = [];
      } else {
        currentObject[key] = value.replace(/['"]/g, '');
      }
    }
  }
  
  return result;
}

async function loadQuestionSet(setId) {
  try {
    const response = await fetch(`/questions/${setId}/questions.yaml`);
    if (!response.ok) {
      throw new Error(`Failed to load question set: ${response.status}`);
    }
    
    const yamlContent = await response.text();
    console.log('Loaded YAML for', setId, ':', yamlContent.substring(0, 200));
    
    // YAML parsing with proper indentation handling
    const lines = yamlContent.split('\n');
    const questionSet = {
      id: setId,
      title: '',
      description: '',
      icon: '📝',
      difficulty: 'medium',
      estimatedTime: 10,
      questions: [],
      tags: [],
      category: 'general'
    };
    
    let currentQuestion = null;
    let currentOption = null;
    let inQuestions = false;
    let inTags = false;
    let inOptions = false;
    let inQuestionTags = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const trimmed = line.trim();
      const indent = line.length - line.trimStart().length;
      
      if (!trimmed || trimmed.startsWith('#')) continue;
      
      // Root level properties
      if (indent === 0 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'title') {
          questionSet.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          questionSet.description = value.replace(/['"]/g, '');
        } else if (key === 'icon') {
          questionSet.icon = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          questionSet.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'estimatedTime') {
          questionSet.estimatedTime = parseInt(value) || 10;
        } else if (key === 'category') {
          questionSet.category = value.replace(/['"]/g, '');
        } else if (key === 'questions') {
          inQuestions = true;
          inTags = false;
        } else if (key === 'tags') {
          inTags = true;
          inQuestions = false;
        }
      }
      // Tags section
      else if (inTags && indent === 2 && trimmed.startsWith('- ')) {
        questionSet.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Questions section
      else if (inQuestions && indent === 2 && trimmed.startsWith('- id:')) {
        currentQuestion = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          type: 'single-choice',
          title: '',
          description: '',
          options: [],
          explanation: '',
          difficulty: 'medium',
          tags: [],
          points: 1
        };
        questionSet.questions.push(currentQuestion);
        inOptions = false;
        inQuestionTags = false;
      }
      // Question properties
      else if (currentQuestion && indent === 4 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'type') {
          currentQuestion.type = value.replace(/['"]/g, '');
        } else if (key === 'title') {
          currentQuestion.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          currentQuestion.description = value.replace(/['"]/g, '');
        } else if (key === 'explanation') {
          currentQuestion.explanation = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          currentQuestion.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'points') {
          currentQuestion.points = parseInt(value) || 1;
        } else if (key === 'hint') {
          currentQuestion.hint = value.replace(/['"]/g, '');
        } else if (key === 'options') {
          inOptions = true;
          inQuestionTags = false;
        } else if (key === 'tags') {
          inQuestionTags = true;
          inOptions = false;
        }
      }
      // Question tags
      else if (inQuestionTags && indent === 6 && trimmed.startsWith('- ')) {
        currentQuestion.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Options
      else if (inOptions && indent === 6 && trimmed.startsWith('- id:')) {
        currentOption = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          text: '',
          isCorrect: false,
          explanation: ''
        };
        currentQuestion.options.push(currentOption);
      }
      // Option properties
      else if (currentOption && indent === 8 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'text') {
          currentOption.text = value.replace(/['"]/g, '');
        } else if (key === 'isCorrect') {
          currentOption.isCorrect = value.replace(/['"]/g, '') === 'true';
        } else if (key === 'explanation') {
          currentOption.explanation = value.replace(/['"]/g, '');
        }
      }
    }
    
    console.log('Parsed question set:', questionSet);
    return questionSet;
  } catch (error) {
    console.error(`Error loading question set ${setId}:`, error);
    return null;
  }
}

async function loadAvailableQuestionSets() {
  try {
    const response = await fetch('/questions/index.yaml');
    if (!response.ok) {
      throw new Error(`Failed to load question sets index: ${response.status}`);
    }
    
    const yamlContent = await response.text();
    console.log('Loaded index YAML:', yamlContent);
    
    const questionSets = [];
    
    // Simple parsing for the index file
    const lines = yamlContent.split('\n');
    for (let line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith('- ')) {
        const setId = trimmed.substring(2).trim();
        const questionSet = await loadQuestionSet(setId);
        if (questionSet) {
          questionSets.push(questionSet);
        }
      }
    }
    
    console.log('Loaded question sets:', questionSets);
    return questionSets;
  } catch (error) {
    console.error('Error loading available question sets:', error);
    return [];
  }
}

class QuizApp {
  constructor() {
    this.questionSets = [];
    this.init();
  }

  async init() {
    try {
      this.questionSets = await loadAvailableQuestionSets();
      this.render();
    } catch (error) {
      console.error('Error loading question sets:', error);
      this.renderError();
    }
  }

  render() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    // Create React component props
    const props = {
      questionSets: this.questionSets,
      onSelectUnit: (unitId) => {
        window.location.href = `/quiz/${unitId}`;
      },
      isLoading: false
    };

    // Render UnitSelector component
    // Note: In a real implementation, you'd use React's render method
    // For now, we'll handle the navigation in a simpler way
    container.innerHTML = `
      <div style="margin-bottom: 3rem;">
        <div style="text-align: center; margin-bottom: 3rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 1rem;">
            問題演習を始めましょう
          </h2>
          <p style="color: var(--text-secondary);">
            学習したい単元を選択してください
          </p>
        </div>
        <div class="learning-grid">
          ${this.questionSets.map(questionSet => `
            <a href="/quiz/${questionSet.id}" class="topic-card-link">
              <div class="topic-card bg-gradient-to-br ${this.getDifficultyColor(questionSet.difficulty)}">
                <div class="topic-icon">${questionSet.icon}</div>
                <h3>${questionSet.title}</h3>
                <p>${questionSet.description}</p>
                <div style="display: flex; align-items: center; justify-content: space-between; font-size: 0.875rem; color: rgba(255,255,255,0.8); margin-top: 1rem;">
                  <div style="display: flex; align-items: center; gap: 1rem;">
                    <span style="display: flex; align-items: center;">
                      <svg style="width: 16px; height: 16px; margin-right: 4px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      ${questionSet.estimatedTime}分
                    </span>
                    <span style="display: flex; align-items: center;">
                      <svg style="width: 16px; height: 16px; margin-right: 4px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      ${questionSet.questions.length}問
                    </span>
                  </div>
                </div>
                <div class="topic-arrow">→</div>
              </div>
            </a>
          `).join('')}
        </div>
      </div>
    `;
  }

  renderError() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">⚠️</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          問題データの読み込みに失敗しました
        </h3>
        <p class="text-gray-500 mb-4">
          問題データを読み込めませんでした。しばらく時間をおいて再度お試しください。
        </p>
        <button 
          onclick="window.location.reload()"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          再読み込み
        </button>
      </div>
    `;
  }

  getDifficultyColor(difficulty) {
    switch (difficulty) {
      case 'easy':
        return 'from-green-500 to-emerald-600';
      case 'medium':
        return 'from-yellow-500 to-orange-600';
      case 'hard':
        return 'from-red-500 to-pink-600';
      default:
        return 'from-blue-500 to-purple-600';
    }
  }

  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy':
        return '初級';
      case 'medium':
        return '中級';
      case 'hard':
        return '上級';
      default:
        return '中級';
    }
  }
}

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new QuizApp();
});
</script>

<style>
/* Additional styles for the quiz app */
.quiz-container {
  min-height: 60vh;
}
</style>