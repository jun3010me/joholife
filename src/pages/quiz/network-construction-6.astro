---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="ネットワーク構築課題⑥ - じょうほうらいふ">
  <div class="container mx-auto px-4 py-8">
    <div id="network-quiz-app" class="max-w-4xl mx-auto">
      <div class="flex items-center justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span class="text-gray-600">課題を読み込み中...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
async function loadNetworkQuestions() {
  return {
    id: 'network-construction-6',
    title: 'ネットワーク構築課題⑥',
    description: 'PC-Webサーバー間のHTTP通信とTCP詳細表示',
    icon: '🌐',
    difficulty: 'easy',
    estimatedTime: 15,
    category: 'ネットワーク構築',
    tags: ['ネットワーク設計', 'HTTP通信', 'TCP詳細', '直接接続'],
    questions: [{
      id: 'network_construction_6',
      type: 'file-analysis',
      title: 'PC-Webサーバー間のHTTP通信とTCP詳細表示',
      description: `**課題概要**

PC1とWebサーバーを直接LANケーブルで接続し、TCP詳細を有効にしてHTTP通信のシミュレートを行ってください。

**構成要件**
- PC1とWebサーバーを1台ずつ配置
- LANケーブルで直接接続
- 同じネットワークセグメント内のIPアドレス設定
- TCP詳細機能を有効化

**設定要件**
1. **デバイス配置**
   - PC1を配置
   - Webサーバーを配置

2. **接続設定**
   - PC1とWebサーバーをLANケーブルで直接接続

3. **IPアドレス設定**
   - PC1とWebサーバーのIPアドレスを同じネットワークセグメント内に設定
   - 例：PC1=192.168.0.1、Webサーバー=192.168.0.2（サブネットマスク：255.255.255.0）

4. **TCP詳細設定**
   - 画面右下の「TCP詳細」にチェックを入れる

**判定項目**
- PCとWebサーバーが接続されている
- IPアドレスが同じセグメント内に設定されている
- TCP詳細機能が有効になっている

**完了後の確認**
設定完了後、PC1からWebサーバーへのHTTP通信を実行し、TCP詳細でパケットの流れを確認してください。`,
      explanation: `この課題では、最もシンプルなネットワーク構成でのHTTP通信とTCPプロトコルの詳細表示を学習できます。

**学習ポイント**
1. **直接接続の理解**：ハブやスイッチを経由しない最もシンプルな接続方法
2. **IPアドレス設計**：同じセグメント内での通信設定
3. **TCP詳細表示**：パケットレベルでの通信の可視化

**実際のネットワークでの応用**
- デバイス間の直接接続テスト
- TCPプロトコルの動作確認
- ネットワークトラブルシューティング`,
      difficulty: 'easy',
      tags: ['基本設定', 'HTTP通信', 'TCP詳細'],
      points: 100,
      expectedChanges: {
        devices: {
          pc: {
            count: 1,
            requirements: ['connected', 'same_segment']
          },
          server: {
            count: 1,
            requirements: ['connected', 'same_segment']
          }
        },
        connections: {
          requirements: ['pc_server_connection']
        },
        tcpDetails: {
          required: true
        }
      }
    }]
  };
}

// ネットワーククイズアプリケーション
class NetworkQuizApp {
  constructor() {
    this.currentQuestion = 0;
    this.userName = '';
    this.answers = [];
    this.questions = [];
    this.startTime = Date.now();
    this.questionStartTime = Date.now();
    this.uploadedFile = null;
    this.sessionId = null;
    this.cachedIpAddress = null;
    this.init();
  }

  async init() {
    const data = await loadNetworkQuestions();
    this.questions = data.questions;
    this.showNameInput();
  }

  showNameInput() {
    const app = document.getElementById('network-quiz-app');
    app.innerHTML = `
      <div style="max-width: 600px; margin: 0 auto; text-align: center;">
        <div class="card" style="padding: 3rem;">
          <div style="margin-bottom: 2rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">
              🌐
            </div>
            <h2 style="font-size: 1.75rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.2; hyphens: auto; word-break: break-word;">
              <span style="display: inline-block; max-width: 100%; font-size: clamp(1.25rem, 4vw, 1.75rem);">
                ネットワーク構築課題⑥
              </span>
            </h2>
            <p style="color: var(--text-secondary); margin-bottom: 2rem;">
              PC-Webサーバー間のHTTP通信とTCP詳細表示
            </p>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-bottom: 2rem; font-size: 0.875rem; color: var(--text-muted);">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                約15分
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                全1課題
              </div>
            </div>
          </div>

          <div style="border-top: 1px solid var(--border); padding-top: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              お名前を入力してください
            </h3>
            <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 0.875rem;">
              100%の合格率で全課題をクリアすると、修了証が発行されます<br>
              ※入力された氏名は、修了証発行にのみ使用されます。
            </p>

            <div style="margin-bottom: 2rem;">
              <input
                type="text"
                id="user-name"
                placeholder="お名前を入力してください"
                style="width: 100%; padding: 0.75rem; border: 1px solid var(--border); border-radius: var(--radius-md); font-size: 1rem; background: white;"
              />
            </div>

            <button
              onclick="app.startQuiz()"
              class="btn btn-primary"
              style="padding: 0.75rem 2rem; font-size: 1rem;"
            >
              課題を開始
            </button>

            <div style="margin-top: 1rem;">
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="font-size: 0.875rem;"
              >
                メニューに戻る
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  startQuiz() {
    const nameInput = document.getElementById('user-name');
    this.userName = nameInput.value.trim();
    
    if (!this.userName) {
      alert('お名前を入力してください。');
      return;
    }
    
    this.showQuestion();
  }

  showQuestion() {
    const question = this.questions[this.currentQuestion];
    const app = document.getElementById('network-quiz-app');
    
    app.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <div class="card" style="padding: 0; overflow: hidden;">
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); color: white; padding: 2rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;">
              <h2 style="font-size: 1.75rem; font-weight: 700; margin: 0; color: white;">${question.title}</h2>
              <span style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 2rem; font-size: 0.875rem;">
                問題 ${this.currentQuestion + 1}/${this.questions.length}
              </span>
            </div>
          </div>
          
          <div style="padding: 2rem;">
            <div class="prose" style="margin-bottom: 2rem;">
              ${this.formatDescription(question.description)}
            </div>
            
            <!-- File Upload Area -->
            <div style="margin-bottom: 2rem;">
              <div
                id="file-drop-zone"
                style="
                  border: 2px dashed var(--border);
                  border-radius: var(--radius-md);
                  padding: 2rem;
                  text-align: center;
                  background: var(--surface);
                  transition: all 0.3s ease;
                  cursor: pointer;
                "
                ondragover="event.preventDefault(); this.style.borderColor = 'var(--primary-color)'; this.style.background = 'var(--primary-bg-light)';"
                ondragleave="this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)';"
                ondrop="event.preventDefault(); this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)'; handleFileDrop(event);"
              >
                <div style="margin-bottom: 1rem;">
                  <svg style="width: 48px; height: 48px; margin: 0 auto; color: var(--text-muted);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                </div>
                <p style="color: var(--text-primary); font-weight: 500; margin-bottom: 0.5rem;">
                  編集済みJSONファイルをドラッグ＆ドロップまたはクリックしてアップロード
                </p>
                <p style="color: var(--text-muted); font-size: 0.875rem;">
                  ネットワークシミュレータで構成を作成後、「保存」ボタンからJSONファイルをダウンロードしてアップロードしてください
                </p>
                <input
                  type="file"
                  id="file-upload"
                  accept=".json"
                  style="display: none;"
                />
              </div>
              <div id="file-status" style="font-size: 0.875rem; color: var(--text-muted); margin-top: 1rem; text-align: center;"></div>
            </div>
            
            <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
              <button
                onclick="app.submitAnswer()"
                id="submit-btn"
                class="btn btn-primary"
                style="opacity: 0.5; cursor: not-allowed;"
                disabled
              >
                回答を送信
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // ファイルアップロードの処理
    const fileInput = document.getElementById('file-upload');
    const fileStatus = document.getElementById('file-status');
    const submitBtn = document.getElementById('submit-btn');
    const dropZone = document.getElementById('file-drop-zone');

    if (dropZone) {
      dropZone.addEventListener('click', () => {
        fileInput.click();
      });
    }

    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        this.processFile(file);
      }
    });

    // グローバル関数として定義
    window.handleFileDrop = (event) => {
      event.preventDefault();
      const files = event.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        if (file.type === 'application/json' || file.name.endsWith('.json')) {
          this.processFile(file);
        } else {
          fileStatus.textContent = '❌ JSONファイルを選択してください';
          fileStatus.style.color = '#dc2626';
        }
      }
    };
  }

  processFile(file) {
    const fileStatus = document.getElementById('file-status');
    const submitBtn = document.getElementById('submit-btn');

    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      fileStatus.textContent = `✅ ファイルが選択されました: ${file.name}`;
      fileStatus.style.color = 'var(--secondary-color)';
      submitBtn.disabled = false;
      submitBtn.style.opacity = '1';
      submitBtn.style.cursor = 'pointer';
      this.uploadedFile = file;
    } else {
      fileStatus.textContent = '❌ JSONファイルを選択してください';
      fileStatus.style.color = '#dc2626';
      submitBtn.disabled = true;
      submitBtn.style.opacity = '0.5';
      submitBtn.style.cursor = 'not-allowed';
    }
  }

  formatDescription(description) {
    return description
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-gray-100 px-1 rounded">$1</code>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>')
      .replace(/^/, '<p>')
      .replace(/$/, '</p>');
  }

  async submitAnswer() {
    if (!this.uploadedFile) {
      alert('JSONファイルを選択してください。');
      return;
    }

    try {
      const fileContent = await this.readFile(this.uploadedFile);
      const networkData = JSON.parse(fileContent);
      
      const result = this.analyzeNetworkConfiguration(networkData);
      const responseTime = Date.now() - this.questionStartTime;
      
      this.answers.push({
        questionId: this.questions[this.currentQuestion].id,
        networkData: networkData,
        result: result,
        responseTime: responseTime,
        timestamp: new Date().toISOString()
      });

      this.showResult(result);
    } catch (error) {
      alert('ファイルの読み込みに失敗しました。正しいJSONファイルを選択してください。');
      console.error('ファイル読み込みエラー:', error);
    }
  }

  readFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.onerror = (e) => reject(e);
      reader.readAsText(file);
    });
  }

  analyzeNetworkConfiguration(data) {
    const question = this.questions[this.currentQuestion];
    const expected = question.expectedChanges;
    let score = 0;
    let maxScore = 100;
    let feedback = [];
    let errors = [];

    console.log('Analyzing network configuration:', data);
    console.log('Expected configuration:', expected);

    try {
      // デバイス数とタイプの確認
      const devices = data.devices || [];
      const pcDevices = devices.filter(d => d.type === 'pc');
      const serverDevices = devices.filter(d => d.type === 'server');
      
      // PC1台の確認
      if (pcDevices.length === 1) {
        score += 25;
        feedback.push('✅ PC1台が正しく配置されています');
      } else if (pcDevices.length === 0) {
        errors.push('❌ PCが配置されていません');
      } else {
        errors.push(`❌ PCは1台である必要があります（現在: ${pcDevices.length}台）`);
      }

      // Webサーバー1台の確認
      if (serverDevices.length === 1) {
        score += 25;
        feedback.push('✅ Webサーバー1台が正しく配置されています');
      } else if (serverDevices.length === 0) {
        errors.push('❌ Webサーバーが配置されていません');
      } else {
        errors.push(`❌ Webサーバーは1台である必要があります（現在: ${serverDevices.length}台）`);
      }

      // 接続の確認
      const connections = data.connections || [];
      let pcServerConnected = false;
      
      if (pcDevices.length === 1 && serverDevices.length === 1) {
        const pcId = pcDevices[0].id;
        const serverId = serverDevices[0].id;
        
        pcServerConnected = connections.some(conn => 
          (conn.from.deviceId === pcId && conn.to.deviceId === serverId) ||
          (conn.from.deviceId === serverId && conn.to.deviceId === pcId)
        );
        
        if (pcServerConnected) {
          score += 25;
          feedback.push('✅ PCとWebサーバーが正しく接続されています');
        } else {
          errors.push('❌ PCとWebサーバーが接続されていません');
        }
        
        // IPアドレスのセグメント確認
        if (pcServerConnected) {
          const pcIP = pcDevices[0].config?.ipAddress;
          const serverIP = serverDevices[0].config?.ipAddress;
          
          if (pcIP && serverIP) {
            const pcSegment = pcIP.split('.').slice(0, 3).join('.');
            const serverSegment = serverIP.split('.').slice(0, 3).join('.');
            
            if (pcSegment === serverSegment) {
              score += 25;
              feedback.push(`✅ IPアドレスが同じセグメント内に設定されています（${pcSegment}.x）`);
            } else {
              errors.push(`❌ IPアドレスが異なるセグメントです（PC: ${pcSegment}.x, サーバー: ${serverSegment}.x）`);
            }
          } else {
            errors.push('❌ IPアドレスが正しく設定されていません');
          }
        }
      }

      // TCP詳細の確認
      if (data.tcpDetailsVisible === true) {
        feedback.push('✅ TCP詳細が有効になっています');
      } else {
        errors.push('❌ TCP詳細が有効になっていません');
        score = Math.max(0, score - 10); // TCP詳細が無効な場合は減点
      }

    } catch (error) {
      console.error('Analysis error:', error);
      errors.push('❌ 設定ファイルの解析中にエラーが発生しました');
      score = 0;
    }

    const percentage = Math.round((score / maxScore) * 100);
    
    return {
      score: score,
      maxScore: maxScore,
      percentage: percentage,
      passed: percentage >= 80,
      feedback: feedback,
      errors: errors
    };
  }

  showResult(result) {
    const question = this.questions[this.currentQuestion];
    const app = document.getElementById('network-quiz-app');
    
    app.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <!-- Result Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, ${result.passed ? '#10b981, #059669' : '#ef4444, #dc2626'}); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">
                ${result.passed ? '🎉' : '❌'}
              </div>
              <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                ${result.passed ? '合格です！' : '不合格です'}
              </h2>
              <p style="opacity: 0.9;">
                ${question.title}
              </p>
            </div>
          </div>

          <!-- Content -->
          <div style="padding: 2rem;">
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">判定結果</h3>
              <div style="
                background: ${result.passed ? '#f0fdf4' : '#fef2f2'};
                border: 1px solid ${result.passed ? '#22c55e' : '#ef4444'};
                border-radius: var(--radius-md);
                padding: 1.5rem;
                color: ${result.passed ? '#065f46' : '#991b1b'};
              ">
                <div style="margin-bottom: 1rem;">
                  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                    <span style="font-weight: 500;">スコア</span>
                    <span style="font-weight: 700; font-size: 1.125rem;">${result.score}/${result.maxScore}点 (${result.percentage}%)</span>
                  </div>
                </div>
                
                ${result.feedback.length > 0 ? `
                <div style="margin-bottom: 1rem;">
                  <h4 style="font-weight: 700; margin-bottom: 0.5rem;">✅ 正解ポイント</h4>
                  <ul style="margin: 0; padding-left: 1rem; list-style-type: none;">
                    ${result.feedback.map(f => `<li style="margin: 0.25rem 0;">• ${f}</li>`).join('')}
                  </ul>
                </div>
                ` : ''}
                
                ${result.errors.length > 0 ? `
                <div>
                  <h4 style="font-weight: 700; margin-bottom: 0.5rem;">❌ 改善点</h4>
                  <ul style="margin: 0; padding-left: 1rem; list-style-type: none;">
                    ${result.errors.map(e => `<li style="margin: 0.25rem 0;">• ${e}</li>`).join('')}
                  </ul>
                </div>
                ` : ''}
              </div>
            </div>

            <!-- Explanation -->
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">解説</h3>
              <div style="
                background: var(--surface);
                border-radius: var(--radius-md);
                padding: 1.5rem;
                border-left: 4px solid var(--primary-color);
              ">
                <div style="color: var(--text-secondary); line-height: 1.6;">
                  ${this.formatDescription(question.explanation)}
                </div>
              </div>
            </div>

            <!-- Navigation -->
            <div style="display: flex; justify-content: center; gap: 1rem;">
              ${result.passed ? `
              <button
                onclick="app.showCertificate()"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem; background: var(--secondary-color);"
              >
                🏆 修了証をダウンロード
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
              ` : `
              <button
                onclick="app.retryQuestion()"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem;"
              >
                もう一度挑戦
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </button>
              `}
              
              <a
                href="/quiz"
                class="btn btn-secondary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem; text-decoration: none;"
              >
                問題一覧に戻る
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  retryQuestion() {
    this.answers = [];
    this.questionStartTime = Date.now();
    this.showQuestion();
  }

  showCertificate() {
    const app = document.getElementById('network-quiz-app');
    app.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; text-align: center;">
        <!-- Header -->
        <div style="margin-bottom: 2rem;">
          <div style="font-size: 3rem; margin-bottom: 1rem;">🎉</div>
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">
            おめでとうございます！
          </h2>
          <p style="color: var(--text-secondary); font-size: 1.125rem;">
            全問正解で修了証が発行されました
          </p>
        </div>
        
        <!-- Certificate Preview -->
        <div class="card" style="margin-bottom: 2rem; padding: 0; overflow: hidden; background: #f8fafb;">
          <div style="padding: 1rem; background: var(--surface); border-bottom: 1px solid var(--border);">
            <h3 style="margin: 0; color: var(--text-primary); font-weight: 600;">修了証プレビュー</h3>
          </div>
          <div style="padding: 2rem; background: white;">
            <canvas
              id="certificate-canvas"
              width="800"
              height="600"
              style="max-width: 100%; height: auto; border: 1px solid #e5e7eb;"
            ></canvas>
          </div>
        </div>
        
        <!-- Download Button -->
        <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
          <button
            id="download-certificate-button"
            class="btn btn-primary"
            style="padding: 0.75rem 2rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem;"
          >
            <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            修了証をダウンロード
          </button>

          <div style="display: flex; gap: 1rem;">
            <button
              onclick="app.retryQuestion()"
              class="btn btn-secondary"
            >
              もう一度挑戦
            </button>
            <button
              onclick="window.location.href='/quiz'"
              class="btn btn-secondary"
            >
              メニューに戻る
            </button>
          </div>
        </div>
      </div>
    `;
    
    // Generate certificate after DOM is ready
    setTimeout(() => {
      this.generateCertificate();

      const downloadButton = document.getElementById('download-certificate-button');
      if (downloadButton) {
        downloadButton.addEventListener('click', () => this.downloadCertificate());
      }
    }, 0);
  }

  generateCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f8fafc');
    gradient.addColorStop(1, '#e2e8f0');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    
    // Border
    ctx.strokeStyle = '#059669';
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, width - 40, height - 40);
    
    // Inner border
    ctx.strokeStyle = '#047857';
    ctx.lineWidth = 2;
    ctx.strokeRect(40, 40, width - 80, height - 80);
    
    // Title
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 48px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('修了証', width / 2, 120);
    
    // Subtitle
    ctx.font = '24px sans-serif';
    ctx.fillStyle = '#475569';
    ctx.fillText('Certificate of Completion', width / 2, 160);
    
    // User name
    ctx.font = 'bold 36px sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(this.userName, width / 2, 240);
    
    // Course info
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#374151';
    ctx.fillText('上記の方は、以下の課題を', width / 2, 290);
    ctx.fillText('100%の正答率で修了されました', width / 2, 320);
    
    // Course title
    ctx.font = 'bold 28px sans-serif';
    ctx.fillStyle = '#047857';
    ctx.fillText('「ネットワーク構築課題⑥」', width / 2, 370);
    
    // Date
    const now = new Date();
    const dateStr = now.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    ctx.font = '18px sans-serif';
    ctx.fillStyle = '#6b7280';
    ctx.fillText(`発行日: ${dateStr}`, width / 2, 450);
    
    // Site name
    ctx.font = 'bold 20px sans-serif';
    ctx.fillStyle = '#059669';
    ctx.fillText('じょうほうらいふ', width / 2, 520);
    
    // --- なりすまし防止情報 ---
    // 追跡情報を収集
    const trackingInfo = this.generateTrackingInfo();
    
    // 下端に追跡情報を小さく表示（黄色で見やすく）
    ctx.font = '10px monospace';
    ctx.fillStyle = '#f59e0b';
    ctx.textAlign = 'left';
    const bottomY = height - 40;
    ctx.fillText(`発行時刻: ${trackingInfo.timestamp}`, 43, bottomY - 20);
    ctx.fillText(`アクセス元: ${trackingInfo.ipAddress}`, 43, bottomY - 5);
    ctx.textAlign = 'right';
    ctx.fillText(`端末: ${trackingInfo.userAgent}`, width - 43, bottomY - 20);
    ctx.fillText(`画面: ${trackingInfo.screenInfo}`, width - 43, bottomY - 5);
    
    // 中央下部に端末識別コードを配置
    ctx.textAlign = 'center';
    ctx.fillText(`端末識別: ${trackingInfo.deviceUserHash}`, width / 2, bottomY + 12);
    
    // Decorative elements
    ctx.fillStyle = '#10b981';
    ctx.beginPath();
    ctx.arc(150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#059669';
    ctx.beginPath();
    ctx.arc(width - 150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#047857';
    ctx.beginPath();
    ctx.arc(150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#065f46';
    ctx.beginPath();
    ctx.arc(width - 150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
  }

  generateTrackingInfo() {
    const now = new Date();
    // IPアドレス取得（非同期だが、できる限り試行）
    let ipAddress = this.cachedIpAddress || 'N/A';
    if (!this.cachedIpAddress) {
      this.tryGetIPAddress();
    }
    // User-Agent情報の簡略化
    const userAgent = navigator.userAgent;
    const browserInfo = userAgent.includes('Chrome') ? 'Chrome' :
                       userAgent.includes('Firefox') ? 'Firefox' :
                       userAgent.includes('Safari') ? 'Safari' : 'Other';
    const osInfo = userAgent.includes('Windows') ? 'Win' :
                   userAgent.includes('Mac') ? 'Mac' :
                   userAgent.includes('Linux') ? 'Linux' : 'Other';
    // セッションID（ページ読み込み時に生成）
    if (!this.sessionId) {
      this.sessionId = this.generateSessionId();
    }
    // 端末識別コード（ブラウザフィンガープリントのみ）
    const deviceUserHash = this.generateDeviceUserHash(this.userName);
    return {
      timestamp: now.toLocaleString('ja-JP', {
        year: '2-digit',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      ipAddress: ipAddress,
      userAgent: `${browserInfo}/${osInfo}`,
      screenInfo: `${screen.width}x${screen.height}`,
      sessionId: this.sessionId,
      deviceUserHash: deviceUserHash
    };
  }

  generateSessionId() {
    // 8桁のランダムなセッションID
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  }

  generateDeviceUserHash(userName) {
    // 永続化された端末IDを使用
    return this.getOrCreateDeviceId();
  }

  getOrCreateDeviceId() {
    // ローカルストレージから端末IDを取得、なければ新規作成
    let deviceId = localStorage.getItem('device_id');
    if (!deviceId) {
      deviceId = this.generateDeviceId();
      localStorage.setItem('device_id', deviceId);
    }
    return deviceId;
  }

  generateDeviceId() {
    // デバイス固有の情報を組み合わせて8桁のIDを生成
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    ctx.textBaseline = 'top';
    ctx.font = '14px Arial';
    ctx.fillText('Device fingerprint', 2, 2);
    const canvasData = canvas.toDataURL();
    
    const fingerprint = [
      navigator.userAgent,
      navigator.language,
      screen.width + 'x' + screen.height,
      new Date().getTimezoneOffset(),
      canvasData
    ].join('|');
    
    // 簡単なハッシュ関数で8桁のIDに変換
    let hash = 0;
    for (let i = 0; i < fingerprint.length; i++) {
      const char = fingerprint.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32bit整数に変換
    }
    return Math.abs(hash).toString(36).substr(0, 8).toUpperCase();
  }

  async tryGetIPAddress() {
    try {
      const response = await fetch('https://httpbin.org/ip');
      const data = await response.json();
      this.cachedIpAddress = data.origin || 'Unknown';
    } catch (error) {
      this.cachedIpAddress = 'Unknown';
    }
  }

  downloadCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    
    // Create download link
    const link = document.createElement('a');
    link.download = `修了証_ネットワーク構築課題⑥_${this.userName}_${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL('image/png');
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

// アプリケーション初期化
let app;
document.addEventListener('DOMContentLoaded', () => {
  app = new NetworkQuizApp();
  window.app = app; // グローバルアクセス用
});
</script>

<style>
#file-drop-zone:hover {
  border-color: var(--primary-color) !important;
  background: var(--primary-bg-light) !important;
}

.btn {
  display: inline-flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.btn-secondary {
  background: var(--surface);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.btn-secondary:hover {
  background: var(--border);
}

.card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

:root {
  --primary-color: #3b82f6;
  --secondary-color: #10b981;
  --accent-color: #f59e0b;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-muted: #9ca3af;
  --surface: #f9fafb;
  --border: #e5e7eb;
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --primary-bg-light: rgba(59, 130, 246, 0.1);
}

.prose h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 1.5rem 0 0.75rem 0;
  color: #1f2937;
}

.prose p {
  margin: 0.75rem 0;
  line-height: 1.6;
}

.prose ul, .prose ol {
  margin: 0.75rem 0;
  padding-left: 1.5rem;
}

.prose li {
  margin: 0.25rem 0;
}

.prose strong {
  font-weight: 600;
  color: #1f2937;
}

.prose code {
  background-color: #f3f4f6;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-size: 0.875rem;
}

@media print {
  body * {
    visibility: hidden;
  }
  
  #certificate, #certificate * {
    visibility: visible;
  }
  
  #certificate {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    page-break-inside: avoid;
  }
}
</style>