---
import Layout from '../../layouts/Layout.astro';
import * as yaml from 'yaml';
import fs from 'fs';
import path from 'path';

export async function getStaticPaths() {
  try {
    const indexPath = path.join(process.cwd(), 'public/questions/index.yaml');
    const indexContent = fs.readFileSync(indexPath, 'utf-8');
    const indexData = yaml.parse(indexContent);
    
    return indexData.questionSets.map((unit: string) => ({
      params: { unit }
    }));
  } catch (error) {
    console.error('Error loading question sets:', error);
    // フォールバック用のハードコードされたリスト
    return [
      { params: { unit: 'binary_conversion' } },
      { params: { unit: 'algorithms' } },
      { params: { unit: 'copyright' } }
    ];
  }
}

const { unit } = Astro.params;
---

<Layout title={`問題演習 - ${unit} - じょうほうらいふ`}>
  <div class="container mx-auto px-4 py-8">
    <div id="quiz-app" class="max-w-4xl mx-auto">
      <div class="flex items-center justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span class="text-gray-600">問題を読み込み中...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ unit }}>
async function loadQuestionSet(setId) {
  try {
    const response = await fetch(`/questions/${setId}/questions.yaml`);
    if (!response.ok) {
      throw new Error(`Failed to load question set: ${response.status}`);
    }
    
    const yamlContent = await response.text();
    console.log('Loaded YAML for', setId, ':', yamlContent.substring(0, 200));
    
    // YAML parsing with proper indentation handling
    const lines = yamlContent.split('\n');
    const questionSet = {
      id: setId,
      title: '',
      description: '',
      icon: '📝',
      difficulty: 'medium',
      estimatedTime: 10,
      questions: [],
      tags: [],
      category: 'general'
    };
    
    let currentQuestion = null;
    let currentOption = null;
    let inQuestions = false;
    let inTags = false;
    let inOptions = false;
    let inQuestionTags = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const trimmed = line.trim();
      const indent = line.length - line.trimStart().length;
      
      if (!trimmed || trimmed.startsWith('#')) continue;
      
      // Root level properties
      if (indent === 0 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'title') {
          questionSet.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          questionSet.description = value.replace(/['"]/g, '');
        } else if (key === 'icon') {
          questionSet.icon = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          questionSet.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'estimatedTime') {
          questionSet.estimatedTime = parseInt(value) || 10;
        } else if (key === 'category') {
          questionSet.category = value.replace(/['"]/g, '');
        } else if (key === 'questions') {
          inQuestions = true;
          inTags = false;
        } else if (key === 'tags') {
          inTags = true;
          inQuestions = false;
        }
      }
      // Tags section
      else if (inTags && indent === 2 && trimmed.startsWith('- ')) {
        questionSet.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Questions section
      else if (inQuestions && indent === 2 && trimmed.startsWith('- id:')) {
        currentQuestion = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          type: 'single-choice',
          title: '',
          description: '',
          options: [],
          explanation: '',
          difficulty: 'medium',
          tags: [],
          points: 1
        };
        questionSet.questions.push(currentQuestion);
        inOptions = false;
        inQuestionTags = false;
      }
      // Question properties
      else if (currentQuestion && indent === 4 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'type') {
          currentQuestion.type = value.replace(/['"]/g, '');
        } else if (key === 'title') {
          currentQuestion.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          currentQuestion.description = value.replace(/['"]/g, '');
        } else if (key === 'explanation') {
          currentQuestion.explanation = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          currentQuestion.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'points') {
          currentQuestion.points = parseInt(value) || 1;
        } else if (key === 'hint') {
          currentQuestion.hint = value.replace(/['"]/g, '');
        } else if (key === 'options') {
          inOptions = true;
          inQuestionTags = false;
        } else if (key === 'tags') {
          inQuestionTags = true;
          inOptions = false;
        }
      }
      // Question tags
      else if (inQuestionTags && indent === 6 && trimmed.startsWith('- ')) {
        currentQuestion.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Options
      else if (inOptions && indent === 6 && trimmed.startsWith('- id:')) {
        currentOption = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          text: '',
          isCorrect: false,
          explanation: ''
        };
        currentQuestion.options.push(currentOption);
      }
      // Option properties
      else if (currentOption && indent === 8 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'text') {
          currentOption.text = value.replace(/['"]/g, '');
        } else if (key === 'isCorrect') {
          currentOption.isCorrect = value.replace(/['"]/g, '') === 'true';
        } else if (key === 'explanation') {
          currentOption.explanation = value.replace(/['"]/g, '');
        }
      }
    }
    
    console.log('Parsed question set:', questionSet);
    return questionSet;
  } catch (error) {
    console.error(`Error loading question set ${setId}:`, error);
    return null;
  }
}

function shuffleArray(array) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

function parseMarkdown(text) {
  if (!text) return '';
  
  return text
    // 太字: **text** -> <strong>text</strong>
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // 斜体: *text* -> <em>text</em>
    .replace(/(?<!\*)\*(?!\*)([^*]+)\*(?!\*)/g, '<em>$1</em>')
    // コード: `code` -> <code>code</code>
    .replace(/`([^`]+)`/g, '<code style="background: #f3f4f6; padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-family: monospace;">$1</code>')
    // 改行: <br> -> <br>
    .replace(/<br>/g, '<br>')
    // 改行: \n -> <br> (必要に応じて)
    .replace(/\n/g, '<br>')
    // リンク: [text](url) -> <a href="url">text</a>
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: var(--primary-color); text-decoration: underline;">$1</a>');
}

class QuizSession {
  constructor(unit) {
    this.unit = unit;
    this.questionSet = null;
    this.questions = [];
    this.currentQuestionIndex = 0;
    this.answers = {};
    this.firstAnswers = {}; // 最初の解答のみを記録
    this.score = 0;
    this.startTime = new Date();
    this.isCompleted = false;
    this.showingExplanation = false;
    this.userName = '';
    this.showingNameInput = true;
    this.showingCertificate = false;
    this.init();
  }

  async init() {
    try {
      this.questionSet = await loadQuestionSet(this.unit);
      if (!this.questionSet) {
        throw new Error('Question set not found');
      }
      
      this.questions = shuffleArray(this.questionSet.questions);
      this.render();
    } catch (error) {
      console.error('Error loading question set:', error);
      this.renderError();
    }
  }

  render() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    if (this.showingNameInput) {
      this.renderNameInput();
      return;
    }

    if (this.showingCertificate) {
      this.renderCertificate();
      return;
    }

    if (this.isCompleted) {
      this.renderResult();
      return;
    }

    if (this.showingExplanation) {
      this.renderExplanation();
      return;
    }

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const correctAnswers = Object.keys(this.firstAnswers).filter(questionId => {
      const question = this.questions.find(q => q.id === questionId);
      return this.isAnswerCorrect(question, this.firstAnswers[questionId]);
    }).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">進捗</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div 
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>
          
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${this.currentQuestionIndex + 1}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">解答済み</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">正解</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${this.currentQuestionIndex > 0 ? Math.round((correctAnswers / this.currentQuestionIndex) * 100) : 0}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">正解率</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">経過時間</div>
            </div>
          </div>
        </div>

        <!-- Question Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <div style="display: flex; align-items: center; gap: 0.75rem;">
                <span style="font-size: 1.5rem; font-weight: 700;">問題 ${this.currentQuestionIndex + 1}</span>
                <span style="opacity: 0.8;">/ ${this.questions.length}</span>
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${this.getDifficultyText(currentQuestion.difficulty)}
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${currentQuestion.points}点
                </span>
              </div>
            </div>
          </div>

          <!-- Question Content -->
          <div style="padding: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              ${parseMarkdown(currentQuestion.title)}
            </h3>
            
            <div style="color: var(--text-secondary); margin-bottom: 2rem; line-height: 1.6;">
              ${parseMarkdown(currentQuestion.description)}
            </div>

            <!-- Options -->
            <div style="margin-bottom: 2rem;">
              ${currentQuestion.options.map((option, index) => `
                <button
                  class="option-button"
                  data-question-id="${currentQuestion.id}"
                  data-option-id="${option.id}"
                  style="
                    width: 100%; 
                    padding: 1rem; 
                    margin-bottom: 0.75rem;
                    border-radius: var(--radius-md); 
                    border: 2px solid ${this.isOptionSelected(currentQuestion.id, option.id) ? 'var(--primary-color)' : 'var(--border)'}; 
                    text-align: left; 
                    transition: all 0.2s ease;
                    background: ${this.isOptionSelected(currentQuestion.id, option.id) ? 'var(--surface)' : 'white'};
                    color: ${this.isOptionSelected(currentQuestion.id, option.id) ? 'var(--primary-color)' : 'var(--text-primary)'};
                    cursor: pointer;
                  "
                >
                  <div style="display: flex; align-items: center;">
                    <div style="margin-right: 0.75rem;">
                      <div style="
                        width: 20px; 
                        height: 20px; 
                        border-radius: ${currentQuestion.type === 'multiple-choice' ? 'var(--radius-sm)' : '50%'}; 
                        border: 2px solid ${this.isOptionSelected(currentQuestion.id, option.id) ? 'var(--primary-color)' : 'var(--border)'};
                        background: ${this.isOptionSelected(currentQuestion.id, option.id) ? 'var(--primary-color)' : 'white'};
                        display: flex;
                        align-items: center;
                        justify-content: center;
                      ">
                        ${this.isOptionSelected(currentQuestion.id, option.id) ? (
                          currentQuestion.type === 'multiple-choice' 
                            ? '<span style="color: white; font-size: 12px;">✓</span>'
                            : '<div style="width: 8px; height: 8px; background: white; border-radius: 50%;"></div>'
                        ) : ''}
                      </div>
                    </div>
                    <span style="flex: 1;">${parseMarkdown(option.text)}</span>
                  </div>
                </button>
              `).join('')}
            </div>

            <!-- Hint -->
            ${currentQuestion.hint ? `
              <div style="margin-bottom: 2rem;">
                <button
                  id="hint-button"
                  style="
                    display: flex; 
                    align-items: center; 
                    color: var(--accent-color); 
                    background: none; 
                    border: none; 
                    cursor: pointer; 
                    transition: all 0.3s ease;
                    font-size: 0.875rem;
                    font-weight: 500;
                  "
                >
                  <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                  ヒント
                </button>
                <div 
                  id="hint-content"
                  style="
                    margin-top: 0.5rem; 
                    background: #fef3c7; 
                    border: 1px solid #f59e0b; 
                    border-radius: var(--radius-md); 
                    padding: 0.75rem;
                    display: none;
                  "
                >
                  <p style="color: #92400e; font-size: 0.875rem; margin: 0;">${parseMarkdown(currentQuestion.hint)}</p>
                </div>
              </div>
            ` : ''}

            <!-- Navigation -->
            <div style="display: flex; justify-content: space-between; align-items: center;">
              ${currentQuestion.type === 'multiple-choice' ? `
                <div style="font-size: 0.875rem; color: var(--text-muted);">複数選択可能</div>
              ` : '<div></div>'}

              <button
                id="next-button"
                ${!this.isQuestionAnswered(currentQuestion.id) ? 'disabled' : ''}
                class="btn ${this.isQuestionAnswered(currentQuestion.id) ? 'btn-primary' : 'btn-secondary'}"
                style="display: flex; align-items: center; ${!this.isQuestionAnswered(currentQuestion.id) ? 'opacity: 0.5; cursor: not-allowed;' : ''}"
              >
                ${this.currentQuestionIndex === this.questions.length - 1 ? '結果を見る' : '次の問題'}
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add event listeners after DOM is updated
    setTimeout(() => {
      // Option buttons
      const optionButtons = document.querySelectorAll('.option-button');
      optionButtons.forEach(button => {
        button.addEventListener('click', () => {
          const questionId = button.getAttribute('data-question-id');
          const optionId = button.getAttribute('data-option-id');
          this.selectOption(questionId, optionId);
        });
      });
      
      // Hint button
      const hintButton = document.getElementById('hint-button');
      const hintContent = document.getElementById('hint-content');
      
      if (hintButton && hintContent) {
        hintButton.addEventListener('click', () => {
          if (hintContent.style.display === 'none') {
            hintContent.style.display = 'block';
          } else {
            hintContent.style.display = 'none';
          }
        });
        
        // Add hover effects
        hintButton.addEventListener('mouseenter', () => {
          hintButton.style.opacity = '0.8';
        });
        
        hintButton.addEventListener('mouseleave', () => {
          hintButton.style.opacity = '1';
        });
      }
      
      // Navigation button
      const nextButton = document.getElementById('next-button');
      
      if (nextButton && !nextButton.disabled) {
        nextButton.addEventListener('click', () => this.nextQuestion());
      }
    }, 0);
  }

  renderNameInput() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div style="max-width: 600px; margin: 0 auto; text-align: center;">
        <div class="card" style="padding: 3rem;">
          <div style="margin-bottom: 2rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">
              ${this.questionSet?.icon || '📝'}
            </div>
            <h2 style="font-size: 1.75rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.2; hyphens: auto; word-break: break-word;">
              <span style="display: inline-block; max-width: 100%; font-size: clamp(1.25rem, 4vw, 1.75rem);">
                ${this.questionSet?.title || this.unit} 問題演習
              </span>
            </h2>
            <p style="color: var(--text-secondary); margin-bottom: 2rem;">
              ${this.questionSet?.description || ''}
            </p>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-bottom: 2rem; font-size: 0.875rem; color: var(--text-muted);">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                約${this.questionSet?.estimatedTime || 0}分
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                全${this.questions?.length || 0}問
              </div>
            </div>
          </div>

          <div style="border-top: 1px solid var(--border); padding-top: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              お名前を入力してください
            </h3>
            <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 0.875rem;">
              100%の正答率で全問正解すると、修了証が発行されます<br>
              ※入力された氏名は、修了証発行にのみ使用されます。
            </p>
            
            <div style="margin-bottom: 2rem;">
              <input 
                type="text" 
                id="user-name-input"
                placeholder="山田太郎"
                style="
                  width: 100%; 
                  max-width: 300px;
                  padding: 0.75rem 1rem; 
                  border: 2px solid var(--border); 
                  border-radius: var(--radius-md); 
                  font-size: 1rem;
                  text-align: center;
                  transition: border-color 0.2s ease;
                "
                maxlength="20"
              />
            </div>

            <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
              <button
                id="start-quiz-button"
                class="btn btn-primary"
                style="padding: 0.75rem 2rem; font-size: 1rem;"
                disabled
              >
                問題演習を開始
              </button>
              
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="font-size: 0.875rem;"
              >
                メニューに戻る
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listeners
    setTimeout(() => {
      const nameInput = document.getElementById('user-name-input');
      const startButton = document.getElementById('start-quiz-button');
      
      if (nameInput && startButton) {
        const validateInput = () => {
          const name = nameInput.value.trim();
          startButton.disabled = name.length === 0;
          startButton.style.opacity = name.length === 0 ? '0.5' : '1';
        };
        
        nameInput.addEventListener('input', validateInput);
        nameInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && nameInput.value.trim()) {
            this.startQuiz();
          }
        });
        
        startButton.addEventListener('click', () => this.startQuiz());
        nameInput.focus();
      }
    }, 0);
  }

  renderExplanation() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const userAnswer = this.answers[currentQuestion.id];
    const isCorrect = this.isAnswerCorrect(currentQuestion, userAnswer);
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const correctAnswers = Object.keys(this.firstAnswers).filter(questionId => {
      const question = this.questions.find(q => q.id === questionId);
      return this.isAnswerCorrect(question, this.firstAnswers[questionId]);
    }).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">進捗</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div 
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>
          
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${this.currentQuestionIndex + 1}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">解答済み</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">正解</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${Math.round((correctAnswers / (this.currentQuestionIndex + 1)) * 100)}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">正解率</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">経過時間</div>
            </div>
          </div>
        </div>

        <!-- Result Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, ${isCorrect ? '#10b981, #059669' : '#ef4444, #dc2626'}); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">
                ${isCorrect ? '🎉' : '📚'}
              </div>
              <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                ${isCorrect ? '正解です！' : '不正解です'}
              </h2>
              <p style="opacity: 0.9;">
                問題 ${this.currentQuestionIndex + 1}: ${parseMarkdown(currentQuestion.title)}
              </p>
            </div>
          </div>

          <!-- Content -->
          <div style="padding: 2rem;">
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">問題文</h3>
              <div style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1.5rem;">
                ${parseMarkdown(currentQuestion.description)}
              </div>
            </div>

            <!-- Answer Options -->
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">選択肢と解説</h3>
              <div style="space-y: 0.75rem;">
                ${currentQuestion.options.map((option, index) => {
                  const isUserSelected = this.isOptionSelected(currentQuestion.id, option.id);
                  const isCorrectOption = option.isCorrect;
                  
                  let borderColor = 'var(--border)';
                  let backgroundColor = 'white';
                  let textColor = 'var(--text-primary)';
                  let iconColor = 'var(--border)';
                  let icon = '';
                  
                  if (isCorrectOption) {
                    borderColor = '#10b981';
                    backgroundColor = '#f0fdf4';
                    textColor = '#065f46';
                    iconColor = '#10b981';
                    icon = '✓';
                  } else if (isUserSelected) {
                    borderColor = '#ef4444';
                    backgroundColor = '#fef2f2';
                    textColor = '#991b1b';
                    iconColor = '#ef4444';
                    icon = '✗';
                  }
                  
                  return `
                    <div style="
                      border: 2px solid ${borderColor}; 
                      border-radius: var(--radius-md); 
                      padding: 1rem; 
                      margin-bottom: 0.75rem;
                      background: ${backgroundColor};
                      color: ${textColor};
                    ">
                      <div style="display: flex; align-items: flex-start; margin-bottom: 0.5rem;">
                        <div style="margin-right: 0.75rem; margin-top: 0.125rem;">
                          <div style="
                            width: 24px; 
                            height: 24px; 
                            border-radius: 50%; 
                            border: 2px solid ${iconColor};
                            background: ${icon ? iconColor : 'white'};
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            font-weight: bold;
                            color: ${icon ? 'white' : iconColor};
                          ">
                            ${icon || option.id.toUpperCase()}
                          </div>
                        </div>
                        <div style="flex: 1;">
                          <div style="font-weight: 500; margin-bottom: 0.5rem;">
                            ${parseMarkdown(option.text)}
                          </div>
                          ${option.explanation ? `
                            <div style="font-size: 0.875rem; opacity: 0.8; line-height: 1.5;">
                              ${parseMarkdown(option.explanation)}
                            </div>
                          ` : ''}
                        </div>
                      </div>
                    </div>
                  `;
                }).join('')}
              </div>
            </div>

            <!-- Overall Explanation -->
            ${currentQuestion.explanation ? `
              <div style="margin-bottom: 2rem;">
                <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">詳しい解説</h3>
                <div style="
                  background: var(--surface); 
                  border-radius: var(--radius-md); 
                  padding: 1.5rem;
                  border-left: 4px solid var(--primary-color);
                ">
                  <div style="color: var(--text-secondary); line-height: 1.6;">
                    ${parseMarkdown(currentQuestion.explanation)}
                  </div>
                </div>
              </div>
            ` : ''}

            <!-- Navigation -->
            <div style="display: flex; justify-content: center; gap: 1rem;">
              <button
                id="continue-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem;"
              >
                ${this.currentQuestionIndex === this.questions.length - 1 ? '結果を見る' : '次の問題へ'}
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listener
    setTimeout(() => {
      const continueButton = document.getElementById('continue-button');
      if (continueButton) {
        continueButton.addEventListener('click', () => this.continueAfterExplanation());
      }
    }, 0);
  }

  startQuiz() {
    const nameInput = document.getElementById('user-name-input');
    if (nameInput) {
      this.userName = nameInput.value.trim();
      if (this.userName) {
        this.showingNameInput = false;
        this.startTime = new Date(); // Reset start time
        this.render();
      }
    }
  }

  renderResult() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const correctAnswers = Object.keys(this.firstAnswers).filter(questionId => {
      const question = this.questions.find(q => q.id === questionId);
      return this.isAnswerCorrect(question, this.firstAnswers[questionId]);
    }).length;
    const percentage = Math.round((correctAnswers / this.questions.length) * 100);

    // 100%達成時は修了証画面に遷移
    if (percentage === 100) {
      this.showingCertificate = true;
      this.render();
      return;
    }

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="text-align: center; margin-bottom: 2rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">問題演習完了！</h2>
          <p style="color: var(--text-secondary);">お疲れ様でした。結果を確認してください。</p>
        </div>

        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="
                font-size: 3rem; 
                font-weight: 700; 
                margin-bottom: 0.5rem; 
                background: rgba(255,255,255,0.2); 
                border-radius: 50%; 
                width: 96px; 
                height: 96px; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                margin: 0 auto 1rem auto;
              ">
                <span style="color: white;">${this.getScoreGrade(percentage)}</span>
              </div>
              <div style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;">${percentage}%</div>
              <div style="opacity: 0.9;">${correctAnswers} / ${this.questions.length} 問正解</div>
            </div>
          </div>
          
          <div style="padding: 2rem;">
            <div style="text-align: center; margin-bottom: 2rem;">
              <p style="font-size: 1.125rem; color: var(--text-primary);">${this.getScoreMessage(percentage)}</p>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-bottom: 2rem; text-align: center;">
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${this.questions.length}</div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">総問題数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--secondary-color); font-weight: 500;">正解数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">${this.questions.length - correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--accent-color); font-weight: 500;">不正解数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                  ${Math.floor(timeSpent / 60)}:${(timeSpent % 60).toString().padStart(2, '0')}
                </div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">所要時間</div>
              </div>
            </div>

            <div style="display: flex; flex-direction: column; gap: 0.75rem; align-items: center;">
              <button
                onclick="window.location.reload()"
                class="btn btn-primary"
                style="display: flex; align-items: center; margin-bottom: 0.5rem;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                もう一度挑戦
              </button>
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="display: flex; align-items: center;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                メニューに戻る
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  renderCertificate() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const formattedDate = endTime.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; text-align: center;">
        <div style="margin-bottom: 2rem;">
          <div style="font-size: 3rem; margin-bottom: 1rem;">🎉</div>
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">
            おめでとうございます！
          </h2>
          <p style="color: var(--text-secondary); font-size: 1.125rem;">
            全問正解で修了証が発行されました
          </p>
        </div>

        <!-- Certificate Preview -->
        <div class="card" style="margin-bottom: 2rem; padding: 0; overflow: hidden; background: #f8fafb;">
          <div style="padding: 1rem; background: var(--surface); border-bottom: 1px solid var(--border);">
            <h3 style="margin: 0; color: var(--text-primary); font-weight: 600;">修了証プレビュー</h3>
          </div>
          <div style="padding: 2rem; background: white;">
            <canvas 
              id="certificate-canvas" 
              width="800" 
              height="600" 
              style="max-width: 100%; height: auto; border: 1px solid #e5e7eb;"
            ></canvas>
          </div>
        </div>

        <!-- Download Button -->
        <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
          <button
            id="download-certificate-button"
            class="btn btn-primary"
            style="padding: 0.75rem 2rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem;"
          >
            <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            修了証をダウンロード
          </button>
          
          <div style="display: flex; gap: 1rem;">
            <button
              onclick="window.location.reload()"
              class="btn btn-secondary"
            >
              もう一度挑戦
            </button>
            <button
              onclick="window.location.href='/quiz'"
              class="btn btn-secondary"
            >
              メニューに戻る
            </button>
          </div>
        </div>
      </div>
    `;

    // Generate certificate after DOM is ready
    setTimeout(() => {
      this.generateCertificate();
      
      const downloadButton = document.getElementById('download-certificate-button');
      if (downloadButton) {
        downloadButton.addEventListener('click', () => this.downloadCertificate());
      }
    }, 0);
  }

  generateCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f8fafc');
    gradient.addColorStop(1, '#e2e8f0');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Border
    ctx.strokeStyle = '#059669';
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, width - 40, height - 40);

    // Inner border
    ctx.strokeStyle = '#047857';
    ctx.lineWidth = 2;
    ctx.strokeRect(40, 40, width - 80, height - 80);

    // Title
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 48px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('修了証', width / 2, 120);

    // Subtitle
    ctx.font = '24px sans-serif';
    ctx.fillStyle = '#475569';
    ctx.fillText('Certificate of Completion', width / 2, 160);

    // User name
    ctx.font = 'bold 36px sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(this.userName, width / 2, 240);

    // Course info
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#374151';
    ctx.fillText('上記の方は、以下の問題演習を', width / 2, 290);
    ctx.fillText('100%の正答率で修了されました', width / 2, 320);

    // Course title
    ctx.font = 'bold 28px sans-serif';
    ctx.fillStyle = '#047857';
    ctx.fillText(`「${this.questionSet?.title || this.unit}」`, width / 2, 370);

    // Date
    const now = new Date();
    const dateStr = now.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    ctx.font = '18px sans-serif';
    ctx.fillStyle = '#6b7280';
    ctx.fillText(`発行日: ${dateStr}`, width / 2, 450);

    // Site name
    ctx.font = 'bold 20px sans-serif';
    ctx.fillStyle = '#059669';
    ctx.fillText('じょうほうらいふ', width / 2, 520);

    // Decorative elements
    ctx.fillStyle = '#10b981';
    ctx.beginPath();
    ctx.arc(150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#059669';
    ctx.beginPath();
    ctx.arc(width - 150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#047857';
    ctx.beginPath();
    ctx.arc(150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#065f46';
    ctx.beginPath();
    ctx.arc(width - 150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
  }

  downloadCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;

    // Create download link
    const link = document.createElement('a');
    link.download = `修了証_${this.questionSet?.title || this.unit}_${this.userName}_${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL('image/png');
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  renderError() {
    const container = document.getElementById('quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">⚠️</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          問題データの読み込みに失敗しました
        </h3>
        <p class="text-gray-500 mb-4">
          指定された問題セットが見つからませんでした。
        </p>
        <button 
          onclick="window.location.href='/quiz'"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          問題一覧に戻る
        </button>
      </div>
    `;
  }

  selectOption(questionId, optionId) {
    const question = this.questions.find(q => q.id === questionId);
    if (!question) return;

    // 現在の解答を更新（表示用）
    if (question.type === 'multiple-choice') {
      const currentAnswers = this.answers[questionId] || [];
      const newAnswers = currentAnswers.includes(optionId)
        ? currentAnswers.filter(id => id !== optionId)
        : [...currentAnswers, optionId];
      this.answers[questionId] = newAnswers;
    } else {
      this.answers[questionId] = optionId;
    }

    // firstAnswersは「次の問題」ボタンをクリックした時点で記録する
    // 選択肢をクリックした時点では記録しない

    this.render();
  }

  isOptionSelected(questionId, optionId) {
    const answer = this.answers[questionId];
    if (Array.isArray(answer)) {
      return answer.includes(optionId);
    }
    return answer === optionId;
  }

  isQuestionAnswered(questionId) {
    const answer = this.answers[questionId];
    if (Array.isArray(answer)) {
      return answer.length > 0;
    }
    return answer !== undefined;
  }

  isAnswerCorrect(question, answer) {
    if (question.type === 'multiple-choice') {
      const correctOptions = question.options.filter(opt => opt.isCorrect).map(opt => opt.id);
      if (!Array.isArray(answer)) return false;
      
      // For multiple choice: must select exactly the correct options, no more, no less
      return correctOptions.length === answer.length && 
             correctOptions.every(id => answer.includes(id)) &&
             answer.every(id => correctOptions.includes(id));
    } else {
      const correctOption = question.options.find(opt => opt.isCorrect);
      return correctOption && correctOption.id === answer;
    }
  }

  nextQuestion() {
    // Check if current question is answered
    const currentQuestion = this.questions[this.currentQuestionIndex];
    if (!this.isQuestionAnswered(currentQuestion.id)) {
      return; // Don't proceed if not answered
    }
    
    // Record first answer when user confirms answer (for all question types)
    if (!this.firstAnswers[currentQuestion.id]) {
      if (currentQuestion.type === 'multiple-choice') {
        this.firstAnswers[currentQuestion.id] = [...this.answers[currentQuestion.id]];
      } else {
        this.firstAnswers[currentQuestion.id] = this.answers[currentQuestion.id];
      }
    }
    
    // Show explanation first
    this.showingExplanation = true;
    this.render();
  }

  continueAfterExplanation() {
    this.showingExplanation = false;
    
    if (this.currentQuestionIndex < this.questions.length - 1) {
      this.currentQuestionIndex++;
      this.render();
    } else {
      this.isCompleted = true;
      this.render();
    }
  }


  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy': return '初級';
      case 'medium': return '中級';
      case 'hard': return '上級';
      default: return '中級';
    }
  }

  getScoreGrade(percentage) {
    if (percentage >= 90) return 'A';
    if (percentage >= 80) return 'B';
    if (percentage >= 70) return 'C';
    if (percentage >= 60) return 'D';
    return 'F';
  }

  getScoreMessage(percentage) {
    if (percentage >= 90) return '素晴らしい！完璧に理解できています。';
    if (percentage >= 70) return 'よくできました！もう少し復習すれば完璧です。';
    if (percentage >= 50) return '合格ライン！間違えた問題を復習しましょう。';
    return '復習が必要です。基礎からもう一度確認しましょう。';
  }
}

// Global reference for button onclick handlers
let quizSession;

// Initialize the quiz session when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  quizSession = new QuizSession(unit);
});
</script>

<style>
.option-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.option-button:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}
</style>