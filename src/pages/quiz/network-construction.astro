---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å - „Åò„Çá„ÅÜ„Åª„ÅÜ„Çâ„ÅÑ„Åµ">
  <div class="container mx-auto px-4 py-8">
    <div id="network-quiz-app" class="max-w-4xl mx-auto">
      <div class="flex items-center justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span class="text-gray-600">Ë™≤È°å„ÇíË™≠„ÅøËæº„Åø‰∏≠...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
async function loadNetworkQuestions() {
  try {
    const response = await fetch('/questions/network-construction/questions.yaml');
    if (!response.ok) {
      throw new Error(`Failed to load question set: ${response.status}`);
    }
    
    const yamlContent = await response.text();
    console.log('Loaded YAML for network-construction:', yamlContent.substring(0, 200));
    
    // YAML parsing with proper indentation handling
    const lines = yamlContent.split('\n');
    const questionSet = {
      id: 'network-construction',
      title: '',
      description: '',
      icon: 'üåê',
      difficulty: 'medium',
      estimatedTime: 20,
      questions: [],
      tags: [],
      category: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ'
    };
    
    let currentQuestion = null;
    let inQuestions = false;
    let inTags = false;
    let currentValidationFunction = '';
    let parsingValidation = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const trimmed = line.trim();
      const indent = line.length - line.trimStart().length;
      
      if (!trimmed || trimmed.startsWith('#')) continue;
      
      // Root level properties
      if (indent === 0 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'title') {
          questionSet.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          questionSet.description = value.replace(/['"]/g, '');
        } else if (key === 'icon') {
          questionSet.icon = value.replace(/['"]/g, '');
        } else if (key === 'difficulty') {
          questionSet.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'estimatedTime') {
          questionSet.estimatedTime = parseInt(value) || 20;
        } else if (key === 'category') {
          questionSet.category = value.replace(/['"]/g, '');
        } else if (key === 'questions') {
          inQuestions = true;
          inTags = false;
        } else if (key === 'tags') {
          inTags = true;
          inQuestions = false;
        }
      }
      // Tags section
      else if (inTags && indent === 2 && trimmed.startsWith('- ')) {
        questionSet.tags.push(trimmed.substring(2).trim().replace(/['"]/g, ''));
      }
      // Questions section
      else if (inQuestions && indent === 2 && trimmed.startsWith('- id:')) {
        currentQuestion = {
          id: trimmed.substring(5).trim().replace(/['"]/g, ''),
          type: 'file-upload',
          title: '',
          description: '',
          validation: '',
          explanation: '',
          difficulty: 'medium',
          tags: [],
          points: 10
        };
        questionSet.questions.push(currentQuestion);
        currentValidationFunction = '';
        parsingValidation = false;
      }
      // Question properties
      else if (currentQuestion && indent === 4 && trimmed.includes(':')) {
        const [key, value] = trimmed.split(':').map(s => s.trim());
        if (key === 'type') {
          currentQuestion.type = value.replace(/['"]/g, '');
        } else if (key === 'title') {
          currentQuestion.title = value.replace(/['"]/g, '');
        } else if (key === 'description') {
          // Multi-line description handling
          if (value === '|') {
            let descriptionLines = [];
            for (let j = i + 1; j < lines.length; j++) {
              const descLine = lines[j];
              if (descLine.trim() === '' || (descLine.length - descLine.trimStart().length) >= 6) {
                descriptionLines.push(descLine.substring(6)); // Remove 6 spaces indent
              } else {
                i = j - 1; // Adjust loop counter
                break;
              }
            }
            currentQuestion.description = descriptionLines.join('\n');
          } else {
            currentQuestion.description = value.replace(/['"]/g, '');
          }
        } else if (key === 'validation') {
          // Multi-line validation function handling
          if (value === '|') {
            parsingValidation = true;
            currentValidationFunction = '';
          } else {
            currentQuestion.validation = value.replace(/['"]/g, '');
          }
        } else if (key === 'explanation') {
          // Multi-line explanation handling
          if (value === '|') {
            let explanationLines = [];
            for (let j = i + 1; j < lines.length; j++) {
              const explLine = lines[j];
              if (explLine.trim() === '' || (explLine.length - explLine.trimStart().length) >= 6) {
                explanationLines.push(explLine.substring(6)); // Remove 6 spaces indent
              } else {
                i = j - 1; // Adjust loop counter
                break;
              }
            }
            currentQuestion.explanation = explanationLines.join('\n');
          } else {
            currentQuestion.explanation = value.replace(/['"]/g, '');
          }
        } else if (key === 'difficulty') {
          currentQuestion.difficulty = value.replace(/['"]/g, '');
        } else if (key === 'points') {
          currentQuestion.points = parseInt(value) || 10;
        }
      }
      // Multi-line validation function content
      else if (parsingValidation && indent >= 6) {
        currentValidationFunction += line.substring(6) + '\n';
        // Check if we've reached the end of validation function
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1];
          if (nextLine.trim() !== '' && (nextLine.length - nextLine.trimStart().length) < 6) {
            currentQuestion.validation = currentValidationFunction.trim();
            parsingValidation = false;
            currentValidationFunction = '';
          }
        } else {
          // End of file
          currentQuestion.validation = currentValidationFunction.trim();
        }
      }
    }
    
    console.log('Parsed network question set:', questionSet);
    return questionSet;
  } catch (error) {
    console.error('Error loading network question set:', error);
    return null;
  }
}

function parseMarkdown(text) {
  if (!text) return '';
  
  return text
    // Â§™Â≠ó: **text** -> <strong>text</strong>
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // Êñú‰Ωì: *text* -> <em>text</em>
    .replace(/(?<!\*)\*(?!\*)([^*]+)\*(?!\*)/g, '<em>$1</em>')
    // „Ç≥„Éº„Éâ: `code` -> <code>code</code>
    .replace(/`([^`]+)`/g, '<code style="background: #f3f4f6; padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-family: monospace;">$1</code>')
    // ÊîπË°å: <br> -> <br>
    .replace(/<br>/g, '<br>')
    // ÊîπË°å: \n -> <br> (ÂøÖË¶Å„Å´Âøú„Åò„Å¶)
    .replace(/\n/g, '<br>')
    // „É™„É≥„ÇØ: [text](url) -> <a href="url">text</a>
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: var(--primary-color); text-decoration: underline;">$1</a>');
}

class NetworkQuizSession {
  constructor() {
    this.questionSet = null;
    this.questions = [];
    this.currentQuestionIndex = 0;
    this.results = {};
    this.startTime = new Date();
    this.userName = '';
    this.showingNameInput = true;
    this.showingCertificate = false;
    this.isCompleted = false;
    this.init();
  }

  async init() {
    try {
      this.questionSet = await loadNetworkQuestions();
      if (!this.questionSet) {
        throw new Error('Question set not found');
      }
      
      this.questions = this.questionSet.questions;
      this.render();
    } catch (error) {
      console.error('Error loading question set:', error);
      this.renderError();
    }
  }

  render() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    if (this.showingNameInput) {
      this.renderNameInput();
      return;
    }

    if (this.showingCertificate) {
      this.renderCertificate();
      return;
    }

    if (this.isCompleted) {
      this.renderResult();
      return;
    }

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">ÈÄ≤Êçó</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div 
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>
          
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÊèêÂá∫Ê∏à„Åø</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†º</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${completedQuestions > 0 ? Math.round((correctAnswers / completedQuestions) * 100) : 0}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">ÂêàÊ†ºÁéá</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÁµåÈÅéÊôÇÈñì</div>
            </div>
          </div>
        </div>

        <!-- Question Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <div style="display: flex; align-items: center; gap: 0.75rem;">
                <span style="font-size: 1.5rem; font-weight: 700;">Ë™≤È°å ${this.currentQuestionIndex + 1}</span>
                <span style="opacity: 0.8;">/ ${this.questions.length}</span>
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${this.getDifficultyText(currentQuestion.difficulty)}
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${currentQuestion.points}ÁÇπ
                </span>
              </div>
            </div>
          </div>

          <!-- Question Content -->
          <div style="padding: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              ${parseMarkdown(currentQuestion.title)}
            </h3>
            
            <div style="color: var(--text-secondary); margin-bottom: 2rem; line-height: 1.6;">
              ${parseMarkdown(currentQuestion.description)}
            </div>

            <!-- File Upload Area -->
            <div style="margin-bottom: 2rem;">
              <div 
                id="file-drop-zone"
                style="
                  border: 2px dashed var(--border);
                  border-radius: var(--radius-md);
                  padding: 2rem;
                  text-align: center;
                  background: var(--surface);
                  transition: all 0.3s ease;
                  cursor: pointer;
                "
                ondragover="event.preventDefault(); this.style.borderColor = 'var(--primary-color)'; this.style.background = 'var(--primary-bg-light)';"
                ondragleave="this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)';"
                ondrop="event.preventDefault(); this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)'; handleFileDrop(event);"
              >
                <div style="margin-bottom: 1rem;">
                  <svg style="width: 48px; height: 48px; margin: 0 auto; color: var(--text-muted);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                </div>
                <p style="color: var(--text-primary); font-weight: 500; margin-bottom: 0.5rem;">
                  JSON„Éï„Ç°„Ç§„É´„Çí„Éâ„É©„ÉÉ„Ç∞ÔºÜ„Éâ„É≠„ÉÉ„Éó„Åæ„Åü„ÅØ„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                </p>
                <p style="color: var(--text-muted); font-size: 0.875rem;">
                  „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç∑„Éü„É•„É¨„Éº„Çø„Åã„Çâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„ÅüJSON„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                </p>
                <input 
                  type="file" 
                  id="file-input" 
                  accept=".json"
                  style="display: none;"
                  onchange="handleFileSelect(event)"
                />
              </div>
              
              <!-- File Info Display -->
              <div id="file-info" style="display: none; margin-top: 1rem; padding: 1rem; background: #f0fdf4; border: 1px solid #22c55e; border-radius: var(--radius-md);">
                <div style="display: flex; align-items: center; gap: 0.5rem; color: #065f46;">
                  <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span id="file-name" style="font-weight: 500;"></span>
                </div>
              </div>
            </div>

            <!-- Navigation -->
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div></div>
              <button
                id="submit-button"
                disabled
                class="btn btn-secondary"
                style="display: flex; align-items: center; opacity: 0.5; cursor: not-allowed;"
              >
                Âà§ÂÆö„ÇíÂÆüË°å
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add event listeners after DOM is updated
    setTimeout(() => {
      const dropZone = document.getElementById('file-drop-zone');
      const fileInput = document.getElementById('file-input');
      const submitButton = document.getElementById('submit-button');
      
      if (dropZone) {
        dropZone.addEventListener('click', () => {
          fileInput.click();
        });
      }
      
      if (submitButton && this.currentUploadedFile) {
        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';
        
        submitButton.addEventListener('click', () => this.evaluateNetwork());
      }
    }, 0);
  }

  renderNameInput() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ‰øùÂ≠ò„Åï„Çå„ÅüÂêçÂâç„ÇíÂèñÂæó
    const savedName = localStorage.getItem('quizStudentName');
    
    container.innerHTML = `
      <div style="max-width: 600px; margin: 0 auto; text-align: center;">
        <div class="card" style="padding: 3rem;">
          <div style="margin-bottom: 2rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">
              ${this.questionSet?.icon || 'üåê'}
            </div>
            <h2 style="font-size: 1.75rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.2; hyphens: auto; word-break: break-word;">
              <span style="display: inline-block; max-width: 100%; font-size: clamp(1.25rem, 4vw, 1.75rem);">
                ${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å'}
              </span>
            </h2>
            <p style="color: var(--text-secondary); margin-bottom: 2rem;">
              ${this.questionSet?.description || ''}
            </p>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-bottom: 2rem; font-size: 0.875rem; color: var(--text-muted);">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Á¥Ñ${this.questionSet?.estimatedTime || 0}ÂàÜ
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                ÂÖ®${this.questions?.length || 0}Ë™≤È°å
              </div>
            </div>
          </div>

          <div style="border-top: 1px solid var(--border); padding-top: 2rem;">
            ${savedName && savedName.trim() ? `
              <!-- ÂêçÂâçÁ¢∫Ë™çÁîªÈù¢ -->
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                üéØ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°åÈñãÂßãÔºÅ
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 1rem;">
                ${savedName}„Åï„Çì„ÄÅË™≤È°å„ÇíÈñãÂßã„Åó„Åæ„Åô„ÅãÔºü
              </p>
              
              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                >
                  „ÅØ„ÅÑ„ÄÅÈñãÂßã„Åô„Çã
                </button>
                
                <button
                  id="change-name-button"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  Âà•„ÅÆÂêçÂâç„ÅßÈñãÂßã
                </button>
                
                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  „É°„Éã„É•„Éº„Å´Êàª„Çã
                </button>
              </div>
            ` : `
              <!-- ÂêçÂâçÂÖ•ÂäõÁîªÈù¢ -->
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                „ÅäÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 0.875rem;">
                100%„ÅÆÂêàÊ†ºÁéá„ÅßÂÖ®Ë™≤È°å„Çí„ÇØ„É™„Ç¢„Åô„Çã„Å®„ÄÅ‰øÆ‰∫ÜË®º„ÅåÁô∫Ë°å„Åï„Çå„Åæ„Åô<br>
                ‚ÄªÂÖ•Âäõ„Åï„Çå„ÅüÊ∞èÂêç„ÅØ„ÄÅ‰øÆ‰∫ÜË®ºÁô∫Ë°å„Å´„ÅÆ„Åø‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ
              </p>
              
              <div style="margin-bottom: 2rem;">
                <input 
                  type="text" 
                  id="user-name-input"
                  placeholder="Â±±Áî∞Â§™ÈÉé"
                  style="
                    width: 100%; 
                    max-width: 300px;
                    padding: 0.75rem 1rem; 
                    border: 2px solid var(--border); 
                    border-radius: var(--radius-md); 
                    font-size: 1rem;
                    text-align: center;
                    transition: border-color 0.2s ease;
                  "
                  maxlength="20"
                />
              </div>

              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                  disabled
                >
                  Ë™≤È°å„ÇíÈñãÂßã
                </button>
                
                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  „É°„Éã„É•„Éº„Å´Êàª„Çã
                </button>
              </div>
            `}
          </div>
        </div>
      </div>
    `;

    // Add event listeners
    setTimeout(() => {
      const nameInput = document.getElementById('user-name-input');
      const startButton = document.getElementById('start-quiz-button');
      const changeNameButton = document.getElementById('change-name-button');
      
      // ‰øùÂ≠ò„Åï„Çå„ÅüÂêçÂâç„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÂá¶ÁêÜ
      const savedName = localStorage.getItem('quizStudentName');
      if (savedName && savedName.trim()) {
        // ÂêçÂâç„Åå‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁõ¥Êé•ÈñãÂßãÂèØËÉΩ
        if (startButton) {
          startButton.addEventListener('click', () => {
            this.userName = savedName;
            this.startQuiz();
          });
        }
        
        // ÂêçÂâçÂ§âÊõ¥„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ
        if (changeNameButton) {
          changeNameButton.addEventListener('click', () => {
            localStorage.removeItem('quizStudentName');
            this.renderNameInput(); // ÁîªÈù¢„ÇíÂÜçÊèèÁîª
          });
        }
      } else {
        // ÂêçÂâçÂÖ•Âäõ„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅÆÂá¶ÁêÜ
        if (nameInput && startButton) {
          const validateInput = () => {
            const name = nameInput.value.trim();
            startButton.disabled = name.length === 0;
            startButton.style.opacity = name.length === 0 ? '0.5' : '1';
          };
          
          nameInput.addEventListener('input', validateInput);
          nameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && nameInput.value.trim()) {
              this.startQuiz();
            }
          });
          
          startButton.addEventListener('click', () => this.startQuiz());
          nameInput.focus();
        }
      }
    }, 0);
  }

  startQuiz() {
    // ÂêçÂâç„ÅåÊó¢„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºà‰øùÂ≠ò„Åï„Çå„ÅüÂêçÂâç„Çí‰ΩøÁî®Ôºâ
    if (this.userName && this.userName.trim()) {
      this.showingNameInput = false;
      this.startTime = new Date(); // Reset start time
      this.render();
      return;
    }
    
    // ÂêçÂâçÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Åã„ÇâÂèñÂæó
    const nameInput = document.getElementById('user-name-input');
    if (nameInput) {
      this.userName = nameInput.value.trim();
      if (this.userName) {
        // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´ÂêçÂâç„Çí‰øùÂ≠ò
        localStorage.setItem('quizStudentName', this.userName);
        console.log('Name saved to localStorage:', this.userName);
        
        this.showingNameInput = false;
        this.startTime = new Date(); // Reset start time
        this.render();
      }
    }
  }

  renderResult() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const totalQuestions = this.questions.length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;
    const percentage = Math.round((correctAnswers / totalQuestions) * 100);

    // 100%ÈÅîÊàêÊôÇ„ÅØ‰øÆ‰∫ÜË®ºÁîªÈù¢„Å´ÈÅ∑Áßª
    if (percentage === 100) {
      this.showingCertificate = true;
      this.render();
      return;
    }

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="text-align: center; margin-bottom: 2rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">Ë™≤È°åÂÆå‰∫ÜÔºÅ</h2>
          <p style="color: var(--text-secondary);">„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
        </div>

        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="
                font-size: 3rem; 
                font-weight: 700; 
                margin-bottom: 0.5rem; 
                background: rgba(255,255,255,0.2); 
                border-radius: 50%; 
                width: 96px; 
                height: 96px; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                margin: 0 auto 1rem auto;
              ">
                <span style="color: white;">${this.getScoreGrade(percentage)}</span>
              </div>
              <div style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;">${percentage}%</div>
              <div style="opacity: 0.9;">${correctAnswers} / ${totalQuestions} Ë™≤È°åÂêàÊ†º</div>
            </div>
          </div>
          
          <div style="padding: 2rem;">
            <div style="text-align: center; margin-bottom: 2rem;">
              <p style="font-size: 1.125rem; color: var(--text-primary);">${this.getScoreMessage(percentage)}</p>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-bottom: 2rem; text-align: center;">
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${totalQuestions}</div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">Á∑èË™≤È°åÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†ºÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">${totalQuestions - correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--accent-color); font-weight: 500;">‰∏çÂêàÊ†ºÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                  ${Math.floor(timeSpent / 60)}:${(timeSpent % 60).toString().padStart(2, '0')}
                </div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">ÊâÄË¶ÅÊôÇÈñì</div>
              </div>
            </div>

            <div style="display: flex; flex-direction: column; gap: 0.75rem; align-items: center;">
              <button
                id="retry-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; margin-bottom: 0.5rem;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                „ÇÇ„ÅÜ‰∏ÄÂ∫¶ÊåëÊà¶
              </button>
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="display: flex; align-items: center;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                „É°„Éã„É•„Éº„Å´Êàª„Çã
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listeners for buttons
    setTimeout(() => {
      const retryButton = document.getElementById('retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          // Reset quiz state for retry
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingNameInput = false; // Skip name input since we already have the name
          this.showingCertificate = false;
          this.currentUploadedFile = null;
          
          this.render();
        });
      }
    }, 0);
  }

  renderCertificate() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const formattedDate = endTime.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; text-align: center;">
        <div style="margin-bottom: 2rem;">
          <div style="font-size: 3rem; margin-bottom: 1rem;">üéâ</div>
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">
            „Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ
          </h2>
          <p style="color: var(--text-secondary); font-size: 1.125rem;">
            ÂÖ®Ë™≤È°å„ÇØ„É™„Ç¢„Åß‰øÆ‰∫ÜË®º„ÅåÁô∫Ë°å„Åï„Çå„Åæ„Åó„Åü
          </p>
        </div>

        <!-- Certificate Preview -->
        <div class="card" style="margin-bottom: 2rem; padding: 0; overflow: hidden; background: #f8fafb;">
          <div style="padding: 1rem; background: var(--surface); border-bottom: 1px solid var(--border);">
            <h3 style="margin: 0; color: var(--text-primary); font-weight: 600;">‰øÆ‰∫ÜË®º„Éó„É¨„Éì„É•„Éº</h3>
          </div>
          <div style="padding: 2rem; background: white;">
            <canvas 
              id="certificate-canvas" 
              width="800" 
              height="600" 
              style="max-width: 100%; height: auto; border: 1px solid #e5e7eb;"
            ></canvas>
          </div>
        </div>

        <!-- Download Button -->
        <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
          <button
            id="download-certificate-button"
            class="btn btn-primary"
            style="padding: 0.75rem 2rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem;"
          >
            <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            ‰øÆ‰∫ÜË®º„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          </button>
          
          <div style="display: flex; gap: 1rem;">
            <button
              id="certificate-retry-button"
              class="btn btn-secondary"
            >
              „ÇÇ„ÅÜ‰∏ÄÂ∫¶ÊåëÊà¶
            </button>
            <button
              onclick="window.location.href='/quiz'"
              class="btn btn-secondary"
            >
              „É°„Éã„É•„Éº„Å´Êàª„Çã
            </button>
          </div>
        </div>
      </div>
    `;

    // Generate certificate after DOM is ready
    setTimeout(() => {
      this.generateCertificate();
      
      const downloadButton = document.getElementById('download-certificate-button');
      if (downloadButton) {
        downloadButton.addEventListener('click', () => this.downloadCertificate());
      }
      
      const retryButton = document.getElementById('certificate-retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          // Reset quiz state for retry
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingNameInput = false;
          this.showingCertificate = false;
          this.currentUploadedFile = null;
          
          this.render();
        });
      }
    }, 0);
  }

  generateCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f8fafc');
    gradient.addColorStop(1, '#e2e8f0');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Border
    ctx.strokeStyle = '#059669';
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, width - 40, height - 40);

    // Inner border
    ctx.strokeStyle = '#047857';
    ctx.lineWidth = 2;
    ctx.strokeRect(40, 40, width - 80, height - 80);

    // Title
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 48px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('‰øÆ‰∫ÜË®º', width / 2, 120);

    // Subtitle
    ctx.font = '24px sans-serif';
    ctx.fillStyle = '#475569';
    ctx.fillText('Certificate of Completion', width / 2, 160);

    // User name
    ctx.font = 'bold 36px sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(this.userName, width / 2, 240);

    // Course info
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#374151';
    ctx.fillText('‰∏äË®ò„ÅÆÊñπ„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å„Çí', width / 2, 290);
    ctx.fillText('100%„ÅÆÂêàÊ†ºÁéá„Åß‰øÆ‰∫Ü„Åï„Çå„Åæ„Åó„Åü', width / 2, 320);

    // Course title
    ctx.font = 'bold 28px sans-serif';
    ctx.fillStyle = '#047857';
    ctx.fillText(`„Äå${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å'}„Äç`, width / 2, 370);

    // Date
    const now = new Date();
    const dateStr = now.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    ctx.font = '18px sans-serif';
    ctx.fillStyle = '#6b7280';
    ctx.fillText(`Áô∫Ë°åÊó•: ${dateStr}`, width / 2, 450);

    // Site name
    ctx.font = 'bold 20px sans-serif';
    ctx.fillStyle = '#059669';
    ctx.fillText('„Åò„Çá„ÅÜ„Åª„ÅÜ„Çâ„ÅÑ„Åµ', width / 2, 520);

    // Decorative elements
    ctx.fillStyle = '#10b981';
    ctx.beginPath();
    ctx.arc(150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#059669';
    ctx.beginPath();
    ctx.arc(width - 150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#047857';
    ctx.beginPath();
    ctx.arc(150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();

    ctx.fillStyle = '#065f46';
    ctx.beginPath();
    ctx.arc(width - 150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
  }

  downloadCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;

    // Create download link
    const link = document.createElement('a');
    link.download = `‰øÆ‰∫ÜË®º_${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å'}_${this.userName}_${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL('image/png');
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  renderError() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          Ë™≤È°å„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü
        </h3>
        <p class="text-gray-500 mb-4">
          „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ
        </p>
        <button 
          onclick="window.location.href='/quiz'"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          ÂïèÈ°å‰∏ÄË¶ß„Å´Êàª„Çã
        </button>
      </div>
    `;
  }

  async evaluateNetwork() {
    if (!this.currentUploadedFile) return;
    
    const currentQuestion = this.questions[this.currentQuestionIndex];
    console.log('Evaluating network for question:', currentQuestion.id);
    
    try {
      // Execute the validation function
      const validationResult = eval(`(${currentQuestion.validation})`)(this.currentUploadedFile);
      
      console.log('Validation result:', validationResult);
      
      // Store result
      this.results[currentQuestion.id] = {
        isCorrect: validationResult.valid,
        message: validationResult.message,
        uploadedFile: this.currentUploadedFile
      };
      
      // Show result and move to next question or complete
      this.showValidationResult(validationResult);
      
    } catch (error) {
      console.error('Error evaluating network:', error);
      const errorResult = {
        valid: false,
        message: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâ„ÅÆÂà§ÂÆö‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇJSON„Éï„Ç°„Ç§„É´„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
      };
      
      this.results[currentQuestion.id] = {
        isCorrect: false,
        message: errorResult.message,
        uploadedFile: this.currentUploadedFile
      };
      
      this.showValidationResult(errorResult);
    }
  }

  showValidationResult(result) {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">ÈÄ≤Êçó</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div 
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>
          
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÊèêÂá∫Ê∏à„Åø</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†º</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${Math.round((correctAnswers / completedQuestions) * 100)}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">ÂêàÊ†ºÁéá</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÁµåÈÅéÊôÇÈñì</div>
            </div>
          </div>
        </div>

        <!-- Result Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, ${result.valid ? '#10b981, #059669' : '#ef4444, #dc2626'}); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">
                ${result.valid ? 'üéâ' : '‚ùå'}
              </div>
              <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                ${result.valid ? 'ÂêàÊ†º„Åß„ÅôÔºÅ' : '‰∏çÂêàÊ†º„Åß„Åô'}
              </h2>
              <p style="opacity: 0.9;">
                Ë™≤È°å ${this.currentQuestionIndex + 1}: ${parseMarkdown(currentQuestion.title)}
              </p>
            </div>
          </div>

          <!-- Content -->
          <div style="padding: 2rem;">
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">Âà§ÂÆöÁµêÊûú</h3>
              <div style="
                background: ${result.valid ? '#f0fdf4' : '#fef2f2'}; 
                border: 1px solid ${result.valid ? '#22c55e' : '#ef4444'};
                border-radius: var(--radius-md); 
                padding: 1.5rem;
                color: ${result.valid ? '#065f46' : '#991b1b'};
              ">
                <p style="margin: 0; line-height: 1.6;">
                  ${result.message}
                </p>
              </div>
            </div>

            <!-- Explanation -->
            ${currentQuestion.explanation ? `
              <div style="margin-bottom: 2rem;">
                <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">Ëß£Ë™¨</h3>
                <div style="
                  background: var(--surface); 
                  border-radius: var(--radius-md); 
                  padding: 1.5rem;
                  border-left: 4px solid var(--primary-color);
                ">
                  <div style="color: var(--text-secondary); line-height: 1.6;">
                    ${parseMarkdown(currentQuestion.explanation)}
                  </div>
                </div>
              </div>
            ` : ''}

            <!-- Navigation -->
            <div style="display: flex; justify-content: center; gap: 1rem;">
              <button
                id="continue-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem;"
              >
                ${this.currentQuestionIndex === this.questions.length - 1 ? 'ÁµêÊûú„ÇíË¶ã„Çã' : 'Ê¨°„ÅÆË™≤È°å„Å∏'}
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listener
    setTimeout(() => {
      const continueButton = document.getElementById('continue-button');
      if (continueButton) {
        continueButton.addEventListener('click', () => this.continueAfterResult());
      }
    }, 0);
  }

  continueAfterResult() {
    if (this.currentQuestionIndex < this.questions.length - 1) {
      this.currentQuestionIndex++;
      this.currentUploadedFile = null; // Reset uploaded file for next question
      this.render();
    } else {
      this.isCompleted = true;
      this.render();
    }
  }

  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy': return 'ÂàùÁ¥ö';
      case 'medium': return '‰∏≠Á¥ö';
      case 'hard': return '‰∏äÁ¥ö';
      default: return '‰∏≠Á¥ö';
    }
  }

  getScoreGrade(percentage) {
    if (percentage >= 90) return 'A';
    if (percentage >= 80) return 'B';
    if (percentage >= 70) return 'C';
    if (percentage >= 60) return 'D';
    return 'F';
  }

  getScoreMessage(percentage) {
    if (percentage >= 100) return 'ÂÆåÁíßÔºÅÂÖ®„Å¶„ÅÆË™≤È°å„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü„ÄÇ';
    if (percentage >= 80) return '„Çà„Åè„Åß„Åç„Åæ„Åó„ÅüÔºÅ„Åª„Å®„Çì„Å©„ÅÆË™≤È°å„Çí„ÇØ„É™„Ç¢„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇ';
    if (percentage >= 60) return 'ÂêàÊ†º„É©„Ç§„É≥ÔºÅ‰∏çÂêàÊ†º„Å†„Å£„ÅüË™≤È°å„ÇíË¶ãÁõ¥„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ';
    return 'Âæ©Áøí„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÂü∫Á§é„Åã„Çâ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Á¢∫Ë™ç„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ';
  }
}

// File handling functions - make them globally accessible
window.handleFileDrop = function(event) {
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0];
    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      processFile(file);
    } else {
      alert('JSON„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  }
};

window.handleFileSelect = function(event) {
  const files = event.target.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
};

function processFile(file) {
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const networkData = JSON.parse(e.target.result);
      console.log('Uploaded network data:', networkData);
      
      // Store the uploaded file data
      networkQuizSession.currentUploadedFile = networkData;
      
      // Update UI
      const fileInfo = document.getElementById('file-info');
      const fileName = document.getElementById('file-name');
      const submitButton = document.getElementById('submit-button');
      
      if (fileInfo && fileName && submitButton) {
        fileName.textContent = file.name;
        fileInfo.style.display = 'block';
        
        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';
        
        // Remove any existing event listeners and add new one
        submitButton.replaceWith(submitButton.cloneNode(true));
        const newSubmitButton = document.getElementById('submit-button');
        newSubmitButton.addEventListener('click', () => {
          if (networkQuizSession) {
            networkQuizSession.evaluateNetwork();
          }
        });
      }
      
    } catch (error) {
      console.error('Error parsing JSON:', error);
      alert('JSON„Éï„Ç°„Ç§„É´„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç∑„Éü„É•„É¨„Éº„Çø„Åã„Çâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åü„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  };
  
  reader.readAsText(file);
}

// Global reference for file handling
let networkQuizSession;

// Initialize the quiz session when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  networkQuizSession = new NetworkQuizSession();
});
</script>

<style>
#file-drop-zone:hover {
  border-color: var(--primary-color) !important;
  background: var(--primary-bg-light) !important;
}

.btn {
  display: inline-flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.btn-secondary {
  background: var(--surface);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.btn-secondary:hover {
  background: var(--border);
}

.card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

:root {
  --primary-color: #3b82f6;
  --secondary-color: #10b981;
  --accent-color: #f59e0b;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-muted: #9ca3af;
  --surface: #f9fafb;
  --border: #e5e7eb;
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --primary-bg-light: rgba(59, 130, 246, 0.1);
}
</style>