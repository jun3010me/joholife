---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë† - „Åò„Çá„ÅÜ„Åª„ÅÜ„Çâ„ÅÑ„Åµ">
  <div class="container mx-auto px-4 py-8">
    <div id="network-quiz-app" class="max-w-4xl mx-auto">
      <div class="flex items-center justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span class="text-gray-600">Ë™≤È°å„ÇíË™≠„ÅøËæº„Åø‰∏≠...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
async function loadNetworkQuestions() {
  return {
    id: 'network-construction',
    title: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†',
    description: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâ„Ç∑„Éü„É•„É¨„Éº„Çø„Åß‰ΩúÊàê„Åó„Åü„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíJSON„Éï„Ç°„Ç§„É´„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„ÄÅË™≤È°åÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÂà§ÂÆö„Åó„Åæ„Åô',
    icon: 'üåê',
    difficulty: 'medium',
    estimatedTime: 20,
    category: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ',
    tags: ['„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ', 'IPË®≠ÂÆö', 'Êé•Á∂öÊßãÊàê', '„Ç∑„Éü„É•„É¨„Éº„Çø'],
    questions: [{
      id: 'basic-pc-connection',
      type: 'file-analysis',
      title: 'Âü∫Êú¨ÁöÑ„Å™PCÈñìÊé•Á∂ö',
      description: `**Ë™≤È°åÂÜÖÂÆπ**

‰ª•‰∏ã„ÅÆÊù°‰ª∂„Åß„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíÊßãÁØâ„Åó„ÄÅJSON„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

**ÊßãÊàêË¶Å‰ª∂**
- PC-1„Å®PC-2„ÇíÁõ¥Êé•LAN„Ç±„Éº„Éñ„É´„ÅßÊé•Á∂ö
- PC-1„ÅÆIP„Ç¢„Éâ„É¨„Çπ: 192.168.0.2
- PC-2„ÅÆIP„Ç¢„Éâ„É¨„Çπ: 192.168.0.3
- ‰∏°PC„ÅÆ„Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ: 255.255.255.0
- ‰∏°PC„ÅÆ„Éá„Éï„Ç©„É´„Éà„Ç≤„Éº„Éà„Ç¶„Çß„Ç§: 192.168.0.1
- PCÈñì„ÅßPingÁñéÈÄö„ÅåÂèØËÉΩ„Åß„ÅÇ„Çã„Åì„Å®

**Âà§ÂÆöÊù°‰ª∂**
- 2Âè∞„ÅÆPC„ÅåÂ≠òÂú®„Åô„Çã
- PCÈñì„ÅåLAN„Ç±„Éº„Éñ„É´„ÅßÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã
- IP„Ç¢„Éâ„É¨„Çπ„ÅåÊåáÂÆöÈÄö„Çä„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã
- „Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ„Å®„Éá„Éï„Ç©„É´„Éà„Ç≤„Éº„Éà„Ç¶„Çß„Ç§„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã`,
      validation: function validateNetwork(networkData) {
        const { devices, connections } = networkData;

        const pcs = devices.filter(d => d.type === 'pc');
        if (pcs.length !== 2) {
          return { valid: false, message: 'PCÊï∞„Åå2Âè∞„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }

        if (connections.length !== 1) {
          return { valid: false, message: 'PCÈñì„ÅÆÊé•Á∂ö„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }

        const targetIPs = ['192.168.0.2', '192.168.0.3'];
        const actualIPs = pcs.map(pc => pc.config.ipAddress).sort();
        targetIPs.sort();

        if (!targetIPs.every((ip, i) => ip === actualIPs[i])) {
          return { valid: false, message: 'IP„Ç¢„Éâ„É¨„Çπ„ÅåÊåáÂÆöÈÄö„Çä„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
        }

        for (const pc of pcs) {
          if (pc.config.subnetMask !== '255.255.255.0') {
            return { valid: false, message: '„Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
          }
          if (pc.config.defaultGateway !== '192.168.0.1') {
            return { valid: false, message: '„Éá„Éï„Ç©„É´„Éà„Ç≤„Éº„Éà„Ç¶„Çß„Ç§„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
          }
        }

        return { valid: true, message: 'ÂÖ®„Å¶„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ' };
      },
      explanation: `„Åì„ÅÆË™≤È°å„Åß„ÅØ„ÄÅÊúÄ„ÇÇÂü∫Êú¨ÁöÑ„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÊàê„Åß„ÅÇ„Çã2Âè∞„ÅÆPC„ÅÆÁõ¥Êé•Êé•Á∂ö„ÇíÂ≠¶Áøí„Åó„Åæ„Åó„Åü„ÄÇ

**„Éù„Ç§„É≥„Éà**
- **IP„Ç¢„Éâ„É¨„ÇπË®≠ÂÆö**: Âêå„Åò„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çª„Ç∞„É°„É≥„ÉàÔºà192.168.0.0/24ÔºâÂÜÖ„Åß„É¶„Éã„Éº„ÇØ„Å™IP„Ç¢„Éâ„É¨„Çπ„ÇíË®≠ÂÆö
- **„Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ**: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÈÉ®„Å®„Éõ„Çπ„ÉàÈÉ®„ÇíÂàÜ„Åë„ÇãË®≠ÂÆöÔºà255.255.255.0Ôºâ
- **„Éá„Éï„Ç©„É´„Éà„Ç≤„Éº„Éà„Ç¶„Çß„Ç§**: ‰ªñ„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Å∏„ÅÆÂá∫Âè£„Å®„Å™„Çã„É´„Éº„Çø„ÅÆIP„Ç¢„Éâ„É¨„Çπ
- **Áâ©ÁêÜÊé•Á∂ö**: LAN„Ç±„Éº„Éñ„É´„Å´„Çà„ÇãPCÈñì„ÅÆÁõ¥Êé•Êé•Á∂ö

„Åì„ÅÆ„Çà„ÅÜ„Å™Âü∫Êú¨ÊßãÊàê„ÇíÁêÜËß£„Åô„Çã„Åì„Å®„Åß„ÄÅ„Çà„ÇäË§áÈõë„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®≠Ë®à„ÅÆÂü∫Á§é„Å®„Å™„Çä„Åæ„Åô„ÄÇ`,
      difficulty: 'easy',
      points: 10,
      tags: ['Âü∫Êú¨ÊßãÊàê', 'PCÊé•Á∂ö', 'IPË®≠ÂÆö']
    }, {
      id: 'router-network',
      type: 'file-analysis',
      title: '„Çπ„Ç§„ÉÉ„ÉÅ„Çí‰Ωø„Å£„Åü3Âè∞PCÊé•Á∂ö„Å®PingÁñéÈÄö',
      description: `**Ë™≤È°åÂÜÖÂÆπ**

‰ª•‰∏ã„ÅÆÊù°‰ª∂„Åß„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíÊßãÁØâ„Åó„ÄÅJSON„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

**ÊßãÊàêË¶Å‰ª∂**
- „Çπ„Ç§„ÉÉ„ÉÅ1Âè∞„Å®PC3Âè∞„Çí‰ΩøÁî®
- PC-1„ÄÅPC-2„ÄÅPC-3„Çí„Åô„Åπ„Å¶„Çπ„Ç§„ÉÉ„ÉÅ„Å´Êé•Á∂ö
- PC-1„ÅÆIP„Ç¢„Éâ„É¨„Çπ: 192.168.1.10
- PC-2„ÅÆIP„Ç¢„Éâ„É¨„Çπ: 192.168.1.20
- PC-3„ÅÆIP„Ç¢„Éâ„É¨„Çπ: 192.168.1.30
- ÂÖ®PC„ÅÆ„Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ: 255.255.255.0
- ÂÖ®PCÈñì„ÅßPingÁñéÈÄö„ÅåÁ¢∫Ë™ç„Åß„Åç„Çã„Åì„Å®

**Âà§ÂÆöÊù°‰ª∂**
- 1Âè∞„ÅÆ„Çπ„Ç§„ÉÉ„ÉÅ„Å®3Âè∞„ÅÆPC„ÅåÂ≠òÂú®„Åô„Çã
- ÂÖ®„Å¶„ÅÆPC„Åå„Çπ„Ç§„ÉÉ„ÉÅ„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã
- IP„Ç¢„Éâ„É¨„Çπ„ÅåÊåáÂÆöÈÄö„Çä„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã
- ÂÖ®PC„ÅåÂêå‰∏Ä„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çª„Ç∞„É°„É≥„Éà„Å´Â±û„Åó„Å¶„ÅÑ„Çã
- PCÈñì„ÅßPingÁñéÈÄö„ÅåÁ¢∫Ë™ç„Åß„Åç„Çã`,
      validation: function validateNetwork(networkData) {
        const { devices, connections } = networkData;

        const switches = devices.filter(d => d.type === 'switch');
        const pcs = devices.filter(d => d.type === 'pc');

        if (switches.length !== 1) {
          return { valid: false, message: '„Çπ„Ç§„ÉÉ„ÉÅ„Åå1Âè∞„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }
        if (pcs.length !== 3) {
          return { valid: false, message: 'PCÊï∞„Åå3Âè∞„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }

        if (connections.length !== 3) {
          return { valid: false, message: 'PC-„Çπ„Ç§„ÉÉ„ÉÅÈñì„ÅÆÊé•Á∂ö„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }

        const switchId = switches[0].id;
        const pcConnections = connections.filter(conn =>
          conn.from.deviceId === switchId || conn.to.deviceId === switchId
        );

        if (pcConnections.length !== 3) {
          return { valid: false, message: 'ÂÖ®„Å¶„ÅÆPC„Åå„Çπ„Ç§„ÉÉ„ÉÅ„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
        }

        const targetIPs = ['192.168.1.10', '192.168.1.20', '192.168.1.30'];
        const actualIPs = pcs.map(pc => pc.config.ipAddress).sort();
        targetIPs.sort();

        if (!targetIPs.every((ip, i) => ip === actualIPs[i])) {
          return { valid: false, message: 'PC„ÅÆIP„Ç¢„Éâ„É¨„Çπ„ÅåÊåáÂÆöÈÄö„Çä„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
        }

        for (const pc of pcs) {
          if (pc.config.subnetMask !== '255.255.255.0') {
            return { valid: false, message: '„Çµ„Éñ„Éç„ÉÉ„Éà„Éû„Çπ„ÇØ„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
          }
        }

        const ipAddresses = pcs.map(pc => pc.config.ipAddress);
        for (let i = 0; i < ipAddresses.length; i++) {
          for (let j = i + 1; j < ipAddresses.length; j++) {
            const ip1 = ipAddresses[i];
            const ip2 = ipAddresses[j];

            const subnet1 = ip1.split('.').slice(0, 3).join('.');
            const subnet2 = ip2.split('.').slice(0, 3).join('.');

            if (subnet1 !== '192.168.1' || subnet2 !== '192.168.1') {
              return { valid: false, message: 'ÂÖ®PC„ÅåÂêå‰∏Ä„Çª„Ç∞„É°„É≥„ÉàÔºà192.168.1.0/24Ôºâ„Å´Â±û„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì' };
            }
          }
        }

        return { valid: true, message: 'ÂÖ®„Å¶„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ„Çπ„Ç§„ÉÉ„ÉÅÁµåÁî±„Åß3Âè∞„ÅÆPC„ÅåÂêå‰∏Ä„Çª„Ç∞„É°„É≥„Éà„ÅßÊé•Á∂ö„Åï„Çå„ÄÅPingÁñéÈÄö„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ' };
      },
      explanation: `„Åì„ÅÆË™≤È°å„Åß„ÅØ„ÄÅ„Çπ„Ç§„ÉÉ„ÉÅ„Çí‰∏≠ÂøÉ„Å®„Åó„ÅüÂü∫Êú¨ÁöÑ„Å™LANÊßãÊàê„ÇíÂ≠¶Áøí„Åó„Åæ„Åó„Åü„ÄÇ

**„Éù„Ç§„É≥„Éà**
- **„Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÂΩπÂâ≤**: „É¨„Ç§„É§„Éº2„ÅßÂãï‰Ωú„Åó„ÄÅMAC„Ç¢„Éâ„É¨„Çπ„ÇíÂ≠¶Áøí„Åó„Å¶„Éï„É¨„Éº„É†„ÇíËª¢ÈÄÅ
- **„Çπ„Çø„ÉºÂûã„Éà„Éù„É≠„Ç∏**: „Çπ„Ç§„ÉÉ„ÉÅ„Çí‰∏≠ÂøÉ„Å®„Åó„ÅüÊé•Á∂öÂΩ¢ÊÖã„Åß„ÄÅ„Ç≥„É™„Ç∏„Éß„É≥„Éâ„É°„Ç§„É≥„ÇíÂàÜÈõ¢
- **Âêå‰∏Ä„Çª„Ç∞„É°„É≥„ÉàÈÄö‰ø°**: ÂÖ®PC„ÅåÂêå„Åò„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çª„Ç∞„É°„É≥„Éà„ÅßPingÁñéÈÄö„ÅåÂèØËÉΩ
- **IP„Ç¢„Éâ„É¨„ÇπÁÆ°ÁêÜ**: Âêå‰∏Ä„Çª„Ç∞„É°„É≥„ÉàÂÜÖ„Åß„ÅÆ„É¶„Éã„Éº„ÇØ„Å™IP„Ç¢„Éâ„É¨„ÇπÂâ≤„ÇäÂΩì„Å¶
- **„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà„Éâ„É°„Ç§„É≥**: „Çπ„Ç§„ÉÉ„ÉÅÈÖç‰∏ã„ÅÆÂÖ®„Éù„Éº„Éà„ÅåÂêå‰∏Ä„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà„Éâ„É°„Ç§„É≥

„Åì„ÅÆÊßãÊàê„ÅØ„ÄÅÂ∞èË¶èÊ®°„Å™LAN„Çª„Ç∞„É°„É≥„Éà„ÅÆÂü∫Êú¨ÂΩ¢„Åß„ÄÅ„Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÂãï‰ΩúÂéüÁêÜ„ÇíÁêÜËß£„Åß„Åç„Åæ„Åô„ÄÇ`,
      difficulty: 'medium',
      points: 15,
      tags: ['„Çπ„Ç§„ÉÉ„ÉÅÊßãÊàê', 'Âêå‰∏Ä„Çª„Ç∞„É°„É≥„Éà', 'PingÁñéÈÄö', 'LANË®≠Ë®à', '„Çπ„Çø„ÉºÂûã']
    }]
  };
}

function parseMarkdown(text) {
  if (!text) return '';

  return text
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/(?<!\*)\*(?!\*)([^*]+)\*(?!\*)/g, '<em>$1</em>')
    .replace(/`([^`]+)`/g, '<code style="background: #f3f4f6; padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-family: monospace;">$1</code>')
    .replace(/<br>/g, '<br>')
    .replace(/\n/g, '<br>')
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: var(--primary-color); text-decoration: underline;">$1</a>');
}

class NetworkQuizSession {
  constructor() {
    this.questionSet = null;
    this.questions = [];
    this.currentQuestionIndex = 0;
    this.results = {};
    this.startTime = new Date();
    this.userName = '';
    this.showingNameInput = true;
    this.showingCertificate = false;
    this.isCompleted = false;
    this.currentUploadedFile = null;

    this.cachedIpAddress = null;
    this.sessionId = null;
    this.tryGetIPAddress();

    this.init();
  }

  async init() {
    try {
      this.questionSet = await loadNetworkQuestions();
      if (!this.questionSet) {
        throw new Error('Question set not found');
      }

      this.questions = this.questionSet.questions;
      this.render();
    } catch (error) {
      console.error('Error loading question set:', error);
      this.renderError();
    }
  }

  render() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    if (this.showingNameInput) {
      this.renderNameInput();
      return;
    }

    if (this.showingCertificate) {
      this.renderCertificate();
      return;
    }

    if (this.isCompleted) {
      this.renderResult();
      return;
    }

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">ÈÄ≤Êçó</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>

          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÊèêÂá∫Ê∏à„Åø</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†º</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${completedQuestions > 0 ? Math.round((correctAnswers / completedQuestions) * 100) : 0}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">ÂêàÊ†ºÁéá</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÁµåÈÅéÊôÇÈñì</div>
            </div>
          </div>
        </div>

        <!-- Question Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <div style="display: flex; align-items: center; gap: 0.75rem;">
                <span style="font-size: 1.5rem; font-weight: 700;">Ë™≤È°å ${this.currentQuestionIndex + 1}</span>
                <span style="opacity: 0.8;">/ ${this.questions.length}</span>
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${this.getDifficultyText(currentQuestion.difficulty)}
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${currentQuestion.points}ÁÇπ
                </span>
              </div>
            </div>
          </div>

          <!-- Question Content -->
          <div style="padding: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              ${parseMarkdown(currentQuestion.title)}
            </h3>

            <div style="color: var(--text-secondary); margin-bottom: 2rem; line-height: 1.6;">
              ${parseMarkdown(currentQuestion.description)}
            </div>

            <!-- File Upload Area -->
            <div style="margin-bottom: 2rem;">
              <div
                id="file-drop-zone"
                style="
                  border: 2px dashed var(--border);
                  border-radius: var(--radius-md);
                  padding: 2rem;
                  text-align: center;
                  background: var(--surface);
                  transition: all 0.3s ease;
                  cursor: pointer;
                "
                ondragover="event.preventDefault(); this.style.borderColor = 'var(--primary-color)'; this.style.background = 'var(--primary-bg-light)';"
                ondragleave="this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)';"
                ondrop="event.preventDefault(); this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)'; handleFileDrop(event);"
              >
                <div style="margin-bottom: 1rem;">
                  <svg style="width: 48px; height: 48px; margin: 0 auto; color: var(--text-muted);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                </div>
                <p style="color: var(--text-primary); font-weight: 500; margin-bottom: 0.5rem;">
                  JSON„Éï„Ç°„Ç§„É´„Çí„Éâ„É©„ÉÉ„Ç∞ÔºÜ„Éâ„É≠„ÉÉ„Éó„Åæ„Åü„ÅØ„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                </p>
                <p style="color: var(--text-muted); font-size: 0.875rem;">
                  „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç∑„Éü„É•„É¨„Éº„Çø„Åã„Çâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„ÅüJSON„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                </p>
                <input
                  type="file"
                  id="file-input"
                  accept=".json"
                  style="display: none;"
                  onchange="handleFileSelect(event)"
                />
              </div>

              <!-- File Info Display -->
              <div id="file-info" style="display: none; margin-top: 1rem; padding: 1rem; background: #f0fdf4; border: 1px solid #22c55e; border-radius: var(--radius-md);">
                <div style="display: flex; align-items: center; gap: 0.5rem; color: #065f46;">
                  <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span id="file-name" style="font-weight: 500;"></span>
                </div>
              </div>
            </div>

            <!-- Navigation -->
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div></div>
              <button
                id="submit-button"
                disabled
                class="btn btn-secondary"
                style="display: flex; align-items: center; opacity: 0.5; cursor: not-allowed;"
              >
                Âà§ÂÆö„ÇíÂÆüË°å
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    setTimeout(() => {
      const dropZone = document.getElementById('file-drop-zone');
      const fileInput = document.getElementById('file-input');
      const submitButton = document.getElementById('submit-button');

      if (dropZone) {
        dropZone.addEventListener('click', () => {
          fileInput.click();
        });
      }

      if (submitButton && this.currentUploadedFile) {
        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';

        submitButton.addEventListener('click', () => this.evaluateNetwork());
      }
    }, 0);
  }

  renderNameInput() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const savedName = localStorage.getItem('quizStudentName');

    container.innerHTML = `
      <div style="max-width: 600px; margin: 0 auto; text-align: center;">
        <div class="card" style="padding: 3rem;">
          <div style="margin-bottom: 2rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">
              ${this.questionSet?.icon || 'üåê'}
            </div>
            <h2 style="font-size: 1.75rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.2; hyphens: auto; word-break: break-word;">
              <span style="display: inline-block; max-width: 100%; font-size: clamp(1.25rem, 4vw, 1.75rem);">
                ${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†'}
              </span>
            </h2>
            <p style="color: var(--text-secondary); margin-bottom: 2rem;">
              ${this.questionSet?.description || ''}
            </p>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-bottom: 2rem; font-size: 0.875rem; color: var(--text-muted);">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Á¥Ñ${this.questionSet?.estimatedTime || 0}ÂàÜ
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                ÂÖ®${this.questions?.length || 0}Ë™≤È°å
              </div>
            </div>
          </div>

          <div style="border-top: 1px solid var(--border); padding-top: 2rem;">
            ${savedName && savedName.trim() ? `
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                üéØ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†ÈñãÂßãÔºÅ
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 1rem;">
                ${savedName}„Åï„Çì„ÄÅË™≤È°å‚ë†„ÇíÈñãÂßã„Åó„Åæ„Åô„ÅãÔºü
              </p>

              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                >
                  „ÅØ„ÅÑ„ÄÅÈñãÂßã„Åô„Çã
                </button>

                <button
                  id="change-name-button"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  Âà•„ÅÆÂêçÂâç„ÅßÈñãÂßã
                </button>

                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  „É°„Éã„É•„Éº„Å´Êàª„Çã
                </button>
              </div>
            ` : `
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                „ÅäÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 0.875rem;">
                100%„ÅÆÂêàÊ†ºÁéá„ÅßÂÖ®Ë™≤È°å„Çí„ÇØ„É™„Ç¢„Åô„Çã„Å®„ÄÅ‰øÆ‰∫ÜË®º„ÅåÁô∫Ë°å„Åï„Çå„Åæ„Åô<br>
                ‚ÄªÂÖ•Âäõ„Åï„Çå„ÅüÊ∞èÂêç„ÅØ„ÄÅ‰øÆ‰∫ÜË®ºÁô∫Ë°å„Å´„ÅÆ„Åø‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ
              </p>

              <div style="margin-bottom: 2rem;">
                <input
                  type="text"
                  id="user-name-input"
                  placeholder="Â±±Áî∞Â§™ÈÉé"
                  style="
                    width: 100%;
                    max-width: 300px;
                    padding: 0.75rem 1rem;
                    border: 2px solid var(--border);
                    border-radius: var(--radius-md);
                    font-size: 1rem;
                    text-align: center;
                    transition: border-color 0.2s ease;
                  "
                  maxlength="20"
                />
              </div>

              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                  disabled
                >
                  Ë™≤È°å„ÇíÈñãÂßã
                </button>

                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  „É°„Éã„É•„Éº„Å´Êàª„Çã
                </button>
              </div>
            `}
          </div>
        </div>
      </div>
    `;

    setTimeout(() => {
      const nameInput = document.getElementById('user-name-input');
      const startButton = document.getElementById('start-quiz-button');
      const changeNameButton = document.getElementById('change-name-button');

      const savedName = localStorage.getItem('quizStudentName');
      if (savedName && savedName.trim()) {
        if (startButton) {
          startButton.addEventListener('click', () => {
            this.userName = savedName;
            this.startQuiz();
          });
        }

        if (changeNameButton) {
          changeNameButton.addEventListener('click', () => {
            localStorage.removeItem('quizStudentName');
            this.renderNameInput();
          });
        }
      } else {
        if (nameInput && startButton) {
          const validateInput = () => {
            const name = nameInput.value.trim();
            startButton.disabled = name.length === 0;
            startButton.style.opacity = name.length === 0 ? '0.5' : '1';
          };

          nameInput.addEventListener('input', validateInput);
          nameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && nameInput.value.trim()) {
              this.startQuiz();
            }
          });

          startButton.addEventListener('click', () => this.startQuiz());
          nameInput.focus();
        }
      }
    }, 0);
  }

  startQuiz() {
    if (this.userName && this.userName.trim()) {
      this.showingNameInput = false;
      this.startTime = new Date();
      this.render();
      return;
    }

    const nameInput = document.getElementById('user-name-input');
    if (nameInput) {
      this.userName = nameInput.value.trim();
      if (this.userName) {
        localStorage.setItem('quizStudentName', this.userName);
        console.log('Name saved to localStorage:', this.userName);

        this.showingNameInput = false;
        this.startTime = new Date();
        this.render();
      }
    }
  }

  async evaluateNetwork() {
    if (!this.currentUploadedFile) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    console.log('Evaluating network for question:', currentQuestion.id);

    try {
      const validationResult = currentQuestion.validation(this.currentUploadedFile);

      console.log('Validation result:', validationResult);

      this.results[currentQuestion.id] = {
        isCorrect: validationResult.valid,
        message: validationResult.message,
        uploadedFile: this.currentUploadedFile
      };

      this.showValidationResult(validationResult);

    } catch (error) {
      console.error('Error evaluating network:', error);
      const errorResult = {
        valid: false,
        message: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâ„ÅÆÂà§ÂÆö‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇJSON„Éï„Ç°„Ç§„É´„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
      };

      this.results[currentQuestion.id] = {
        isCorrect: false,
        message: errorResult.message,
        uploadedFile: this.currentUploadedFile
      };

      this.showValidationResult(errorResult);
    }
  }

  showValidationResult(result) {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">ÈÄ≤Êçó</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>

          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÊèêÂá∫Ê∏à„Åø</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†º</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${Math.round((correctAnswers / completedQuestions) * 100)}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">ÂêàÊ†ºÁéá</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">ÁµåÈÅéÊôÇÈñì</div>
            </div>
          </div>
        </div>

        <!-- Result Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, ${result.valid ? '#10b981, #059669' : '#ef4444, #dc2626'}); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">
                ${result.valid ? 'üéâ' : '‚ùå'}
              </div>
              <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                ${result.valid ? 'ÂêàÊ†º„Åß„ÅôÔºÅ' : '‰∏çÂêàÊ†º„Åß„Åô'}
              </h2>
              <p style="opacity: 0.9;">
                Ë™≤È°å ${this.currentQuestionIndex + 1}: ${parseMarkdown(currentQuestion.title)}
              </p>
            </div>
          </div>

          <!-- Content -->
          <div style="padding: 2rem;">
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">Âà§ÂÆöÁµêÊûú</h3>
              <div style="
                background: ${result.valid ? '#f0fdf4' : '#fef2f2'};
                border: 1px solid ${result.valid ? '#22c55e' : '#ef4444'};
                border-radius: var(--radius-md);
                padding: 1.5rem;
                color: ${result.valid ? '#065f46' : '#991b1b'};
              ">
                <p style="margin: 0; line-height: 1.6;">
                  ${result.message}
                </p>
              </div>
            </div>

            <!-- Explanation -->
            ${currentQuestion.explanation ? `
              <div style="margin-bottom: 2rem;">
                <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">Ëß£Ë™¨</h3>
                <div style="
                  background: var(--surface);
                  border-radius: var(--radius-md);
                  padding: 1.5rem;
                  border-left: 4px solid var(--primary-color);
                ">
                  <div style="color: var(--text-secondary); line-height: 1.6;">
                    ${parseMarkdown(currentQuestion.explanation)}
                  </div>
                </div>
              </div>
            ` : ''}

            <!-- Navigation -->
            <div style="display: flex; justify-content: center; gap: 1rem;">
              <button
                id="continue-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem;"
              >
                ${this.currentQuestionIndex === this.questions.length - 1 ? 'ÁµêÊûú„ÇíË¶ã„Çã' : 'Ê¨°„ÅÆË™≤È°å„Å∏'}
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    setTimeout(() => {
      const continueButton = document.getElementById('continue-button');
      if (continueButton) {
        continueButton.addEventListener('click', () => this.continueAfterResult());
      }
    }, 0);
  }

  continueAfterResult() {
    if (this.currentQuestionIndex < this.questions.length - 1) {
      this.currentQuestionIndex++;
      this.currentUploadedFile = null;
      this.render();
    } else {
      this.isCompleted = true;
      this.render();
    }
  }

  renderResult() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const totalQuestions = this.questions.length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;
    const percentage = Math.round((correctAnswers / totalQuestions) * 100);

    if (percentage === 100) {
      this.showingCertificate = true;
      this.render();
      return;
    }

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="text-align: center; margin-bottom: 2rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">Ë™≤È°åÂÆå‰∫ÜÔºÅ</h2>
          <p style="color: var(--text-secondary);">„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
        </div>

        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="
                font-size: 3rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
                background: rgba(255,255,255,0.2);
                border-radius: 50%;
                width: 96px;
                height: 96px;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 auto 1rem auto;
              ">
                <span style="color: white;">${this.getScoreGrade(percentage)}</span>
              </div>
              <div style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;">${percentage}%</div>
              <div style="opacity: 0.9;">${correctAnswers} / ${totalQuestions} Ë™≤È°åÂêàÊ†º</div>
            </div>
          </div>

          <div style="padding: 2rem;">
            <div style="text-align: center; margin-bottom: 2rem;">
              <p style="font-size: 1.125rem; color: var(--text-primary);">${this.getScoreMessage(percentage)}</p>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-bottom: 2rem; text-align: center;">
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${totalQuestions}</div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">Á∑èË™≤È°åÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--secondary-color); font-weight: 500;">ÂêàÊ†ºÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">${totalQuestions - correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--accent-color); font-weight: 500;">‰∏çÂêàÊ†ºÊï∞</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                  ${Math.floor(timeSpent / 60)}:${(timeSpent % 60).toString().padStart(2, '0')}
                </div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">ÊâÄË¶ÅÊôÇÈñì</div>
              </div>
            </div>

            <div style="display: flex; flex-direction: column; gap: 0.75rem; align-items: center;">
              <button
                id="retry-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; margin-bottom: 0.5rem;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                „ÇÇ„ÅÜ‰∏ÄÂ∫¶ÊåëÊà¶
              </button>
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="display: flex; align-items: center;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                „É°„Éã„É•„Éº„Å´Êàª„Çã
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    setTimeout(() => {
      const retryButton = document.getElementById('retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingNameInput = false;
          this.showingCertificate = false;
          this.currentUploadedFile = null;

          this.render();
        });
      }
    }, 0);
  }

  renderCertificate() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;
    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const formattedDate = endTime.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; text-align: center;">
        <div style="margin-bottom: 2rem;">
          <div style="font-size: 3rem; margin-bottom: 1rem;">üéâ</div>
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">
            „Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ
          </h2>
          <p style="color: var(--text-secondary); font-size: 1.125rem;">
            ÂÖ®ÂïèÊ≠£Ëß£„Åß‰øÆ‰∫ÜË®º„ÅåÁô∫Ë°å„Åï„Çå„Åæ„Åó„Åü
          </p>
        </div>
        <!-- Certificate Preview -->
        <div class="card" style="margin-bottom: 2rem; padding: 0; overflow: hidden; background: #f8fafb;">
          <div style="padding: 1rem; background: var(--surface); border-bottom: 1px solid var(--border);">
            <h3 style="margin: 0; color: var(--text-primary); font-weight: 600;">‰øÆ‰∫ÜË®º„Éó„É¨„Éì„É•„Éº</h3>
          </div>
          <div style="padding: 2rem; background: white;">
            <canvas
              id="certificate-canvas"
              width="800"
              height="600"
              style="max-width: 100%; height: auto; border: 1px solid #e5e7eb;"
            ></canvas>
          </div>
        </div>
        <!-- Download Button -->
        <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
          <button
            id="download-certificate-button"
            class="btn btn-primary"
            style="padding: 0.75rem 2rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem;"
          >
            <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            ‰øÆ‰∫ÜË®º„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          </button>

          <div style="display: flex; gap: 1rem;">
            <button
              id="certificate-retry-button"
              class="btn btn-secondary"
            >
              „ÇÇ„ÅÜ‰∏ÄÂ∫¶ÊåëÊà¶
            </button>
            <button
              onclick="window.location.href='/quiz'"
              class="btn btn-secondary"
            >
              „É°„Éã„É•„Éº„Å´Êàª„Çã
            </button>
          </div>
        </div>
      </div>
    `;
    // Generate certificate after DOM is ready
    setTimeout(() => {
      this.generateCertificate();

      const downloadButton = document.getElementById('download-certificate-button');
      if (downloadButton) {
        downloadButton.addEventListener('click', () => this.downloadCertificate());
      }

      const retryButton = document.getElementById('certificate-retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          // Reset quiz state
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingCertificate = false;
          this.showingNameInput = false;

          this.render();
        });
      }
    }, 0);
  }

  renderError() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          Ë™≤È°å„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü
        </h3>
        <p class="text-gray-500 mb-4">
          „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ
        </p>
        <button
          onclick="window.location.href='/quiz'"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          ÂïèÈ°å‰∏ÄË¶ß„Å´Êàª„Çã
        </button>
      </div>
    `;
  }

  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy': return 'ÂàùÁ¥ö';
      case 'medium': return '‰∏≠Á¥ö';
      case 'hard': return '‰∏äÁ¥ö';
      default: return '‰∏≠Á¥ö';
    }
  }

  getScoreGrade(percentage) {
    if (percentage >= 90) return 'A';
    if (percentage >= 80) return 'B';
    if (percentage >= 70) return 'C';
    if (percentage >= 60) return 'D';
    return 'F';
  }

  getScoreMessage(percentage) {
    if (percentage >= 100) return 'ÂÆåÁíßÔºÅÂÖ®„Å¶„ÅÆË™≤È°å„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü„ÄÇ';
    if (percentage >= 80) return '„Çà„Åè„Åß„Åç„Åæ„Åó„ÅüÔºÅ„Åª„Å®„Çì„Å©„ÅÆË™≤È°å„Çí„ÇØ„É™„Ç¢„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇ';
    if (percentage >= 60) return 'ÂêàÊ†º„É©„Ç§„É≥ÔºÅ‰∏çÂêàÊ†º„Å†„Å£„ÅüË™≤È°å„ÇíË¶ãÁõ¥„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ';
    return 'Âæ©Áøí„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÂü∫Á§é„Åã„Çâ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Á¢∫Ë™ç„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ';
  }

  async tryGetIPAddress() {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      this.cachedIpAddress = data.ip;
    } catch (error) {
      this.cachedIpAddress = 'Unknown';
    }
  }

  generateCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f8fafc');
    gradient.addColorStop(1, '#e2e8f0');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    // Border
    ctx.strokeStyle = '#059669';
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, width - 40, height - 40);
    // Inner border
    ctx.strokeStyle = '#047857';
    ctx.lineWidth = 2;
    ctx.strokeRect(40, 40, width - 80, height - 80);
    // Title
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 48px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('‰øÆ‰∫ÜË®º', width / 2, 120);
    // Subtitle
    ctx.font = '24px sans-serif';
    ctx.fillStyle = '#475569';
    ctx.fillText('Certificate of Completion', width / 2, 160);
    // User name
    ctx.font = 'bold 36px sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(this.userName, width / 2, 240);
    // Course info
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#374151';
    ctx.fillText('‰∏äË®ò„ÅÆÊñπ„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆË™≤È°å„Çí', width / 2, 290);
    ctx.fillText('100%„ÅÆÊ≠£Á≠îÁéá„Åß‰øÆ‰∫Ü„Åï„Çå„Åæ„Åó„Åü', width / 2, 320);
    // Course title
    ctx.font = 'bold 28px sans-serif';
    ctx.fillStyle = '#047857';
    ctx.fillText(`„Äå${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†'}„Äç`, width / 2, 370);
    // Date
    const now = new Date();
    const dateStr = now.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    ctx.font = '18px sans-serif';
    ctx.fillStyle = '#6b7280';
    ctx.fillText(`Áô∫Ë°åÊó•: ${dateStr}`, width / 2, 450);
    // Site name
    ctx.font = 'bold 20px sans-serif';
    ctx.fillStyle = '#059669';
    ctx.fillText('„Åò„Çá„ÅÜ„Åª„ÅÜ„Çâ„ÅÑ„Åµ', width / 2, 520);
    // --- „Å™„Çä„Åô„Åæ„ÅóÈò≤Ê≠¢ÊÉÖÂ†± ---
    // ËøΩË∑°ÊÉÖÂ†±„ÇíÂèéÈõÜ
    const trackingInfo = this.generateTrackingInfo();
    // ‰∏ãÁ´Ø„Å´ËøΩË∑°ÊÉÖÂ†±„ÇíÂ∞è„Åï„ÅèË°®Á§∫ÔºàÈªÑËâ≤„ÅßË¶ã„ÇÑ„Åô„ÅèÔºâ
    ctx.font = '10px monospace';
    ctx.fillStyle = '#f59e0b';
    ctx.textAlign = 'left';
    const bottomY = height - 40;
    ctx.fillText(`Áô∫Ë°åÊôÇÂàª: ${trackingInfo.timestamp}`, 43, bottomY - 20);
    ctx.fillText(`„Ç¢„ÇØ„Çª„ÇπÂÖÉ: ${trackingInfo.ipAddress}`, 43, bottomY - 5);
    ctx.textAlign = 'right';
    ctx.fillText(`Á´ØÊú´: ${trackingInfo.userAgent}`, width - 43, bottomY - 20);
    ctx.fillText(`ÁîªÈù¢: ${trackingInfo.screenInfo}`, width - 43, bottomY - 5);
    // ‰∏≠Â§Æ‰∏ãÈÉ®„Å´Á´ØÊú´Ë≠òÂà•„Ç≥„Éº„Éâ„ÇíÈÖçÁΩÆ
    ctx.textAlign = 'center';
    ctx.fillText(`Á´ØÊú´Ë≠òÂà•: ${trackingInfo.deviceUserHash}`, width / 2, bottomY + 12);
    // Decorative elements
    ctx.fillStyle = '#10b981';
    ctx.beginPath();
    ctx.arc(150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#059669';
    ctx.beginPath();
    ctx.arc(width - 150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#047857';
    ctx.beginPath();
    ctx.arc(150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#065f46';
    ctx.beginPath();
    ctx.arc(width - 150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
  }

  downloadCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    // Create download link
    const link = document.createElement('a');
    link.download = `‰øÆ‰∫ÜË®º_${this.questionSet?.title || '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÁØâË™≤È°å‚ë†'}_${this.userName}_${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL('image/png');
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  generateTrackingInfo() {
    const now = new Date();
    // IP„Ç¢„Éâ„É¨„ÇπÂèñÂæóÔºàÈùûÂêåÊúü„Å†„Åå„ÄÅ„Åß„Åç„ÇãÈôê„ÇäË©¶Ë°åÔºâ
    let ipAddress = this.cachedIpAddress || 'N/A';
    if (!this.cachedIpAddress) {
      this.tryGetIPAddress();
    }
    // User-AgentÊÉÖÂ†±„ÅÆÁ∞°Áï•Âåñ
    const userAgent = navigator.userAgent;
    const browserInfo = userAgent.includes('Chrome') ? 'Chrome' :
                       userAgent.includes('Firefox') ? 'Firefox' :
                       userAgent.includes('Safari') ? 'Safari' : 'Other';
    const osInfo = userAgent.includes('Windows') ? 'Win' :
                   userAgent.includes('Mac') ? 'Mac' :
                   userAgent.includes('Linux') ? 'Linux' : 'Other';
    // „Çª„ÉÉ„Ç∑„Éß„É≥IDÔºà„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´ÁîüÊàêÔºâ
    if (!this.sessionId) {
      this.sessionId = this.generateSessionId();
    }
    // Á´ØÊú´Ë≠òÂà•„Ç≥„Éº„ÉâÔºà„Éñ„É©„Ç¶„Ç∂„Éï„Ç£„É≥„Ç¨„Éº„Éó„É™„É≥„Éà„ÅÆ„ÅøÔºâ
    const deviceUserHash = this.generateDeviceUserHash(this.userName);
    return {
      timestamp: now.toLocaleString('ja-JP', {
        year: '2-digit',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      ipAddress: ipAddress,
      userAgent: `${browserInfo}/${osInfo}`,
      screenInfo: `${screen.width}x${screen.height}`,
      sessionId: this.sessionId,
      deviceUserHash: deviceUserHash
    };
  }

  generateSessionId() {
    // 8Ê°Å„ÅÆ„É©„É≥„ÉÄ„É†„Å™„Çª„ÉÉ„Ç∑„Éß„É≥ID
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  }

  generateDeviceUserHash(userName) {
    // Ê∞∏Á∂öÂåñ„Åï„Çå„ÅüÁ´ØÊú´ID„Çí‰ΩøÁî®
    return this.getOrCreateDeviceId();
  }

  getOrCreateDeviceId() {
    // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÁ´ØÊú´ID„ÇíÂèñÂæó„ÄÅ„Å™„Åë„Çå„Å∞Êñ∞Ë¶è‰ΩúÊàê
    const DEVICE_ID_KEY = 'joholife_device_id';
    let deviceId = localStorage.getItem(DEVICE_ID_KEY);
    if (!deviceId) {
      // ÂàùÂõû„Ç¢„ÇØ„Çª„ÇπÊôÇ: È´òÁ≤æÂ∫¶„Éï„Ç£„É≥„Ç¨„Éº„Éó„É™„É≥„ÉÜ„Ç£„É≥„Ç∞„ÅßÁ´ØÊú´ID„ÇíÁîüÊàê
      console.log('Á´ØÊú´IDÂàùÂõûÁîüÊàê‰∏≠...');
      const fingerprint = this.generateBrowserFingerprint();
      deviceId = this.generateHash(fingerprint).substr(0, 8).toUpperCase();
      // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
      localStorage.setItem(DEVICE_ID_KEY, deviceId);
      console.log('Á´ØÊú´IDÁîüÊàêÂÆå‰∫Ü:', deviceId);
    } else {
      console.log('‰øùÂ≠òÊ∏à„ÅøÁ´ØÊú´ID„Çí‰ΩøÁî®:', deviceId);
    }
    return deviceId;
  }

  generateBrowserFingerprint() {
    // Âü∫Êú¨ÁöÑ„Å™„Éñ„É©„Ç¶„Ç∂ÊÉÖÂ†±
    const basicFingerprint = {
      userAgent: navigator.userAgent || 'unknown',
      language: navigator.language || 'unknown',
      languages: navigator.languages ? navigator.languages.join(',') : 'unknown',
      platform: navigator.platform || 'unknown',
      vendor: navigator.vendor || 'unknown',
      cookieEnabled: navigator.cookieEnabled || false,
      doNotTrack: navigator.doNotTrack || 'unknown',
      screenResolution: `${screen.width}x${screen.height}` || 'unknown',
      colorDepth: screen.colorDepth || 'unknown',
      pixelDepth: screen.pixelDepth || 'unknown',
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'unknown',
      touchSupport: 'ontouchstart' in window || navigator.maxTouchPoints > 0 ? 'yes' : 'no',
      hardwareConcurrency: navigator.hardwareConcurrency || 'unknown',
      pixelRatio: window.devicePixelRatio || 1,
      plugins: this.getPluginsList()
    };
    // Canvas Fingerprinting - GPUÂõ∫Êúâ„ÅÆÊèèÁîªÁâπÊÄß
    const canvasFingerprint = this.generateCanvasFingerprint();
    // WebGL Fingerprinting - „Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„Ç´„Éº„ÉâÊÉÖÂ†±
    const webglFingerprint = this.generateWebGLFingerprint();
    // Audio Context Fingerprinting - „Ç™„Éº„Éá„Ç£„Ç™Âá¶ÁêÜ„ÅÆÁâπÊÄß
    const audioFingerprint = this.generateAudioFingerprint();
    // „Åô„Åπ„Å¶„ÅÆ„Éï„Ç£„É≥„Ç¨„Éº„Éó„É™„É≥„Éà„ÇíÁµÑ„ÅøÂêà„Çè„Åõ
    const combinedFingerprint = {
      basic: basicFingerprint,
      canvas: canvasFingerprint,
      webgl: webglFingerprint,
      audio: audioFingerprint
    };
    return this.generateHash(JSON.stringify(combinedFingerprint)).substr(0, 12);
  }

  getPluginsList() {
    try {
      return Array.from(navigator.plugins || [])
        .map(plugin => plugin.name)
        .sort()
        .join(',');
    } catch (e) {
      return 'unknown';
    }
  }

  generateCanvasFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      // Ë§áÈõë„Å™ÊèèÁîª„Éë„Çø„Éº„É≥„Çí‰ΩúÊàê
      canvas.width = 200;
      canvas.height = 50;
      // „ÉÜ„Ç≠„Çπ„ÉàÊèèÁîªÔºà„Éï„Ç©„É≥„Éà„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÅÆÈÅï„ÅÑ„ÇíÊ§úÂá∫Ôºâ
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillText('Canvas fingerprint test üéØ', 2, 2);
      // Âõ≥ÂΩ¢ÊèèÁîªÔºà„Ç¢„É≥„ÉÅ„Ç®„Ç§„É™„Ç¢„Ç∑„É≥„Ç∞„ÅÆÈÅï„ÅÑ„ÇíÊ§úÂá∫Ôºâ
      ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
      ctx.fillRect(50, 1, 62, 20);
      return this.generateHash(canvas.toDataURL()).substr(0, 8);
    } catch (e) {
      return 'canvas_error';
    }
  }

  generateWebGLFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) return 'no_webgl';
      const webglInfo = {
        vendor: gl.getParameter(gl.VENDOR),
        renderer: gl.getParameter(gl.RENDERER),
        version: gl.getParameter(gl.VERSION),
        shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
        maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
        maxViewportDims: gl.getParameter(gl.MAX_VIEWPORT_DIMS),
        aliasedLineWidthRange: gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE),
        aliasedPointSizeRange: gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE),
        maxVertexAttribs: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
        maxVertexUniformVectors: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
        maxFragmentUniformVectors: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),
        maxVaryingVectors: gl.getParameter(gl.MAX_VARYING_VECTORS)
      };
      // Êã°ÂºµÊ©üËÉΩÊÉÖÂ†±„ÇÇËøΩÂä†
      const extensions = gl.getSupportedExtensions();
      webglInfo.extensions = extensions ? extensions.sort().join(',') : '';
      return this.generateHash(JSON.stringify(webglInfo)).substr(0, 8);
    } catch (e) {
      return 'webgl_error';
    }
  }

  generateAudioFingerprint() {
    try {
      // Audio Context API„Çí‰ΩøÁî®„Åó„Å¶„Ç™„Éº„Éá„Ç£„Ç™„Éï„Ç£„É≥„Ç¨„Éº„Éó„É™„É≥„Éà„ÇíÁîüÊàê
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const audioInfo = {
        sampleRate: audioContext.sampleRate,
        maxChannelCount: audioContext.destination.maxChannelCount,
        numberOfInputs: audioContext.destination.numberOfInputs,
        numberOfOutputs: audioContext.destination.numberOfOutputs,
        channelCount: audioContext.destination.channelCount,
        channelCountMode: audioContext.destination.channelCountMode,
        channelInterpretation: audioContext.destination.channelInterpretation
      };
      return this.generateHash(JSON.stringify(audioInfo)).substr(0, 8);
    } catch (e) {
      return 'audio_error';
    }
  }

  generateHash(input) {
    // ÊîπËâØ„Åï„Çå„Åü„Éè„ÉÉ„Ç∑„É•Èñ¢Êï∞
    let hash = 0;
    if (input.length === 0) return hash.toString();
    for (let i = 0; i < input.length; i++) {
      const char = input.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32bit integer
    }
    return Math.abs(hash).toString(16);
  }
}

window.handleFileDrop = function(event) {
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0];
    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      processFile(file);
    } else {
      alert('JSON„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  }
};

window.handleFileSelect = function(event) {
  const files = event.target.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
};

function processFile(file) {
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const networkData = JSON.parse(e.target.result);
      console.log('Uploaded network data:', networkData);

      networkQuizSession.currentUploadedFile = networkData;

      const fileInfo = document.getElementById('file-info');
      const fileName = document.getElementById('file-name');
      const submitButton = document.getElementById('submit-button');

      if (fileInfo && fileName && submitButton) {
        fileName.textContent = file.name;
        fileInfo.style.display = 'block';

        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';

        submitButton.replaceWith(submitButton.cloneNode(true));
        const newSubmitButton = document.getElementById('submit-button');
        newSubmitButton.addEventListener('click', () => {
          if (networkQuizSession) {
            networkQuizSession.evaluateNetwork();
          }
        });
      }

    } catch (error) {
      console.error('Error parsing JSON:', error);
      alert('JSON„Éï„Ç°„Ç§„É´„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç∑„Éü„É•„É¨„Éº„Çø„Åã„Çâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åü„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  };

  reader.readAsText(file);
}

let networkQuizSession;

document.addEventListener('DOMContentLoaded', () => {
  networkQuizSession = new NetworkQuizSession();
});
</script>

<style>
#file-drop-zone:hover {
  border-color: var(--primary-color) !important;
  background: var(--primary-bg-light) !important;
}

.btn {
  display: inline-flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.btn-secondary {
  background: var(--surface);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.btn-secondary:hover {
  background: var(--border);
}

.card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

:root {
  --primary-color: #3b82f6;
  --secondary-color: #10b981;
  --accent-color: #f59e0b;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-muted: #9ca3af;
  --surface: #f9fafb;
  --border: #e5e7eb;
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --primary-bg-light: rgba(59, 130, 246, 0.1);
}
</style>