---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="ネットワーク構築課題② - じょうほうらいふ">
  <div class="container mx-auto px-4 py-8">
    <div id="network-quiz-app" class="max-w-4xl mx-auto">
      <div class="flex items-center justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span class="text-gray-600">課題を読み込み中...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
async function loadNetworkQuestions() {
  return {
    id: 'network-troubleshooting',
    title: 'ネットワーク構築課題②',
    description: 'ネットワーク接続のトラブルシューティング課題',
    icon: '🔧',
    difficulty: 'medium',
    estimatedTime: 20,
    category: 'ネットワーク構築',
    tags: ['トラブルシューティング', 'IPアドレス設定', 'Ping疎通', 'ネットワーク設計'],
    questions: [{
      id: 'troubleshooting_1',
      type: 'file-analysis',
      title: 'ネットワーク接続トラブルの解決',
      description: `**課題概要**

以下のネットワーク構成において、一部のPC間でPing疎通ができない問題が発生しています。
問題を特定し、修正してください。

**ネットワーク構成**
- PC-1: 192.168.1.100
- PC-2: 192.168.1.101
- PC-3: ネットワーク設定に問題あり
- スイッチ-1: 192.168.1.10

**接続要件**
- PC-1、PC-2、PC-3をスイッチに接続
- 全PCが同一セグメント（192.168.1.0/24）に属する
- 全PC間でPing疎通が可能

**トラブルシューティングのポイント**
- IPアドレスの重複確認
- サブネットマスクの設定確認
- 適切なIPアドレス範囲の設定
- スイッチとの接続確認`,
      validation: function validateNetwork(networkData) {
        const { devices, connections } = networkData;

        // Device count validation
        const switches = devices.filter(d => d.type === 'switch');
        const pcs = devices.filter(d => d.type === 'pc');

        if (switches.length !== 1) {
          return { valid: false, message: 'スイッチが1台ではありません（現在: ' + switches.length + '台）' };
        }
        if (pcs.length !== 3) {
          return { valid: false, message: 'PCが3台ではありません（現在: ' + pcs.length + '台）' };
        }

        // Find specific PCs
        const pc1 = pcs.find(p => p.name === 'PC-1');
        const pc2 = pcs.find(p => p.name === 'PC-2');
        const pc3 = pcs.find(p => p.name === 'PC-3');

        if (!pc1 || !pc2 || !pc3) {
          return { valid: false, message: 'PC-1、PC-2、PC-3が正しく配置されていません' };
        }

        // IP address validation
        if (pc1.config.ipAddress !== '192.168.1.100') {
          return { valid: false, message: 'PC-1のIPアドレスが192.168.1.100ではありません' };
        }
        if (pc2.config.ipAddress !== '192.168.1.101') {
          return { valid: false, message: 'PC-2のIPアドレスが192.168.1.101ではありません' };
        }

        // PC-3 IP validation (should be in same segment but not conflicting)
        if (!pc3.config.ipAddress || !pc3.config.ipAddress.match(/^192\.168\.1\.[0-9]+$/)) {
          return { valid: false, message: 'PC-3のIPアドレスが192.168.1.xネットワークに設定されていません' };
        }

        // Check for IP conflicts
        const ipAddresses = pcs.map(pc => pc.config.ipAddress);
        const uniqueIPs = [...new Set(ipAddresses)];
        if (ipAddresses.length !== uniqueIPs.length) {
          return { valid: false, message: 'IPアドレスの重複があります。各PCに固有のIPアドレスを設定してください' };
        }

        // Subnet mask validation
        for (const pc of pcs) {
          if (pc.config.subnetMask !== '255.255.255.0') {
            return { valid: false, message: pc.name + 'のサブネットマスクが255.255.255.0ではありません' };
          }
        }

        // Connection validation
        const switchId = switches[0].id;
        const pcConnections = connections.filter(conn =>
          conn.from.deviceId === switchId || conn.to.deviceId === switchId
        );

        if (pcConnections.length !== 3) {
          return { valid: false, message: '全てのPCがスイッチに接続されていません（現在: ' + pcConnections.length + '接続）' };
        }

        // Switch IP validation
        const switch1 = switches[0];
        if (switch1.config.ipAddress !== '192.168.1.10') {
          return { valid: false, message: 'スイッチのIPアドレスが192.168.1.10ではありません' };
        }

        return { valid: true, message: '全ての問題が解決されました！ネットワーク接続が正常に動作しています。' };
      },
      explanation: `**解答解説**

このトラブルシューティング課題では、ネットワーク接続問題の特定と解決方法を学習しました。

**発生しやすい問題:**
1. **IPアドレスの重複**: 同じネットワーク内で同じIPアドレスが複数のデバイスに設定されている
2. **不適切なIPアドレス範囲**: 異なるセグメントのIPアドレスが混在している
3. **サブネットマスクの設定ミス**: 通信に必要な適切なサブネットマスクが設定されていない
4. **物理接続の問題**: デバイス間の接続が正しく行われていない

**解決手順:**
1. **ネットワーク図の確認**: 論理的な接続関係を把握
2. **IPアドレステーブルの作成**: 各デバイスの設定を一覧化
3. **重複・矛盾の特定**: IPアドレスやサブネット設定の問題を発見
4. **設定の修正**: 問題箇所を適切な値に変更
5. **疎通テスト**: Pingコマンドで接続を確認

**学習ポイント:**
- **体系的アプローチ**: 問題を順序立てて解決する方法
- **ネットワーク設計原則**: 一貫性のある設定の重要性
- **トラブルシューティングスキル**: 実際の現場で役立つ問題解決能力
- **設定検証**: 変更後の動作確認の重要性

**実際の現場では:**
- ネットワーク構築後の動作確認
- 既存ネットワークへの新機器追加時のトラブル
- システム移行時の接続問題解決
- 定期的なネットワーク健全性チェック`,
      difficulty: 'medium',
      points: 100,
      tags: ['トラブルシューティング', 'IPアドレス設定', 'Ping疎通', 'ネットワーク設計']
    }]
  };
}

function parseMarkdown(text) {
  if (!text) return '';

  return text
    // 太字: **text** -> <strong>text</strong>
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // 斜体: *text* -> <em>text</em>
    .replace(/(?<!\*)\*(?!\*)([^*]+)\*(?!\*)/g, '<em>$1</em>')
    // コード: `code` -> <code>code</code>
    .replace(/`([^`]+)`/g, '<code style="background: #f3f4f6; padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-family: monospace;">$1</code>')
    // 改行: <br> -> <br>
    .replace(/<br>/g, '<br>')
    // 改行: \n -> <br> (必要に応じて)
    .replace(/\n/g, '<br>')
    // リンク: [text](url) -> <a href="url">text</a>
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: var(--primary-color); text-decoration: underline;">$1</a>');
}

class NetworkQuizSession {
  constructor() {
    this.questionSet = null;
    this.questions = [];
    this.currentQuestionIndex = 0;
    this.results = {};
    this.startTime = new Date();
    this.userName = '';
    this.showingNameInput = true;
    this.showingCertificate = false;
    this.isCompleted = false;

    // なりすまし防止のためのIPアドレス取得を開始
    this.cachedIpAddress = null;
    this.sessionId = null;
    this.tryGetIPAddress();

    this.init();
  }

  async init() {
    try {
      this.questionSet = await loadNetworkQuestions();
      if (!this.questionSet) {
        throw new Error('Question set not found');
      }

      this.questions = this.questionSet.questions;
      this.render();
    } catch (error) {
      console.error('Error loading question set:', error);
      this.renderError();
    }
  }

  render() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    if (this.showingNameInput) {
      this.renderNameInput();
      return;
    }

    if (this.showingCertificate) {
      this.renderCertificate();
      return;
    }

    if (this.isCompleted) {
      this.renderResult();
      return;
    }

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">進捗</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>

          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">提出済み</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">合格</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${completedQuestions > 0 ? Math.round((correctAnswers / completedQuestions) * 100) : 0}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">合格率</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">経過時間</div>
            </div>
          </div>
        </div>

        <!-- Question Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <div style="display: flex; align-items: center; gap: 0.75rem;">
                <span style="font-size: 1.5rem; font-weight: 700;">課題 ${this.currentQuestionIndex + 1}</span>
                <span style="opacity: 0.8;">/ ${this.questions.length}</span>
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${this.getDifficultyText(currentQuestion.difficulty)}
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 0.25rem 0.75rem; border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 500;">
                  ${currentQuestion.points}点
                </span>
              </div>
            </div>
          </div>

          <!-- Question Content -->
          <div style="padding: 2rem;">
            <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
              ${parseMarkdown(currentQuestion.title)}
            </h3>

            <div style="color: var(--text-secondary); margin-bottom: 2rem; line-height: 1.6;">
              ${parseMarkdown(currentQuestion.description)}
            </div>

            <!-- Template Download Button -->
            <div style="margin-bottom: 2rem; text-align: center;">
              <button
                id="download-template-button"
                class="btn btn-primary"
                style="padding: 0.75rem 1.5rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem; margin: 0 auto;"
              >
                <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                📝 テンプレートJSONファイルをダウンロード
              </button>
              <p style="color: var(--text-muted); font-size: 0.875rem; margin-top: 0.5rem;">
                まずテンプレートをダウンロードして、ネットワークシミュレータで編集してください
              </p>
            </div>

            <!-- File Upload Area -->
            <div style="margin-bottom: 2rem;">
              <div
                id="file-drop-zone"
                style="
                  border: 2px dashed var(--border);
                  border-radius: var(--radius-md);
                  padding: 2rem;
                  text-align: center;
                  background: var(--surface);
                  transition: all 0.3s ease;
                  cursor: pointer;
                "
                ondragover="event.preventDefault(); this.style.borderColor = 'var(--primary-color)'; this.style.background = 'var(--primary-bg-light)';"
                ondragleave="this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)';"
                ondrop="event.preventDefault(); this.style.borderColor = 'var(--border)'; this.style.background = 'var(--surface)'; handleFileDrop(event);"
              >
                <div style="margin-bottom: 1rem;">
                  <svg style="width: 48px; height: 48px; margin: 0 auto; color: var(--text-muted);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                </div>
                <p style="color: var(--text-primary); font-weight: 500; margin-bottom: 0.5rem;">
                  編集済みJSONファイルをドラッグ＆ドロップまたはクリックしてアップロード
                </p>
                <p style="color: var(--text-muted); font-size: 0.875rem;">
                  ネットワークシミュレータで編集したJSONファイルをアップロードしてください
                </p>
                <input
                  type="file"
                  id="file-input"
                  accept=".json"
                  style="display: none;"
                  onchange="handleFileSelect(event)"
                />
              </div>

              <!-- File Info Display -->
              <div id="file-info" style="display: none; margin-top: 1rem; padding: 1rem; background: #f0fdf4; border: 1px solid #22c55e; border-radius: var(--radius-md);">
                <div style="display: flex; align-items: center; gap: 0.5rem; color: #065f46;">
                  <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span id="file-name" style="font-weight: 500;"></span>
                </div>
              </div>
            </div>

            <!-- Navigation -->
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div></div>
              <button
                id="submit-button"
                disabled
                class="btn btn-secondary"
                style="display: flex; align-items: center; opacity: 0.5; cursor: not-allowed;"
              >
                判定を実行
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listeners after DOM is updated
    setTimeout(() => {
      const dropZone = document.getElementById('file-drop-zone');
      const fileInput = document.getElementById('file-input');
      const submitButton = document.getElementById('submit-button');
      const downloadTemplateButton = document.getElementById('download-template-button');

      if (dropZone) {
        dropZone.addEventListener('click', () => {
          fileInput.click();
        });
      }

      if (submitButton && this.currentUploadedFile) {
        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';

        submitButton.addEventListener('click', () => this.evaluateNetwork());
      }

      // Add template download button event listener
      if (downloadTemplateButton) {
        downloadTemplateButton.addEventListener('click', downloadTemplateJSON);
        console.log('Template download button event listener added successfully');
      } else {
        console.error('Template download button not found in renderQuestion');
      }
    }, 0);
  }

  renderNameInput() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const savedName = localStorage.getItem('quizStudentName');

    container.innerHTML = `
      <div style="max-width: 600px; margin: 0 auto; text-align: center;">
        <div class="card" style="padding: 3rem;">
          <div style="margin-bottom: 2rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">
              ${this.questionSet?.icon || '🔧'}
            </div>
            <h2 style="font-size: 1.75rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.2; hyphens: auto; word-break: break-word;">
              <span style="display: inline-block; max-width: 100%; font-size: clamp(1.25rem, 4vw, 1.75rem);">
                ${this.questionSet?.title || 'ネットワーク構築課題②'}
              </span>
            </h2>
            <p style="color: var(--text-secondary); margin-bottom: 2rem;">
              ${this.questionSet?.description || ''}
            </p>
            <div style="display: flex; justify-content: center; gap: 2rem; margin-bottom: 2rem; font-size: 0.875rem; color: var(--text-muted);">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                約${this.questionSet?.estimatedTime || 0}分
              </div>
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                全${this.questions?.length || 0}課題
              </div>
            </div>
          </div>

          <div style="border-top: 1px solid var(--border); padding-top: 2rem;">
            ${savedName && savedName.trim() ? `
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                🎯 ネットワーク構築課題②開始！
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 1rem;">
                ${savedName}さん、課題②を開始しますか？
              </p>

              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                >
                  はい、開始する
                </button>

                <button
                  id="change-name-button"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  別の名前で開始
                </button>

                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  メニューに戻る
                </button>
              </div>
            ` : `
              <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">
                お名前を入力してください
              </h3>
              <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 0.875rem;">
                100%の合格率で全課題をクリアすると、修了証が発行されます<br>
                ※入力された氏名は、修了証発行にのみ使用されます。
              </p>

              <div style="margin-bottom: 2rem;">
                <input
                  type="text"
                  id="user-name-input"
                  placeholder="山田太郎"
                  style="
                    width: 100%;
                    max-width: 300px;
                    padding: 0.75rem 1rem;
                    border: 2px solid var(--border);
                    border-radius: var(--radius-md);
                    font-size: 1rem;
                    text-align: center;
                    transition: border-color 0.2s ease;
                  "
                  maxlength="20"
                />
              </div>

              <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
                <button
                  id="start-quiz-button"
                  class="btn btn-primary"
                  style="padding: 0.75rem 2rem; font-size: 1rem;"
                  disabled
                >
                  課題を開始
                </button>

                <button
                  onclick="window.location.href='/quiz'"
                  class="btn btn-secondary"
                  style="font-size: 0.875rem;"
                >
                  メニューに戻る
                </button>
              </div>
            `}
          </div>
        </div>
      </div>
    `;

    // Add event listeners
    setTimeout(() => {
      const nameInput = document.getElementById('user-name-input');
      const startButton = document.getElementById('start-quiz-button');
      const changeNameButton = document.getElementById('change-name-button');

      const savedName = localStorage.getItem('quizStudentName');
      if (savedName && savedName.trim()) {
        if (startButton) {
          startButton.addEventListener('click', () => {
            this.userName = savedName;
            this.startQuiz();
          });
        }

        if (changeNameButton) {
          changeNameButton.addEventListener('click', () => {
            localStorage.removeItem('quizStudentName');
            this.renderNameInput();
          });
        }
      } else {
        if (nameInput && startButton) {
          const validateInput = () => {
            const name = nameInput.value.trim();
            startButton.disabled = name.length === 0;
            startButton.style.opacity = name.length === 0 ? '0.5' : '1';
          };

          nameInput.addEventListener('input', validateInput);
          nameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && nameInput.value.trim()) {
              this.startQuiz();
            }
          });

          startButton.addEventListener('click', () => this.startQuiz());
          nameInput.focus();
        }
      }
    }, 0);
  }

  startQuiz() {
    if (this.userName && this.userName.trim()) {
      this.showingNameInput = false;
      this.startTime = new Date();
      this.render();
      return;
    }

    const nameInput = document.getElementById('user-name-input');
    if (nameInput) {
      this.userName = nameInput.value.trim();
      if (this.userName) {
        localStorage.setItem('quizStudentName', this.userName);
        console.log('Name saved to localStorage:', this.userName);

        this.showingNameInput = false;
        this.startTime = new Date();
        this.render();
      }
    }
  }

  async evaluateNetwork() {
    if (!this.currentUploadedFile) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    console.log('Evaluating network for question:', currentQuestion.id);

    try {
      // Execute the validation function
      const validationResult = currentQuestion.validation(this.currentUploadedFile);

      console.log('Validation result:', validationResult);

      // Store result
      this.results[currentQuestion.id] = {
        isCorrect: validationResult.valid,
        message: validationResult.message,
        uploadedFile: this.currentUploadedFile
      };

      // Show result and move to next question or complete
      this.showValidationResult(validationResult);

    } catch (error) {
      console.error('Error evaluating network:', error);
      const errorResult = {
        valid: false,
        message: 'ネットワーク構築の判定中にエラーが発生しました。JSONファイルの形式を確認してください。'
      };

      this.results[currentQuestion.id] = {
        isCorrect: false,
        message: errorResult.message,
        uploadedFile: this.currentUploadedFile
      };

      this.showValidationResult(errorResult);
    }
  }

  showValidationResult(result) {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const currentQuestion = this.questions[this.currentQuestionIndex];
    const timeElapsed = Math.floor((new Date() - this.startTime) / 1000);
    const completedQuestions = Object.keys(this.results).length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Progress Bar -->
        <div class="card" style="margin-bottom: 2rem;">
          <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
              <span style="font-size: 0.875rem; font-weight: 500; color: var(--text-primary);">進捗</span>
              <span style="font-size: 0.875rem; color: var(--text-secondary);">
                ${this.currentQuestionIndex + 1} / ${this.questions.length}
              </span>
            </div>
            <div style="width: 100%; background: var(--border); border-radius: var(--radius-md); height: 8px;">
              <div
                style="background: linear-gradient(90deg, var(--primary-color), var(--secondary-color)); height: 8px; border-radius: var(--radius-md); transition: all 0.3s ease; width: ${((this.currentQuestionIndex + 1) / this.questions.length) * 100}%;"
              ></div>
            </div>
          </div>

          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${completedQuestions}</div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">提出済み</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
              <div style="font-size: 0.75rem; color: var(--secondary-color); font-weight: 500;">合格</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">
                ${Math.round((correctAnswers / completedQuestions) * 100)}%
              </div>
              <div style="font-size: 0.75rem; color: var(--accent-color); font-weight: 500;">合格率</div>
            </div>
            <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                ${Math.floor(timeElapsed / 60)}:${(timeElapsed % 60).toString().padStart(2, '0')}
              </div>
              <div style="font-size: 0.75rem; color: var(--primary-color); font-weight: 500;">経過時間</div>
            </div>
          </div>
        </div>

        <!-- Result Card -->
        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, ${result.valid ? '#10b981, #059669' : '#ef4444, #dc2626'}); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="font-size: 3rem; margin-bottom: 1rem;">
                ${result.valid ? '🎉' : '❌'}
              </div>
              <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                ${result.valid ? '合格です！' : '不合格です'}
              </h2>
              <p style="opacity: 0.9;">
                課題 ${this.currentQuestionIndex + 1}: ${parseMarkdown(currentQuestion.title)}
              </p>
            </div>
          </div>

          <!-- Content -->
          <div style="padding: 2rem;">
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">判定結果</h3>
              <div style="
                background: ${result.valid ? '#f0fdf4' : '#fef2f2'};
                border: 1px solid ${result.valid ? '#22c55e' : '#ef4444'};
                border-radius: var(--radius-md);
                padding: 1.5rem;
                color: ${result.valid ? '#065f46' : '#991b1b'};
              ">
                <p style="margin: 0; line-height: 1.6;">
                  ${result.message}
                </p>
              </div>
            </div>

            <!-- Explanation -->
            ${currentQuestion.explanation ? `
              <div style="margin-bottom: 2rem;">
                <h3 style="font-size: 1.125rem; font-weight: 600; color: var(--text-primary); margin-bottom: 1rem;">解説</h3>
                <div style="
                  background: var(--surface);
                  border-radius: var(--radius-md);
                  padding: 1.5rem;
                  border-left: 4px solid var(--primary-color);
                ">
                  <div style="color: var(--text-secondary); line-height: 1.6;">
                    ${parseMarkdown(currentQuestion.explanation)}
                  </div>
                </div>
              </div>
            ` : ''}

            <!-- Navigation -->
            <div style="display: flex; justify-content: center; gap: 1rem;">
              <button
                id="continue-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; padding: 0.75rem 2rem;"
              >
                ${this.currentQuestionIndex === this.questions.length - 1 ? '結果を見る' : '次の課題へ'}
                <svg style="width: 20px; height: 20px; margin-left: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add event listener
    setTimeout(() => {
      const continueButton = document.getElementById('continue-button');
      if (continueButton) {
        continueButton.addEventListener('click', () => this.continueAfterResult());
      }
    }, 0);
  }

  continueAfterResult() {
    if (this.currentQuestionIndex < this.questions.length - 1) {
      this.currentQuestionIndex++;
      this.currentUploadedFile = null;
      this.render();
    } else {
      this.isCompleted = true;
      this.render();
    }
  }

  renderResult() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const totalQuestions = this.questions.length;
    const correctAnswers = Object.values(this.results).filter(result => result.isCorrect).length;
    const percentage = Math.round((correctAnswers / totalQuestions) * 100);

    if (percentage === 100) {
      this.showingCertificate = true;
      this.render();
      return;
    }

    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="text-align: center; margin-bottom: 2rem;">
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">課題完了！</h2>
          <p style="color: var(--text-secondary);">お疲れ様でした。結果を確認してください。</p>
        </div>

        <div class="card" style="overflow: hidden; margin-bottom: 2rem;">
          <div style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); padding: 2rem; color: white;">
            <div style="text-align: center;">
              <div style="
                font-size: 3rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
                background: rgba(255,255,255,0.2);
                border-radius: 50%;
                width: 96px;
                height: 96px;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 auto 1rem auto;
              ">
                <span style="color: white;">${this.getScoreGrade(percentage)}</span>
              </div>
              <div style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;">${percentage}%</div>
              <div style="opacity: 0.9;">${correctAnswers} / ${totalQuestions} 課題合格</div>
            </div>
          </div>

          <div style="padding: 2rem;">
            <div style="text-align: center; margin-bottom: 2rem;">
              <p style="font-size: 1.125rem; color: var(--text-primary);">${this.getScoreMessage(percentage)}</p>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-bottom: 2rem; text-align: center;">
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">${totalQuestions}</div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">総課題数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--secondary-color);">${correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--secondary-color); font-weight: 500;">合格数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-color);">${totalQuestions - correctAnswers}</div>
                <div style="font-size: 0.875rem; color: var(--accent-color); font-weight: 500;">不合格数</div>
              </div>
              <div style="background: var(--surface); border-radius: var(--radius-md); padding: 1rem;">
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">
                  ${Math.floor(timeSpent / 60)}:${(timeSpent % 60).toString().padStart(2, '0')}
                </div>
                <div style="font-size: 0.875rem; color: var(--primary-color); font-weight: 500;">所要時間</div>
              </div>
            </div>

            <div style="display: flex; flex-direction: column; gap: 0.75rem; align-items: center;">
              <button
                id="retry-button"
                class="btn btn-primary"
                style="display: flex; align-items: center; margin-bottom: 0.5rem;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                もう一度挑戦
              </button>
              <button
                onclick="window.location.href='/quiz'"
                class="btn btn-secondary"
                style="display: flex; align-items: center;"
              >
                <svg style="width: 20px; height: 20px; margin-right: 8px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                メニューに戻る
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    setTimeout(() => {
      const retryButton = document.getElementById('retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingNameInput = false;
          this.showingCertificate = false;
          this.currentUploadedFile = null;

          this.render();
        });
      }
    }, 0);
  }

  renderCertificate() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;
    const endTime = new Date();
    const timeSpent = Math.floor((endTime - this.startTime) / 1000);
    const formattedDate = endTime.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    container.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; text-align: center;">
        <div style="margin-bottom: 2rem;">
          <div style="font-size: 3rem; margin-bottom: 1rem;">🎉</div>
          <h2 style="font-size: 2rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.5rem;">
            おめでとうございます！
          </h2>
          <p style="color: var(--text-secondary); font-size: 1.125rem;">
            全問正解で修了証が発行されました
          </p>
        </div>
        <!-- Certificate Preview -->
        <div class="card" style="margin-bottom: 2rem; padding: 0; overflow: hidden; background: #f8fafb;">
          <div style="padding: 1rem; background: var(--surface); border-bottom: 1px solid var(--border);">
            <h3 style="margin: 0; color: var(--text-primary); font-weight: 600;">修了証プレビュー</h3>
          </div>
          <div style="padding: 2rem; background: white;">
            <canvas
              id="certificate-canvas"
              width="800"
              height="600"
              style="max-width: 100%; height: auto; border: 1px solid #e5e7eb;"
            ></canvas>
          </div>
        </div>
        <!-- Download Button -->
        <div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
          <button
            id="download-certificate-button"
            class="btn btn-primary"
            style="padding: 0.75rem 2rem; font-size: 1rem; display: flex; align-items: center; gap: 0.5rem;"
          >
            <svg style="width: 20px; height: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            修了証をダウンロード
          </button>

          <div style="display: flex; gap: 1rem;">
            <button
              id="certificate-retry-button"
              class="btn btn-secondary"
            >
              もう一度挑戦
            </button>
            <button
              onclick="window.location.href='/quiz'"
              class="btn btn-secondary"
            >
              メニューに戻る
            </button>
          </div>
        </div>
      </div>
    `;
    // Generate certificate after DOM is ready
    setTimeout(() => {
      this.generateCertificate();

      const downloadButton = document.getElementById('download-certificate-button');
      if (downloadButton) {
        downloadButton.addEventListener('click', () => this.downloadCertificate());
      }

      const retryButton = document.getElementById('certificate-retry-button');
      if (retryButton) {
        retryButton.addEventListener('click', () => {
          // Reset quiz state
          this.currentQuestionIndex = 0;
          this.results = {};
          this.startTime = new Date();
          this.isCompleted = false;
          this.showingCertificate = false;
          this.showingNameInput = false;

          this.render();
        });
      }
    }, 0);
  }

  renderError() {
    const container = document.getElementById('network-quiz-app');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <div class="text-red-400 text-6xl mb-4">⚠️</div>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">
          課題データの読み込みに失敗しました
        </h3>
        <p class="text-gray-500 mb-4">
          ネットワーク構築課題②が見つかりませんでした。
        </p>
        <button
          onclick="window.location.href='/quiz'"
          class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          問題一覧に戻る
        </button>
      </div>
    `;
  }

  getDifficultyText(difficulty) {
    switch (difficulty) {
      case 'easy': return '初級';
      case 'medium': return '中級';
      case 'hard': return '上級';
      default: return '中級';
    }
  }

  getScoreGrade(percentage) {
    if (percentage >= 90) return 'A';
    if (percentage >= 80) return 'B';
    if (percentage >= 70) return 'C';
    if (percentage >= 60) return 'D';
    return 'F';
  }

  getScoreMessage(percentage) {
    if (percentage >= 100) return '完璧！全ての課題をクリアしました。';
    if (percentage >= 80) return 'よくできました！ほとんどの課題をクリアできています。';
    if (percentage >= 60) return '合格ライン！不合格だった課題を見直してみましょう。';
    return '復習が必要です。基礎からもう一度確認しましょう。';
  }

  async tryGetIPAddress() {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      this.cachedIpAddress = data.ip;
    } catch (error) {
      this.cachedIpAddress = 'Unknown';
    }
  }

  generateCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f8fafc');
    gradient.addColorStop(1, '#e2e8f0');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    // Border
    ctx.strokeStyle = '#059669';
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, width - 40, height - 40);
    // Inner border
    ctx.strokeStyle = '#047857';
    ctx.lineWidth = 2;
    ctx.strokeRect(40, 40, width - 80, height - 80);
    // Title
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 48px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('修了証', width / 2, 120);
    // Subtitle
    ctx.font = '24px sans-serif';
    ctx.fillStyle = '#475569';
    ctx.fillText('Certificate of Completion', width / 2, 160);
    // User name
    ctx.font = 'bold 36px sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(this.userName, width / 2, 240);
    // Course info
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#374151';
    ctx.fillText('上記の方は、以下の課題を', width / 2, 290);
    ctx.fillText('100%の正答率で修了されました', width / 2, 320);
    // Course title
    ctx.font = 'bold 28px sans-serif';
    ctx.fillStyle = '#047857';
    ctx.fillText(`「${this.questionSet?.title || 'ネットワーク構築課題②'}」`, width / 2, 370);
    // Date
    const now = new Date();
    const dateStr = now.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    ctx.font = '18px sans-serif';
    ctx.fillStyle = '#6b7280';
    ctx.fillText(`発行日: ${dateStr}`, width / 2, 450);
    // Site name
    ctx.font = 'bold 20px sans-serif';
    ctx.fillStyle = '#059669';
    ctx.fillText('じょうほうらいふ', width / 2, 520);
    // --- なりすまし防止情報 ---
    // 追跡情報を収集
    const trackingInfo = this.generateTrackingInfo();
    // 下端に追跡情報を小さく表示（黄色で見やすく）
    ctx.font = '10px monospace';
    ctx.fillStyle = '#f59e0b';
    ctx.textAlign = 'left';
    const bottomY = height - 40;
    ctx.fillText(`発行時刻: ${trackingInfo.timestamp}`, 43, bottomY - 20);
    ctx.fillText(`アクセス元: ${trackingInfo.ipAddress}`, 43, bottomY - 5);
    ctx.textAlign = 'right';
    ctx.fillText(`端末: ${trackingInfo.userAgent}`, width - 43, bottomY - 20);
    ctx.fillText(`画面: ${trackingInfo.screenInfo}`, width - 43, bottomY - 5);
    // 中央下部に端末識別コードを配置
    ctx.textAlign = 'center';
    ctx.fillText(`端末識別: ${trackingInfo.deviceUserHash}`, width / 2, bottomY + 12);
    // Decorative elements
    ctx.fillStyle = '#10b981';
    ctx.beginPath();
    ctx.arc(150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#059669';
    ctx.beginPath();
    ctx.arc(width - 150, 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#047857';
    ctx.beginPath();
    ctx.arc(150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = '#065f46';
    ctx.beginPath();
    ctx.arc(width - 150, height - 150, 20, 0, 2 * Math.PI);
    ctx.fill();
  }

  downloadCertificate() {
    const canvas = document.getElementById('certificate-canvas');
    if (!canvas) return;
    // Create download link
    const link = document.createElement('a');
    link.download = `修了証_${this.questionSet?.title || 'ネットワーク構築課題②'}_${this.userName}_${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL('image/png');
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  generateTrackingInfo() {
    const now = new Date();
    // IPアドレス取得（非同期だが、できる限り試行）
    let ipAddress = this.cachedIpAddress || 'N/A';
    if (!this.cachedIpAddress) {
      this.tryGetIPAddress();
    }
    // User-Agent情報の簡略化
    const userAgent = navigator.userAgent;
    const browserInfo = userAgent.includes('Chrome') ? 'Chrome' :
                       userAgent.includes('Firefox') ? 'Firefox' :
                       userAgent.includes('Safari') ? 'Safari' : 'Other';
    const osInfo = userAgent.includes('Windows') ? 'Win' :
                   userAgent.includes('Mac') ? 'Mac' :
                   userAgent.includes('Linux') ? 'Linux' : 'Other';
    // セッションID（ページ読み込み時に生成）
    if (!this.sessionId) {
      this.sessionId = this.generateSessionId();
    }
    // 端末識別コード（ブラウザフィンガープリントのみ）
    const deviceUserHash = this.generateDeviceUserHash(this.userName);
    return {
      timestamp: now.toLocaleString('ja-JP', {
        year: '2-digit',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      ipAddress: ipAddress,
      userAgent: `${browserInfo}/${osInfo}`,
      screenInfo: `${screen.width}x${screen.height}`,
      sessionId: this.sessionId,
      deviceUserHash: deviceUserHash
    };
  }

  generateSessionId() {
    // 8桁のランダムなセッションID
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  }

  generateDeviceUserHash(userName) {
    // 永続化された端末IDを使用
    return this.getOrCreateDeviceId();
  }

  getOrCreateDeviceId() {
    // ローカルストレージから端末IDを取得、なければ新規作成
    const DEVICE_ID_KEY = 'joholife_device_id';
    let deviceId = localStorage.getItem(DEVICE_ID_KEY);
    if (!deviceId) {
      // 初回アクセス時: 高精度フィンガープリンティングで端末IDを生成
      console.log('端末ID初回生成中...');
      const fingerprint = this.generateBrowserFingerprint();
      deviceId = this.generateHash(fingerprint).substr(0, 8).toUpperCase();
      // ローカルストレージに保存
      localStorage.setItem(DEVICE_ID_KEY, deviceId);
      console.log('端末ID生成完了:', deviceId);
    } else {
      console.log('保存済み端末IDを使用:', deviceId);
    }
    return deviceId;
  }

  generateBrowserFingerprint() {
    // 基本的なブラウザ情報
    const basicFingerprint = {
      userAgent: navigator.userAgent || 'unknown',
      language: navigator.language || 'unknown',
      languages: navigator.languages ? navigator.languages.join(',') : 'unknown',
      platform: navigator.platform || 'unknown',
      vendor: navigator.vendor || 'unknown',
      cookieEnabled: navigator.cookieEnabled || false,
      doNotTrack: navigator.doNotTrack || 'unknown',
      screenResolution: `${screen.width}x${screen.height}` || 'unknown',
      colorDepth: screen.colorDepth || 'unknown',
      pixelDepth: screen.pixelDepth || 'unknown',
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'unknown',
      touchSupport: 'ontouchstart' in window || navigator.maxTouchPoints > 0 ? 'yes' : 'no',
      hardwareConcurrency: navigator.hardwareConcurrency || 'unknown',
      pixelRatio: window.devicePixelRatio || 1,
      plugins: this.getPluginsList()
    };
    // Canvas Fingerprinting - GPU固有の描画特性
    const canvasFingerprint = this.generateCanvasFingerprint();
    // WebGL Fingerprinting - グラフィックカード情報
    const webglFingerprint = this.generateWebGLFingerprint();
    // Audio Context Fingerprinting - オーディオ処理の特性
    const audioFingerprint = this.generateAudioFingerprint();
    // すべてのフィンガープリントを組み合わせ
    const combinedFingerprint = {
      basic: basicFingerprint,
      canvas: canvasFingerprint,
      webgl: webglFingerprint,
      audio: audioFingerprint
    };
    return this.generateHash(JSON.stringify(combinedFingerprint)).substr(0, 12);
  }

  getPluginsList() {
    try {
      return Array.from(navigator.plugins || [])
        .map(plugin => plugin.name)
        .sort()
        .join(',');
    } catch (e) {
      return 'unknown';
    }
  }

  generateCanvasFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      // 複雑な描画パターンを作成
      canvas.width = 200;
      canvas.height = 50;
      // テキスト描画（フォントレンダリングの違いを検出）
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillText('Canvas fingerprint test 🎯', 2, 2);
      // 図形描画（アンチエイリアシングの違いを検出）
      ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
      ctx.fillRect(50, 1, 62, 20);
      return this.generateHash(canvas.toDataURL()).substr(0, 8);
    } catch (e) {
      return 'canvas_error';
    }
  }

  generateWebGLFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) return 'no_webgl';
      const webglInfo = {
        vendor: gl.getParameter(gl.VENDOR),
        renderer: gl.getParameter(gl.RENDERER),
        version: gl.getParameter(gl.VERSION),
        shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
        maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
        maxViewportDims: gl.getParameter(gl.MAX_VIEWPORT_DIMS),
        aliasedLineWidthRange: gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE),
        aliasedPointSizeRange: gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE),
        maxVertexAttribs: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
        maxVertexUniformVectors: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
        maxFragmentUniformVectors: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),
        maxVaryingVectors: gl.getParameter(gl.MAX_VARYING_VECTORS)
      };
      // 拡張機能情報も追加
      const extensions = gl.getSupportedExtensions();
      webglInfo.extensions = extensions ? extensions.sort().join(',') : '';
      return this.generateHash(JSON.stringify(webglInfo)).substr(0, 8);
    } catch (e) {
      return 'webgl_error';
    }
  }

  generateAudioFingerprint() {
    try {
      // Audio Context APIを使用してオーディオフィンガープリントを生成
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const audioInfo = {
        sampleRate: audioContext.sampleRate,
        maxChannelCount: audioContext.destination.maxChannelCount,
        numberOfInputs: audioContext.destination.numberOfInputs,
        numberOfOutputs: audioContext.destination.numberOfOutputs,
        channelCount: audioContext.destination.channelCount,
        channelCountMode: audioContext.destination.channelCountMode,
        channelInterpretation: audioContext.destination.channelInterpretation
      };
      return this.generateHash(JSON.stringify(audioInfo)).substr(0, 8);
    } catch (e) {
      return 'audio_error';
    }
  }

  generateHash(input) {
    // 改良されたハッシュ関数
    let hash = 0;
    if (input.length === 0) return hash.toString();
    for (let i = 0; i < input.length; i++) {
      const char = input.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32bit integer
    }
    return Math.abs(hash).toString(16);
  }
}

// File handling functions
window.handleFileDrop = function(event) {
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0];
    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      processFile(file);
    } else {
      alert('JSONファイルを選択してください。');
    }
  }
};

window.handleFileSelect = function(event) {
  const files = event.target.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
};

function processFile(file) {
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const networkData = JSON.parse(e.target.result);
      console.log('Uploaded network data:', networkData);

      networkQuizSession.currentUploadedFile = networkData;

      const fileInfo = document.getElementById('file-info');
      const fileName = document.getElementById('file-name');
      const submitButton = document.getElementById('submit-button');

      if (fileInfo && fileName && submitButton) {
        fileName.textContent = file.name;
        fileInfo.style.display = 'block';

        submitButton.disabled = false;
        submitButton.className = 'btn btn-primary';
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';

        submitButton.replaceWith(submitButton.cloneNode(true));
        const newSubmitButton = document.getElementById('submit-button');
        newSubmitButton.addEventListener('click', () => {
          if (networkQuizSession) {
            networkQuizSession.evaluateNetwork();
          }
        });
      }

    } catch (error) {
      console.error('Error parsing JSON:', error);
      alert('JSONファイルの形式が正しくありません。ネットワークシミュレータからエクスポートしたファイルを使用してください。');
    }
  };

  reader.readAsText(file);
}

let networkQuizSession;

function downloadTemplateJSON() {
  // Template JSON for network troubleshooting exercise 2 (with intentional issues to fix)
  const templateData = {
    version: "1.0",
    timestamp: new Date().toISOString(),
    devices: [
      {
        id: "pc-1758565801047",
        type: "pc",
        name: "PC-1",
        x: 129.5,
        y: 157.5,
        width: 80,
        height: 70,
        config: {
          ipAddress: "192.168.1.100",
          subnetMask: "255.255.255.0",
          defaultGateway: "192.168.1.1",
          dhcpEnabled: false,
          lan1: {
            ipAddress: "192.168.1.100",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan2: {
            ipAddress: "192.168.2.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan3: {
            ipAddress: "192.168.3.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          dhcpLeaseTime: 3600,
          dhcpServerEnabled: false,
          dhcpPoolStart: "192.168.1.100",
          dhcpPoolEnd: "192.168.1.199",
          internetDevice: null,
          dhcp: {}
        },
        dnsTable: {},
        ports: {
          nics: [
            {
              id: "eth",
              x: 1,
              y: 0.7672811059907835,
              side: "right",
              connectedId: "conn_1758581993686"
            }
          ]
        }
      },
      {
        id: "pc-1758565801774",
        type: "pc",
        name: "PC-2",
        x: 122.5,
        y: 288,
        width: 80,
        height: 70,
        config: {
          ipAddress: "192.168.1.101",
          subnetMask: "255.255.255.0",
          defaultGateway: "192.168.1.1",
          dhcpEnabled: false,
          lan1: {
            ipAddress: "192.168.1.101",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan2: {
            ipAddress: "192.168.2.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan3: {
            ipAddress: "192.168.3.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          dhcpLeaseTime: 3600,
          dhcpServerEnabled: false,
          dhcpPoolStart: "192.168.1.100",
          dhcpPoolEnd: "192.168.1.199",
          internetDevice: null,
          dhcp: {}
        },
        dnsTable: {},
        ports: {
          nics: [
            {
              id: "eth",
              x: 1,
              y: 0.24285714285714285,
              side: "right",
              connectedId: "conn_1758581995711"
            }
          ]
        }
      },
      {
        id: "pc-1758565819395",
        type: "pc",
        name: "PC-3",
        x: 385,
        y: 230,
        width: 80,
        height: 70,
        config: {
          ipAddress: "192.168.2.102", // Issue: Wrong subnet (should be 192.168.1.x)
          subnetMask: "255.255.255.0",
          defaultGateway: "192.168.1.1",
          dhcpEnabled: false,
          lan1: {
            ipAddress: "192.168.2.102",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan2: {
            ipAddress: "192.168.2.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan3: {
            ipAddress: "192.168.3.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          dhcpLeaseTime: 3600,
          dhcpServerEnabled: false,
          dhcpPoolStart: "192.168.1.100",
          dhcpPoolEnd: "192.168.1.199",
          internetDevice: null,
          dhcp: {}
        },
        dnsTable: {},
        ports: {
          nics: [
            {
              id: "eth",
              x: 0,
              y: 0.5900432900432901,
              side: "left",
              connectedId: "conn_1758581998261"
            }
          ]
        }
      },
      {
        id: "switch-1758565804467",
        type: "switch",
        name: "スイッチ-1",
        x: 262.5,
        y: 225.5,
        width: 80,
        height: 70,
        config: {
          ipAddress: "192.168.1.10",
          subnetMask: "255.255.255.0",
          defaultGateway: "192.168.1.1",
          dhcpEnabled: false,
          lan1: {
            ipAddress: "192.168.1.10",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan2: {
            ipAddress: "192.168.2.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          lan3: {
            ipAddress: "192.168.3.1",
            dhcpEnabled: false,
            dhcpPoolStart: "192.168.1.100",
            dhcpPoolEnd: "192.168.1.199",
            dhcpAllocatedIPs: []
          },
          dhcpLeaseTime: 3600,
          dhcpServerEnabled: false,
          dhcpPoolStart: "192.168.1.100",
          dhcpPoolEnd: "192.168.1.199",
          internetDevice: null,
          dhcp: {}
        },
        dnsTable: {},
        ports: {
          nics: [
            {
              id: "port1",
              x: 0,
              y: 0.15,
              connectedId: "conn_1758581993686"
            },
            {
              id: "port2",
              x: 0,
              y: 0.35,
              connectedId: null
            },
            {
              id: "port3",
              x: 0,
              y: 0.55,
              connectedId: null
            },
            {
              id: "port4",
              x: 0,
              y: 0.75,
              connectedId: "conn_1758581995711"
            },
            {
              id: "port5",
              x: 1,
              y: 0.15,
              connectedId: null
            },
            {
              id: "port6",
              x: 1,
              y: 0.35,
              connectedId: null
            },
            {
              id: "port7",
              x: 1,
              y: 0.55,
              connectedId: null
            },
            {
              id: "port8",
              x: 1,
              y: 0.75,
              connectedId: "conn_1758581998261"
            }
          ]
        }
      }
    ],
    connections: [
      {
        id: "conn_1758581993686",
        from: {
          deviceId: "pc-1758565801047",
          portId: "eth"
        },
        to: {
          deviceId: "switch-1758565804467",
          portId: "port1"
        }
      },
      {
        id: "conn_1758581995711",
        from: {
          deviceId: "pc-1758565801774",
          portId: "eth"
        },
        to: {
          deviceId: "switch-1758565804467",
          portId: "port4"
        }
      },
      {
        id: "conn_1758581998261",
        from: {
          deviceId: "pc-1758565819395",
          portId: "eth"
        },
        to: {
          deviceId: "switch-1758565804467",
          portId: "port8"
        }
      }
    ]
  };

  // Create and download the JSON file
  const dataStr = JSON.stringify(templateData, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(dataBlob);

  const link = document.createElement('a');
  link.href = url;
  link.download = 'network-troubleshooting-template.json';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

document.addEventListener('DOMContentLoaded', () => {
  networkQuizSession = new NetworkQuizSession();
});
</script>

<style>
#file-drop-zone:hover {
  border-color: var(--primary-color) !important;
  background: var(--primary-bg-light) !important;
}

.btn {
  display: inline-flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.btn-secondary {
  background: var(--surface);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.btn-secondary:hover {
  background: var(--border);
}

.card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

:root {
  --primary-color: #3b82f6;
  --secondary-color: #10b981;
  --accent-color: #f59e0b;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-muted: #9ca3af;
  --surface: #f9fafb;
  --border: #e5e7eb;
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --primary-bg-light: rgba(59, 130, 246, 0.1);
}
</style>