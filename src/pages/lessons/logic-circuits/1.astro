---
const title = "論理回路と論理式の基礎";
const description = "論理回路の基本ゲートから論理式の書き方まで、コンピュータの思考の仕組みを学習します";
const chapter = "logic-circuits";
const slideNumber = 1;
const totalSlides = 9;
const estimatedTime = 25;

const slides = [
  {
    id: 1,
    title: "学習目標",
    content: `
      <div>
        <h1>論理回路と論理式の基礎</h1>
        <h2>🎯 学習目標</h2>
        <p>この単元では、コンピュータがどのように判断や計算を行うのかを、論理回路と論理式を通して学習します。</p>
        <div style="margin-top: 2rem; padding: 1.5rem; background: #f0f9ff; border-radius: 0.75rem; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9; margin-bottom: 1rem;">📚 このレッスンで学ぶこと</h3>
          <ul style="list-style: none; padding: 0;">
            <li style="margin-bottom: 0.5rem;">✓ 論理演算の基本概念（AND, OR, NOT）</li>
            <li style="margin-bottom: 0.5rem;">✓ 論理ゲートの記号と動作</li>
            <li style="margin-bottom: 0.5rem;">✓ 真理値表の読み方と作り方</li>
            <li style="margin-bottom: 0.5rem;">✓ 論理式の書き方と読み方</li>
            <li style="margin-bottom: 0.5rem;">✓ 身近な例での論理思考</li>
            <li>✓ 論理回路の実用例</li>
          </ul>
        </div>
        <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem; border: 1px solid #f59e0b;">
          <h3>⏱️ 推定学習時間</h3>
          <p style="font-size: 1.1rem; font-weight: 600;">約20分</p>
        </div>
      </div>
    `
  },
  {
    id: 2,
    title: "論理演算とは",
    content: `
      <div>
        <h1>論理演算とは何か？</h1>
        <div style="text-align: center; margin: 2rem 0;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem; border-radius: 1rem;">
            <h2 style="color: white; margin-bottom: 1rem;">🤔 日常の論理思考</h2>
            <p style="font-size: 1.2rem; color: rgba(255,255,255,0.9);">「雨が降っている」<strong>かつ</strong>「傘を持っていない」なら「濡れる」</p>
          </div>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1rem; margin: 2rem 0;">
          <div style="background: #f0fdf4; padding: 2rem; border-radius: 1rem; border: 1px solid #22c55e;">
            <h3 style="color: #22c55e; margin-bottom: 1rem;">🧠 人間の判断</h3>
            <p>「AかつB」「AまたはB」「Aでない」のような論理的な判断を日常的に行っています</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
              <strong>例：</strong><br>
              • 宿題が終わって<strong>かつ</strong>時間があるなら遊ぶ<br>
              • 電車<strong>または</strong>バスで学校に行く<br>
              • 雨が降って<strong>いない</strong>なら洗濯する
            </div>
          </div>
          <div style="background: #fef3c7; padding: 2rem; border-radius: 1rem; border: 1px solid #f59e0b;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">💻 コンピュータの判断</h3>
            <p>コンピュータも同じような論理的判断を、0と1を使って行います</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
              <strong>例：</strong><br>
              • パスワードが正しい<strong>かつ</strong>権限があるならログイン<br>
              • 在庫がある<strong>または</strong>予約可能なら注文受付<br>
              • エラーが<strong>ない</strong>なら処理続行
            </div>
          </div>
        </div>
        
        <div style="background: #fdf2f8; padding: 2rem; border-radius: 1rem; margin-top: 2rem; border: 1px solid #ec4899;">
          <h3 style="color: #ec4899;">💡 論理演算の特徴</h3>
          <p>論理演算は、複雑な条件を<strong>シンプルな規則</strong>の組み合わせで表現できます。これがコンピュータの基本的な思考プロセスです。</p>
        </div>
      </div>
    `
  },
  {
    id: 3,
    title: "基本的な論理ゲート",
    content: `
      <div>
        <h1>基本的な論理ゲート</h1>
        <p>論理ゲートは、論理演算を電子回路で実現するための基本部品です。</p>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin: 2rem 0;">
          <!-- ANDゲート -->
          <div style="background: #f0fdf4; padding: 2rem; border-radius: 1rem; border: 1px solid #22c55e;">
            <h3 style="color: #22c55e; margin-bottom: 1rem;">🔒 ANDゲート（論理積）</h3>
            <div style="text-align: center; margin: 1rem 0;">
              <svg width="120" height="80" style="background: white; border-radius: 0.5rem; padding: 0.5rem;">
                <path d="M10 20 L10 60 L50 60 A20 20 0 0 0 50 20 Z" fill="none" stroke="#22c55e" stroke-width="2"/>
                <line x1="0" y1="30" x2="10" y2="30" stroke="#22c55e" stroke-width="2"/>
                <line x1="0" y1="50" x2="10" y2="50" stroke="#22c55e" stroke-width="2"/>
                <line x1="70" y1="40" x2="85" y2="40" stroke="#22c55e" stroke-width="2"/>
                <text x="88" y="35" font-size="12" fill="#22c55e">Y</text>
                <text x="-8" y="25" font-size="12" fill="#22c55e">A</text>
                <text x="-8" y="55" font-size="12" fill="#22c55e">B</text>
              </svg>
            </div>
            <p><strong>動作：</strong>AとBが<strong>両方とも1</strong>のときだけ、出力Yが1になる</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace; font-size: 0.9rem;">
              <strong>真理値表：</strong><br>
              A | B | Y<br>
              0 | 0 | 0<br>
              0 | 1 | 0<br>
              1 | 0 | 0<br>
              1 | 1 | 1
            </div>
          </div>
          
          <!-- ORゲート -->
          <div style="background: #fef3c7; padding: 2rem; border-radius: 1rem; border: 1px solid #f59e0b;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">🚪 ORゲート（論理和）</h3>
            <div style="text-align: center; margin: 1rem 0;">
              <svg width="120" height="80" style="background: white; border-radius: 0.5rem; padding: 0.5rem;">
                <!-- ORゲートの本体 -->
                <path d="M10 20 Q30 15 50 20 Q65 30 70 40 Q65 50 50 60 Q30 65 10 60 Q25 40 10 20 Z" fill="none" stroke="#f59e0b" stroke-width="2"/>
                <!-- 入力側の凹み -->
                <path d="M10 20 Q25 40 10 60" fill="none" stroke="#f59e0b" stroke-width="2"/>
                <!-- 入力線 -->
                <line x1="0" y1="30" x2="15" y2="30" stroke="#f59e0b" stroke-width="2"/>
                <line x1="0" y1="50" x2="15" y2="50" stroke="#f59e0b" stroke-width="2"/>
                <!-- 出力線 -->
                <line x1="70" y1="40" x2="85" y2="40" stroke="#f59e0b" stroke-width="2"/>
                <!-- ラベル -->
                <text x="88" y="45" font-size="12" fill="#f59e0b">Y</text>
                <text x="-8" y="35" font-size="12" fill="#f59e0b">A</text>
                <text x="-8" y="55" font-size="12" fill="#f59e0b">B</text>
              </svg>
            </div>
            <p><strong>動作：</strong>AまたはBの<strong>どちらか一つでも1</strong>なら、出力Yが1になる</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace; font-size: 0.9rem;">
              <strong>真理値表：</strong><br>
              A | B | Y<br>
              0 | 0 | 0<br>
              0 | 1 | 1<br>
              1 | 0 | 1<br>
              1 | 1 | 1
            </div>
          </div>
          
          <!-- NOTゲート -->
          <div style="background: #fdf2f8; padding: 2rem; border-radius: 1rem; border: 1px solid #ec4899;">
            <h3 style="color: #ec4899; margin-bottom: 1rem;">🔄 NOTゲート（否定）</h3>
            <div style="text-align: center; margin: 1rem 0;">
              <svg width="120" height="80" style="background: white; border-radius: 0.5rem; padding: 0.5rem;">
                <polygon points="10,20 10,60 60,40" fill="none" stroke="#ec4899" stroke-width="2"/>
                <circle cx="65" cy="40" r="5" fill="none" stroke="#ec4899" stroke-width="2"/>
                <line x1="0" y1="40" x2="10" y2="40" stroke="#ec4899" stroke-width="2"/>
                <line x1="70" y1="40" x2="85" y2="40" stroke="#ec4899" stroke-width="2"/>
                <text x="88" y="35" font-size="12" fill="#ec4899">Y</text>
                <text x="-8" y="45" font-size="12" fill="#ec4899">A</text>
              </svg>
            </div>
            <p><strong>動作：</strong>入力Aを<strong>反転</strong>する。1なら0に、0なら1になる</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace; font-size: 0.9rem;">
              <strong>真理値表：</strong><br>
              A | Y<br>
              0 | 1<br>
              1 | 0
            </div>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 4,
    title: "真理値表の理解",
    content: `
      <div>
        <h1>真理値表を理解しよう</h1>
        <p>真理値表は、論理ゲートの動作を表で表したものです。すべての入力パターンに対する出力を確認できます。</p>
        
        <div style="background: #f0f9ff; padding: 2rem; border-radius: 1rem; margin: 2rem 0; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9;">📊 真理値表の読み方</h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem;">
              <h4 style="margin-bottom: 1rem;">ANDゲートの場合</h4>
              <table style="width: 100%; border-collapse: collapse; font-family: monospace;">
                <tr style="background: #f1f5f9;">
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">A</th>
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">B</th>
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">A・B</th>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #fef2f2;">0</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #fef2f2;">0</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #fef2f2;">0</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #f0fdf4; color: #22c55e; font-weight: bold;">1</td>
                </tr>
              </table>
              <p style="margin-top: 0.5rem; font-size: 0.9rem;">両方が1のときだけ出力が1</p>
            </div>
            
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem;">
              <h4 style="margin-bottom: 1rem;">ORゲートの場合</h4>
              <table style="width: 100%; border-collapse: collapse; font-family: monospace;">
                <tr style="background: #f1f5f9;">
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">A</th>
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">B</th>
                  <th style="border: 1px solid #cbd5e1; padding: 0.5rem;">A+B</th>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #fef2f2;">0</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #f0fdf4; color: #22c55e; font-weight: bold;">1</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">0</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #f0fdf4; color: #22c55e; font-weight: bold;">1</td>
                </tr>
                <tr>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center;">1</td>
                  <td style="border: 1px solid #cbd5e1; padding: 0.5rem; text-align: center; background: #f0fdf4; color: #22c55e; font-weight: bold;">1</td>
                </tr>
              </table>
              <p style="margin-top: 0.5rem; font-size: 0.9rem;">どちらかが1なら出力が1</p>
            </div>
          </div>
        </div>
        
        <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem; border: 1px solid #f59e0b;">
          <h3>💡 身近な例で考えてみよう</h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🔐 家の鍵（AND）</strong><br>
              正しい鍵 <strong>かつ</strong> 正しい向き<br>
              → 両方揃って初めて開く
            </div>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🚨 火災報知器（OR）</strong><br>
              煙を検知 <strong>または</strong> 熱を検知<br>
              → どちらか一つでも警報
            </div>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>💡 電気スイッチ（NOT）</strong><br>
              ON状態でない → OFF<br>
              OFF状態でない → ON
            </div>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 5,
    title: "論理式の書き方",
    content: `
      <div>
        <h1>論理式の書き方</h1>
        <p>論理回路の動作を数式のように表現するのが論理式です。記号を覚えて読み書きできるようになりましょう。</p>
        
        <div style="background: #f8fafc; padding: 2rem; border-radius: 1rem; margin: 2rem 0; border: 1px solid #e2e8f0;">
          <h3>📝 論理演算の記号</h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div style="background: #f0fdf4; padding: 1.5rem; border-radius: 0.75rem; text-align: center; border: 2px solid #22c55e;">
              <div style="font-size: 1.5rem; font-weight: bold; color: #22c55e;">・</div>
              <div style="font-size: 0.875rem; color: #6b7280;">AND演算</div>
              <div style="margin-top: 0.5rem; font-size: 1.2rem;">A・B</div>
              <div style="font-size: 0.8rem; margin-top: 0.3rem;">「AかつB」</div>
            </div>
            <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; text-align: center; border: 2px solid #f59e0b;">
              <div style="font-size: 1.5rem; font-weight: bold; color: #f59e0b;">+</div>
              <div style="font-size: 0.875rem; color: #6b7280;">OR演算</div>
              <div style="margin-top: 0.5rem; font-size: 1.2rem;">A+B</div>
              <div style="font-size: 0.8rem; margin-top: 0.3rem;">「AまたはB」</div>
            </div>
            <div style="background: #fdf2f8; padding: 1.5rem; border-radius: 0.75rem; text-align: center; border: 2px solid #ec4899;">
              <div style="font-size: 1.5rem; font-weight: bold; color: #ec4899;">‾</div>
              <div style="font-size: 0.875rem; color: #6b7280;">NOT演算</div>
              <div style="margin-top: 0.5rem; font-size: 1.2rem;">A̅</div>
              <div style="font-size: 0.8rem; margin-top: 0.3rem;">「Aでない」</div>
            </div>
          </div>
        </div>
        
        <div style="background: #f0f9ff; padding: 2rem; border-radius: 1rem; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9;">💡 論理式の例</h3>
          <div style="background: white; padding: 2rem; border-radius: 0.75rem; margin: 1rem 0;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem;">
              <div>
                <h4 style="color: #1f2937; margin-bottom: 1rem;">🏠 家のセキュリティシステム</h4>
                <div style="background: #f8fafc; padding: 1rem; border-radius: 0.5rem; font-family: monospace; margin-bottom: 1rem;">
                  Y = (A・B) + C
                </div>
                <p style="font-size: 0.9rem;">
                  <strong>A：</strong>ドアセンサー<br>
                  <strong>B：</strong>窓センサー<br>
                  <strong>C：</strong>人感センサー<br>
                  <strong>Y：</strong>警報装置<br><br>
                  「(ドアが開いて <strong>かつ</strong> 窓が開いている) <strong>または</strong> 人を感知」したら警報
                </p>
              </div>
              
              <div>
                <h4 style="color: #1f2937; margin-bottom: 1rem;">🚗 自動車の始動条件</h4>
                <div style="background: #f8fafc; padding: 1rem; border-radius: 0.5rem; font-family: monospace; margin-bottom: 1rem;">
                  Y = A・B̅・C
                </div>
                <p style="font-size: 0.9rem;">
                  <strong>A：</strong>キーが挿入されている<br>
                  <strong>B：</strong>ハンドブレーキ<br>
                  <strong>C：</strong>シートベルト<br>
                  <strong>Y：</strong>エンジン始動可能<br><br>
                  「キーがあって <strong>かつ</strong> ハンドブレーキが <strong>解除されていて</strong> <strong>かつ</strong> シートベルトをしている」ときエンジン始動可能
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem; border: 1px solid #f59e0b;">
          <h3>📚 論理式を読むコツ</h3>
          <ol style="margin-left: 1rem;">
            <li><strong>かっこ（）</strong>を最初に計算</li>
            <li><strong>・（AND）</strong>を次に計算</li>
            <li><strong>+（OR）</strong>を最後に計算</li>
            <li><strong>‾（NOT）</strong>は該当する文字の上に付ける</li>
          </ol>
        </div>
      </div>
    `
  },
  {
    id: 6,
    title: "論理式の法則",
    content: `
      <div>
        <h1>論理式の便利な法則</h1>
        <p>論理式には数学と同じように、計算を簡単にするための便利な法則があります。</p>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 1.5rem; margin: 2rem 0;">
          <!-- 基本的な法則 -->
          <div style="background: #f0fdf4; padding: 2rem; border-radius: 1rem; border: 1px solid #22c55e;">
            <h3 style="color: #22c55e; margin-bottom: 1rem;">🔄 基本的な法則</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4>可換則（順序を変えても同じ）</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 200px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    A・B = B・A<br>
                    A+B = B+A
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">例：「宿題をして<strong>かつ</strong>時間がある」=「時間があって<strong>かつ</strong>宿題をした」</p>
                </div>
                <div style="text-align: center;">
                  <svg width="200" height="100" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- マスクを使って正確な交集合を描画 -->
                      <mask id="intersectionMask1">
                        <rect width="200" height="100" fill="white"/>
                        <circle cx="50" cy="50" r="28" fill="black"/>
                      </mask>
                    </defs>
                    <!-- 全体背景 -->
                    <rect x="10" y="10" width="160" height="70" fill="white" stroke="#e5e7eb" stroke-width="1" rx="5"/>
                    
                    <!-- A∩B = B∩A を表現 -->
                    <!-- 集合A -->
                    <circle cx="50" cy="50" r="28" fill="#3b82f6" fill-opacity="0.2" stroke="#3b82f6" stroke-width="2"/>
                    <!-- 集合B -->
                    <circle cx="80" cy="50" r="28" fill="#ef4444" fill-opacity="0.2" stroke="#ef4444" stroke-width="2"/>
                    <!-- 交集合A∩B（Bを正確にマスク） -->
                    <circle cx="80" cy="50" r="28" fill="#22c55e" fill-opacity="0.6" mask="url(#intersectionMask1)"/>
                    
                    <text x="35" y="30" font-size="14" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="95" y="30" font-size="14" fill="#ef4444" font-weight="bold">B</text>
                    <text x="62" y="55" font-size="12" fill="white" font-weight="bold">A∩B</text>
                    <text x="130" y="45" font-size="10" fill="#666">A∩B = B∩A</text>
                    <text x="130" y="55" font-size="10" fill="#666">(可換則)</text>
                  </svg>
                </div>
              </div>
            </div>
            
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4>結合則（グループ分けを変えても同じ）</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 200px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    A・(B・C) = (A・B)・C<br>
                    A+(B+C) = (A+B)+C
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">例：(朝食を食べて<strong>かつ</strong>歯を磨いて)<strong>かつ</strong>学校に行く</p>
                </div>
                <div style="text-align: center;">
                  <svg width="160" height="80" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- 3つの集合の交集合を正確に計算 -->
                      <mask id="threewayMask">
                        <rect width="160" height="80" fill="white"/>
                        <circle cx="35" cy="35" r="22" fill="black"/>
                        <circle cx="55" cy="35" r="22" fill="black"/>
                        <circle cx="45" cy="55" r="22" fill="black"/>
                      </mask>
                      <mask id="intersectionAB">
                        <rect width="160" height="80" fill="white"/>
                        <circle cx="35" cy="35" r="22" fill="black"/>
                      </mask>
                      <mask id="intersectionBC">
                        <rect width="160" height="80" fill="white"/>
                        <circle cx="55" cy="35" r="22" fill="black"/>
                      </mask>
                    </defs>
                    <!-- 3つの円 -->
                    <circle cx="35" cy="35" r="22" fill="#3b82f6" fill-opacity="0.2" stroke="#3b82f6" stroke-width="2"/>
                    <circle cx="55" cy="35" r="22" fill="#ef4444" fill-opacity="0.2" stroke="#ef4444" stroke-width="2"/>
                    <circle cx="45" cy="55" r="22" fill="#f59e0b" fill-opacity="0.2" stroke="#f59e0b" stroke-width="2"/>
                    <!-- 正確な3つの集合の交集合 -->
                    <circle cx="45" cy="55" r="22" fill="#22c55e" fill-opacity="0.6" mask="url(#intersectionAB)"/>
                    <circle cx="45" cy="55" r="22" fill="#22c55e" fill-opacity="0.8" mask="url(#intersectionBC)"/>
                    <text x="25" y="25" font-size="10" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="65" y="25" font-size="10" fill="#ef4444" font-weight="bold">B</text>
                    <text x="45" y="75" font-size="10" fill="#f59e0b" font-weight="bold">C</text>
                    <text x="110" y="45" font-size="8" fill="#666">A∩B∩C</text>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 簡単化の法則 -->
          <div style="background: #fef3c7; padding: 2rem; border-radius: 1rem; border: 1px solid #f59e0b;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">✂️ 簡単化の法則</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4>吸収則（余計な条件を消去）</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 200px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    A・(A+B) = A<br>
                    A+(A・B) = A
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">例：「晴れで<strong>かつ</strong>(晴れ<strong>または</strong>暖かい)」= 単に「晴れ」</p>
                </div>
                <div style="text-align: center;">
                  <svg width="160" height="80" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- 吸収則のステップ表示 -->
                      <mask id="absorptionUnion">
                        <rect width="160" height="80" fill="white"/>
                        <!-- A∪Bの範囲 -->
                      </mask>
                    </defs>
                    <!-- A∪B（薄い灰色） -->
                    <circle cx="35" cy="40" r="25" fill="#e5e7eb" fill-opacity="0.3" stroke="#9ca3af" stroke-width="1"/>
                    <circle cx="55" cy="40" r="25" fill="#e5e7eb" fill-opacity="0.3" stroke="#9ca3af" stroke-width="1"/>
                    <!-- 結果のA（強調） -->
                    <circle cx="35" cy="40" r="25" fill="#3b82f6" fill-opacity="0.7" stroke="#3b82f6" stroke-width="3"/>
                    <!-- Bの輪郭のみ（薄く） -->
                    <circle cx="55" cy="40" r="25" fill="none" stroke="#ef4444" stroke-width="1" stroke-dasharray="2,2"/>
                    
                    <text x="20" y="25" font-size="12" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="70" y="25" font-size="10" fill="#ef4444">B</text>
                    <text x="85" y="35" font-size="7" fill="#666">A∩(A∪B)</text>
                    <text x="90" y="45" font-size="8" fill="#3b82f6" font-weight="bold">=A</text>
                    <text x="85" y="55" font-size="7" fill="#666">(吸収則)</text>
                  </svg>
                </div>
              </div>
            </div>
            
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4>自分自身との演算</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 200px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    A・A = A<br>
                    A+A = A
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">例：「晴れ<strong>かつ</strong>晴れ」= 単に「晴れ」</p>
                </div>
                <div style="text-align: center;">
                  <svg width="160" height="80" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <!-- 同じ円が2つ重なっている状態 -->
                    <circle cx="45" cy="40" r="25" fill="#3b82f6" fill-opacity="0.6" stroke="#3b82f6" stroke-width="2"/>
                    <circle cx="45" cy="40" r="25" fill="none" stroke="#3b82f6" stroke-width="2" stroke-dasharray="3,3"/>
                    <text x="35" y="25" font-size="12" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="53" y="25" font-size="10" fill="#3b82f6">≡A</text>
                    <text x="90" y="45" font-size="8" fill="#666">A∩A = A</text>
                    <text x="90" y="55" font-size="8" fill="#666">A∪A = A</text>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 1.5rem; margin: 2rem 0;">
          <!-- 分配則 -->
          <div style="background: #fdf2f8; padding: 2rem; border-radius: 1rem; border: 1px solid #ec4899;">
            <h3 style="color: #ec4899; margin-bottom: 1rem;">📐 分配則</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 250px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    A・(B+C) = (A・B)+(A・C)<br>
                    A+(B・C) = (A+B)・(A+C)
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">
                    <strong>例：</strong>「学校があって<strong>かつ</strong>(晴れ<strong>または</strong>暖かい)」<br>
                    = 「(学校があって<strong>かつ</strong>晴れ)<strong>または</strong>(学校があって<strong>かつ</strong>暖かい)」
                  </p>
                </div>
                <div style="text-align: center;">
                  <svg width="180" height="90" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- AとBの交集合マスク -->
                      <mask id="maskAB">
                        <rect width="180" height="90" fill="white"/>
                        <circle cx="40" cy="45" r="25" fill="black"/>
                      </mask>
                      <!-- AとCの交集合マスク -->
                      <mask id="maskAC">
                        <rect width="180" height="90" fill="white"/>
                        <circle cx="40" cy="45" r="25" fill="black"/>
                      </mask>
                    </defs>
                    <!-- 集合A -->
                    <circle cx="40" cy="45" r="25" fill="#3b82f6" fill-opacity="0.2" stroke="#3b82f6" stroke-width="2"/>
                    <!-- 集合B -->
                    <circle cx="70" cy="35" r="20" fill="#ef4444" fill-opacity="0.2" stroke="#ef4444" stroke-width="2"/>
                    <!-- 集合C -->
                    <circle cx="70" cy="55" r="20" fill="#f59e0b" fill-opacity="0.2" stroke="#f59e0b" stroke-width="2"/>
                    
                    <!-- A∩B（正確な交集合） -->
                    <circle cx="70" cy="35" r="20" fill="#22c55e" fill-opacity="0.7" mask="url(#maskAB)"/>
                    <!-- A∩C（正確な交集合） -->
                    <circle cx="70" cy="55" r="20" fill="#22c55e" fill-opacity="0.7" mask="url(#maskAC)"/>
                    
                    <text x="25" y="30" font-size="11" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="75" y="25" font-size="10" fill="#ef4444" font-weight="bold">B</text>
                    <text x="75" y="70" font-size="10" fill="#f59e0b" font-weight="bold">C</text>
                    <text x="100" y="35" font-size="7" fill="#666">A∩(B∪C)</text>
                    <text x="100" y="45" font-size="7" fill="#666">=(A∩B)∪(A∩C)</text>
                    <text x="100" y="55" font-size="7" fill="#666">(分配則)</text>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <!-- ド・モルガンの定理 -->
          <div style="background: #dbeafe; padding: 2rem; border-radius: 1rem; border: 1px solid #3b82f6;">
            <h3 style="color: #3b82f6; margin-bottom: 1rem;">🔀 ド・モルガンの定理</h3>
            <!-- 第1の法則 -->
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4 style="color: #3b82f6; margin-bottom: 1rem;">第1の法則：(A∪B)̅ = A̅∩B̅</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 250px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    (A+B)̅ = A̅・B̅
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">
                    <strong>例：</strong>「(晴れ<strong>または</strong>暖かい)でない」<br>
                    = 「晴れでない<strong>かつ</strong>暖かくない」
                  </p>
                </div>
                <div style="text-align: center;">
                  <svg width="180" height="100" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- A∪Bの補集合を正確に計算 -->
                      <mask id="unionComplement">
                        <rect x="10" y="10" width="120" height="70" fill="white"/>
                        <!-- A∪Bを黒で描画して除外 -->
                        <circle cx="50" cy="45" r="22" fill="black"/>
                        <circle cx="70" cy="45" r="22" fill="black"/>
                      </mask>
                    </defs>
                    <!-- 全体集合 -->
                    <rect x="10" y="10" width="120" height="70" fill="#f3f4f6" stroke="#9ca3af" stroke-width="2"/>
                    
                    <!-- A∪Bの補集合（緑色でハイライト） -->
                    <rect x="10" y="10" width="120" height="70" fill="#22c55e" fill-opacity="0.6" mask="url(#unionComplement)"/>
                    
                    <!-- 集合AとBの輪郭 -->
                    <circle cx="50" cy="45" r="22" fill="none" stroke="#3b82f6" stroke-width="2"/>
                    <circle cx="70" cy="45" r="22" fill="none" stroke="#ef4444" stroke-width="2"/>
                    
                    <text x="40" y="30" font-size="11" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="80" y="30" font-size="11" fill="#ef4444" font-weight="bold">B</text>
                    <text x="15" y="25" font-size="8" fill="#22c55e" font-weight="bold">A̅∩B̅</text>
                    <text x="140" y="35" font-size="7" fill="#666">(A∪B)̅</text>
                    <text x="140" y="45" font-size="7" fill="#666">=A̅∩B̅</text>
                    <text x="135" y="55" font-size="7" fill="#666">(法則1)</text>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- 第2の法則 -->
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <h4 style="color: #3b82f6; margin-bottom: 1rem;">第2の法則：(A∩B)̅ = A̅∪B̅</h4>
              <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 250px;">
                  <div style="font-family: monospace; margin: 0.5rem 0; font-size: 1.1rem;">
                    (A・B)̅ = A̅+B̅
                  </div>
                  <p style="font-size: 0.9rem; color: #6b7280;">
                    <strong>例：</strong>「(晴れ<strong>かつ</strong>暖かい)でない」<br>
                    = 「晴れでない<strong>または</strong>暖かくない」
                  </p>
                </div>
                <div style="text-align: center;">
                  <svg width="180" height="100" style="background: #f8fafc; border-radius: 0.5rem; padding: 0.5rem;">
                    <defs>
                      <!-- Aの補集合を作るマスク -->
                      <mask id="complementA">
                        <rect x="10" y="10" width="120" height="70" fill="white"/>
                        <circle cx="50" cy="45" r="22" fill="black"/>
                      </mask>
                      <!-- Bの補集合を作るマスク -->
                      <mask id="complementB">
                        <rect x="10" y="10" width="120" height="70" fill="white"/>
                        <circle cx="70" cy="45" r="22" fill="black"/>
                      </mask>
                    </defs>
                    <!-- 全体集合 -->
                    <rect x="10" y="10" width="120" height="70" fill="#f3f4f6" stroke="#9ca3af" stroke-width="2"/>
                    
                    <!-- A̅∪B̅ の表示：Aの補集合とBの補集合の和集合 -->
                    <!-- A̅（Aの補集合）を緑で表示 -->
                    <rect x="10" y="10" width="120" height="70" fill="#22c55e" fill-opacity="0.4" mask="url(#complementA)"/>
                    <!-- B̅（Bの補集合）を緑で表示 -->
                    <rect x="10" y="10" width="120" height="70" fill="#22c55e" fill-opacity="0.4" mask="url(#complementB)"/>
                    
                    <!-- 集合AとBの輪郭 -->
                    <circle cx="50" cy="45" r="22" fill="none" stroke="#3b82f6" stroke-width="2"/>
                    <circle cx="70" cy="45" r="22" fill="none" stroke="#ef4444" stroke-width="2"/>
                    
                    <text x="40" y="30" font-size="11" fill="#3b82f6" font-weight="bold">A</text>
                    <text x="80" y="30" font-size="11" fill="#ef4444" font-weight="bold">B</text>
                    <text x="15" y="25" font-size="8" fill="#22c55e" font-weight="bold">A̅∪B̅</text>
                    <text x="140" y="35" font-size="7" fill="#666">(A∩B)̅</text>
                    <text x="140" y="45" font-size="7" fill="#666">=A̅∪B̅</text>
                    <text x="135" y="55" font-size="7" fill="#666">(法則2)</text>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div style="background: #f0f9ff; padding: 2rem; border-radius: 1rem; margin-top: 2rem; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9;">💡 実用例：論理式の簡単化</h3>
          <div style="background: white; padding: 2rem; border-radius: 0.75rem; margin: 1rem 0;">
            <h4 style="margin-bottom: 1rem;">🏠 スマートホームの照明制御</h4>
            <div style="margin: 1rem 0;">
              <div style="background: #fef2f2; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0;">
                <strong>複雑な式：</strong>
                <div style="font-family: monospace; font-size: 1.1rem; margin: 0.5rem 0;">
                  照明ON = (人感センサー・夜間) + (人感センサー・(夜間+曇り))
                </div>
              </div>
              <div style="text-align: center; font-size: 1.5rem; margin: 1rem 0;">⬇️ 吸収則を適用</div>
              <div style="background: #f0fdf4; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0;">
                <strong>簡単化後：</strong>
                <div style="font-family: monospace; font-size: 1.1rem; margin: 0.5rem 0;">
                  照明ON = 人感センサー・(夜間+曇り)
                </div>
              </div>
              <p style="font-size: 0.9rem; color: #6b7280; margin-top: 1rem;">
                「人感センサーが反応して、かつ（夜間または曇り）」の時に照明がつく
              </p>
            </div>
          </div>
        </div>
        
        <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem; border: 1px solid #f59e0b;">
          <h3>🎯 法則を覚えるコツ</h3>
          <ul style="margin-left: 1rem;">
            <li><strong>可換則・結合則</strong>：算数の足し算・掛け算と同じ</li>
            <li><strong>吸収則</strong>：「当たり前のことは省略できる」</li>
            <li><strong>分配則</strong>：算数の分配法則と似ている</li>
            <li><strong>ド・モルガン</strong>：「全部の否定」は「それぞれの否定」になる</li>
          </ul>
        </div>
      </div>
    `
  },
  {
    id: 7,
    title: "インタラクティブ演習",
    content: `
      <div>
        <h1>論理ゲート演習</h1>
        <p>実際に論理ゲートの動作を試してみましょう！入力を変更して出力の変化を確認できます。</p>
        
        <div style="background: #f8fafc; padding: 2rem; border-radius: 1rem; margin: 2rem 0; border: 1px solid #e2e8f0;">
          <div id="logic-simulator">
            <h3>🎮 論理ゲート シミュレータ</h3>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0;">
              <!-- ANDゲートシミュレータ -->
              <div style="background: #f0fdf4; padding: 1.5rem; border-radius: 0.75rem; border: 2px solid #22c55e;">
                <h4 style="color: #22c55e; margin-bottom: 1rem;">🔒 ANDゲート</h4>
                <div style="text-align: center; margin: 1rem 0;">
                  <div style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin: 1rem 0;">
                    <div>
                      <div>A: <button onclick="toggleInput('and', 'A')" id="and-A" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 0.5rem; cursor: pointer;">0</button></div>
                      <div style="margin-top: 0.5rem;">B: <button onclick="toggleInput('and', 'B')" id="and-B" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 0.5rem; cursor: pointer;">0</button></div>
                    </div>
                    <div style="font-size: 2rem;">→</div>
                    <div>Y: <span id="and-output" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border-radius: 0.5rem; font-weight: bold;">0</span></div>
                  </div>
                </div>
                <div style="background: white; padding: 1rem; border-radius: 0.5rem; font-family: monospace; font-size: 0.9rem;">
                  <div id="and-formula" style="text-align: center; font-size: 1.1rem; margin-bottom: 0.5rem;">Y = A・B = 0・0 = 0</div>
                </div>
              </div>
              
              <!-- ORゲートシミュレータ -->
              <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; border: 2px solid #f59e0b;">
                <h4 style="color: #f59e0b; margin-bottom: 1rem;">🚪 ORゲート</h4>
                <div style="text-align: center; margin: 1rem 0;">
                  <div style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin: 1rem 0;">
                    <div>
                      <div>A: <button onclick="toggleInput('or', 'A')" id="or-A" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 0.5rem; cursor: pointer;">0</button></div>
                      <div style="margin-top: 0.5rem;">B: <button onclick="toggleInput('or', 'B')" id="or-B" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 0.5rem; cursor: pointer;">0</button></div>
                    </div>
                    <div style="font-size: 2rem;">→</div>
                    <div>Y: <span id="or-output" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border-radius: 0.5rem; font-weight: bold;">0</span></div>
                  </div>
                </div>
                <div style="background: white; padding: 1rem; border-radius: 0.5rem; font-family: monospace; font-size: 0.9rem;">
                  <div id="or-formula" style="text-align: center; font-size: 1.1rem; margin-bottom: 0.5rem;">Y = A+B = 0+0 = 0</div>
                </div>
              </div>
              
              <!-- NOTゲートシミュレータ -->
              <div style="background: #fdf2f8; padding: 1.5rem; border-radius: 0.75rem; border: 2px solid #ec4899;">
                <h4 style="color: #ec4899; margin-bottom: 1rem;">🔄 NOTゲート</h4>
                <div style="text-align: center; margin: 1rem 0;">
                  <div style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin: 1rem 0;">
                    <div>A: <button onclick="toggleInput('not', 'A')" id="not-A" style="padding: 0.5rem 1rem; background: #ef4444; color: white; border: none; border-radius: 0.5rem; cursor: pointer;">0</button></div>
                    <div style="font-size: 2rem;">→</div>
                    <div>Y: <span id="not-output" style="padding: 0.5rem 1rem; background: #22c55e; color: white; border-radius: 0.5rem; font-weight: bold;">1</span></div>
                  </div>
                </div>
                <div style="background: white; padding: 1rem; border-radius: 0.5rem; font-family: monospace; font-size: 0.9rem;">
                  <div id="not-formula" style="text-align: center; font-size: 1.1rem; margin-bottom: 0.5rem;">Y = A̅ = 0̅ = 1</div>
                </div>
              </div>
            </div>
            
            <div style="background: #dbeafe; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem;">
              <h4 style="color: #1e40af;">🎯 試してみよう！</h4>
              <ul style="margin-left: 1rem; color: #1e40af;">
                <li>ANDゲートで出力が1になるのはいつ？</li>
                <li>ORゲートで出力が0になるのはいつ？</li>
                <li>NOTゲートの入力と出力の関係は？</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 8,
    title: "実用例",
    content: `
      <div>
        <h1>論理回路の実用例</h1>
        <p>論理回路は身の回りの様々な電子機器で活用されています。具体例を見てみましょう。</p>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin: 2rem 0;">
          <!-- 自動販売機 -->
          <div style="background: #f0fdf4; padding: 2rem; border-radius: 1rem; border: 1px solid #22c55e;">
            <h3 style="color: #22c55e; margin-bottom: 1rem;">🥤 自動販売機</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <div style="font-family: monospace; font-size: 1.1rem; margin-bottom: 1rem; text-align: center;">
                商品提供 = (十分なお金 ・ 商品選択 ・ 在庫あり)
              </div>
              <p style="font-size: 0.9rem;">
                <strong>条件：</strong><br>
                • 投入金額が商品価格以上<br>
                • 商品ボタンが押された<br>
                • 選択した商品の在庫がある<br><br>
                3つすべてが満たされたとき商品が出てくる
              </p>
            </div>
          </div>
          
          <!-- エレベーター -->
          <div style="background: #fef3c7; padding: 2rem; border-radius: 1rem; border: 1px solid #f59e0b;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">🛗 エレベーター</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <div style="font-family: monospace; font-size: 1.1rem; margin-bottom: 1rem; text-align: center;">
                ドア開 = (到着階 ・ 停止状態 ・ ドア閉じボタン押されていない)
              </div>
              <p style="font-size: 0.9rem;">
                <strong>条件：</strong><br>
                • 目的の階に到着している<br>
                • エレベーターが完全に停止<br>
                • ドア閉じボタンが押されていない<br><br>
                安全のため複数条件をチェック
              </p>
            </div>
          </div>
          
          <!-- 洗濯機 -->
          <div style="background: #fdf2f8; padding: 2rem; border-radius: 1rem; border: 1px solid #ec4899;">
            <h3 style="color: #ec4899; margin-bottom: 1rem;">🧺 洗濯機</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <div style="font-family: monospace; font-size: 1.1rem; margin-bottom: 1rem; text-align: center;">
                運転開始 = (ドア閉 ・ 水量OK ・ スタートボタン)
              </div>
              <p style="font-size: 0.9rem;">
                <strong>条件：</strong><br>
                • ドアがしっかり閉まっている<br>
                • 適正な水量が確保されている<br>
                • スタートボタンが押された<br><br>
                事故防止のための安全装置
              </p>
            </div>
          </div>
          
          <!-- スマートフォン -->
          <div style="background: #dbeafe; padding: 2rem; border-radius: 1rem; border: 1px solid #3b82f6;">
            <h3 style="color: #3b82f6; margin-bottom: 1rem;">📱 スマートフォン</h3>
            <div style="background: white; padding: 1.5rem; border-radius: 0.75rem; margin: 1rem 0;">
              <div style="font-family: monospace; font-size: 1.1rem; margin-bottom: 1rem; text-align: center;">
                ロック解除 = (指紋認証 + 顔認証 + パスワード)
              </div>
              <p style="font-size: 0.9rem;">
                <strong>条件：</strong><br>
                • 指紋認証が成功<br>
                • <strong>または</strong> 顔認証が成功<br>
                • <strong>または</strong> 正しいパスワード入力<br><br>
                複数の認証方法から選択可能
              </p>
            </div>
          </div>
        </div>
        
        <div style="background: #f0f9ff; padding: 2rem; border-radius: 1rem; margin-top: 2rem; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9;">🚀 最新技術での活用</h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🤖 AI・機械学習</strong><br>
              ニューラルネットワークの基本単位として論理演算が使われている
            </div>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🔐 暗号化</strong><br>
              データの暗号化・復号化で複雑な論理演算を組み合わせて使用
            </div>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🎮 ゲーム開発</strong><br>
              キャラクターの行動判定やゲームルールの実装
            </div>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem;">
              <strong>🏭 IoT・制御システム</strong><br>
              工場の自動化やスマートホームでのセンサー制御
            </div>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 9,
    title: "まとめ",
    content: `
      <div>
        <h1>まとめ</h1>
        <div style="text-align: center; margin: 2rem 0;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem; border-radius: 1rem;">
            <h2 style="color: white; margin-bottom: 1rem;">🎉 お疲れ様でした！</h2>
            <p style="font-size: 1.2rem; color: rgba(255,255,255,0.9);">論理回路と論理式の基礎を学習しました</p>
          </div>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0;">
          <div style="background: #f0fdf4; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #22c55e;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🧠</div>
            <h3 style="color: #22c55e;">学んだこと</h3>
            <ul style="font-size: 0.9rem; margin-left: 1rem;">
              <li>論理演算の基本概念</li>
              <li>AND, OR, NOTゲート</li>
              <li>真理値表の読み方</li>
              <li>論理式の書き方</li>
            </ul>
          </div>
          
          <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #f59e0b;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">💡</div>
            <h3 style="color: #f59e0b;">重要なポイント</h3>
            <ul style="font-size: 0.9rem; margin-left: 1rem;">
              <li>論理演算は日常の判断と同じ</li>
              <li>0と1で複雑な条件を表現</li>
              <li>身の回りの機器で活用</li>
              <li>コンピュータの基本思考</li>
            </ul>
          </div>
          
          <div style="background: #fdf2f8; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #ec4899;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🚀</div>
            <h3 style="color: #ec4899;">次のステップ</h3>
            <ul style="font-size: 0.9rem; margin-left: 1rem;">
              <li>より複雑な論理回路</li>
              <li>組み合わせ回路の設計</li>
              <li>フリップフロップ回路</li>
              <li>プログラミングでの活用</li>
            </ul>
          </div>
        </div>
        
        <div style="background: #dbeafe; padding: 2rem; border-radius: 1rem; margin-top: 2rem; text-align: center;">
          <h3 style="color: #1e40af; margin-bottom: 1rem;">🎯 クイズに挑戦しよう！</h3>
          <p style="color: #1e40af;">学習した内容を問題演習で確認してみましょう。</p>
          <a href="/quiz/logic-circuits" style="display: inline-block; background: #3b82f6; color: white; padding: 1rem 2rem; border-radius: 0.5rem; text-decoration: none; margin-top: 1rem; font-weight: bold;">論理回路の問題に挑戦 →</a>
        </div>
        
        <div style="background: #f8fafc; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem; border: 1px solid #e2e8f0;">
          <h3>🔗 関連ツール</h3>
          <div style="display: flex; gap: 1rem; flex-wrap: wrap; margin-top: 1rem;">
            <a href="/logical-formula" style="background: #22c55e; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; text-decoration: none; font-size: 0.9rem;">論理式シミュレータ</a>
            <a href="/binary-simulator" style="background: #3b82f6; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; text-decoration: none; font-size: 0.9rem;">2進数シミュレータ</a>
          </div>
        </div>
      </div>
    `
  }
];
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  <link rel="stylesheet" href="/src/styles/lessons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8fafc;
      min-height: 100vh;
    }

    .lesson-container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* ヘッダー */
    .lesson-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .lesson-info h1 {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }

    .lesson-meta {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    .lesson-progress {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .progress-bar-container {
      width: 200px;
      height: 8px;
      background: rgba(255,255,255,0.3);
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-bar {
      height: 100%;
      background: white;
      transition: width 0.3s ease;
      border-radius: 4px;
    }

    .slide-counter {
      font-weight: 600;
      min-width: 60px;
    }

    /* メインコンテンツエリア */
    .lesson-main {
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .slides-container {
      flex: 1;
      position: relative;
      overflow: hidden;
    }

    .slide-content {
      display: none;
      padding: 3rem 2rem;
      height: 100%;
      overflow-y: auto;
      animation: fadeIn 0.5s ease-in-out;
    }

    .slide-content.active {
      display: block;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* ナビゲーション */
    .lesson-nav {
      background: #f8fafc;
      border-top: 1px solid #e2e8f0;
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .nav-btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 0.5rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 0.9rem;
    }

    .nav-btn:hover:not(:disabled) {
      transform: translateY(-1px);
    }

    .nav-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .nav-btn.primary {
      background: #3b82f6;
      color: white;
    }

    .nav-btn.secondary {
      background: #e5e7eb;
      color: #374151;
    }

    /* サムネイル */
    .thumbnails {
      display: flex;
      gap: 0.5rem;
      overflow-x: auto;
      padding: 0.5rem 0;
    }

    .thumbnail {
      min-width: 60px;
      height: 40px;
      background: #e5e7eb;
      border: 2px solid transparent;
      border-radius: 4px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: 600;
      color: #6b7280;
      transition: all 0.2s;
    }

    .thumbnail.active {
      background: #3b82f6;
      color: white;
      border-color: #1d4ed8;
    }

    .thumbnail:hover {
      background: #d1d5db;
    }

    .thumbnail.active:hover {
      background: #2563eb;
    }

    /* キーボードヒント */
    .keyboard-hints {
      font-size: 0.8rem;
      color: #6b7280;
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .keyboard-hints span {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .key {
      background: #f3f4f6;
      padding: 0.2rem 0.4rem;
      border-radius: 0.25rem;
      font-family: monospace;
      font-size: 0.7rem;
    }

    /* レスポンシブ */
    @media (max-width: 768px) {
      .lesson-header {
        padding: 1rem;
        text-align: center;
      }

      .lesson-info h1 {
        font-size: 1.2rem;
      }

      .progress-bar-container {
        width: 150px;
      }

      .slide-content {
        padding: 2rem 1rem;
      }

      .lesson-nav {
        padding: 1rem;
        flex-direction: column;
        align-items: stretch;
      }

      .nav-buttons {
        order: 1;
      }

      .thumbnails {
        order: 2;
        justify-content: center;
      }

      .keyboard-hints {
        order: 3;
        justify-content: center;
        font-size: 0.7rem;
      }
    }
  </style>
</head>
<body>
  <div class="lesson-container">
    <!-- ヘッダー -->
    <header class="lesson-header">
      <div class="lesson-info">
        <h1>{title}</h1>
        <div class="lesson-meta">
          {description} • 推定時間: {estimatedTime}分
        </div>
      </div>
      <div class="lesson-progress">
        <div class="progress-bar-container">
          <div id="progress-bar" class="progress-bar" style="width: 12.5%"></div>
        </div>
        <div id="slide-counter" class="slide-counter">1 / {totalSlides}</div>
      </div>
    </header>

    <!-- メインコンテンツ -->
    <main class="lesson-main">
      <div class="slides-container">
        {slides.map((slide, index) => (
          <div 
            class={`slide-content ${index === 0 ? 'active' : ''}`} 
            id={`slide-${index}`}
          >
            <div class="slide-inner" set:html={slide.content} />
          </div>
        ))}
      </div>
    </main>

    <!-- ナビゲーション -->
    <nav class="lesson-nav">
      <div class="nav-buttons">
        <button id="first-btn" class="nav-btn secondary" disabled>最初</button>
        <button id="prev-btn" class="nav-btn secondary" disabled>◀ 前へ</button>
        <button id="next-btn" class="nav-btn primary">次へ ▶</button>
        <button id="last-btn" class="nav-btn secondary">最後</button>
      </div>
      
      <div class="thumbnails" id="thumbnails-container">
        {slides.map((slide, index) => (
          <div 
            class={`thumbnail ${index === 0 ? 'active' : ''}`}
            data-slide={index}
            title={slide.title}
          >
            {index + 1}
          </div>
        ))}
      </div>
      
      <div class="keyboard-hints">
        <span><span class="key">←</span><span class="key">→</span>移動</span>
        <span><span class="key">Home</span>最初</span>
        <span><span class="key">End</span>最後</span>
        <span><span class="key">Space</span>次へ</span>
      </div>
    </nav>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let currentSlide = 0;
      const totalSlides = 9;

      // 論理ゲートシミュレータの状態
      const gateStates = {
        and: { A: 0, B: 0 },
        or: { A: 0, B: 0 },
        not: { A: 0 }
      };

      function updateUI() {
        // スライドカウンター更新
        document.getElementById('slide-counter').textContent = `${currentSlide + 1} / ${totalSlides}`;
        
        // プログレスバー更新
        const progress = ((currentSlide + 1) / totalSlides) * 100;
        document.getElementById('progress-bar').style.width = `${progress}%`;
        
        // ボタン状態更新
        document.getElementById('first-btn').disabled = currentSlide === 0;
        document.getElementById('prev-btn').disabled = currentSlide === 0;
        document.getElementById('last-btn').disabled = currentSlide === totalSlides - 1;
        
        // 次へボタンのテキスト更新
        const nextBtn = document.getElementById('next-btn');
        if (currentSlide === totalSlides - 1) {
          nextBtn.textContent = '完了 ✅';
          nextBtn.onclick = () => {
            alert('レッスン完了！お疲れ様でした！');
            window.location.href = '/lessons';
          };
        } else {
          nextBtn.textContent = '次へ ▶';
          nextBtn.onclick = nextSlide;
        }
        
        // サムネイル更新
        document.querySelectorAll('.thumbnail').forEach((thumb, index) => {
          thumb.classList.toggle('active', index === currentSlide);
        });
      }

      function showSlide(index) {
      document.querySelectorAll('.slide-content').forEach((slide, i) => {
        slide.classList.toggle('active', i === index);
      });
      currentSlide = index;
      updateUI();
      
      // 論理ゲートシミュレータの初期化（スライド7の場合）
      if (index === 6) {
        setTimeout(initLogicSimulator, 100);
      }
    }

      function nextSlide() {
      if (currentSlide < totalSlides - 1) {
        showSlide(currentSlide + 1);
      }
    }

      function prevSlide() {
      if (currentSlide > 0) {
        showSlide(currentSlide - 1);
      }
    }

      function goToSlide(index) {
      showSlide(index);
    }

      // キーボードナビゲーション
      document.addEventListener('keydown', (e) => {
      switch(e.key) {
        case 'ArrowLeft':
          prevSlide();
          break;
        case 'ArrowRight':
        case ' ':
          e.preventDefault();
          nextSlide();
          break;
        case 'Home':
          showSlide(0);
          break;
        case 'End':
          showSlide(totalSlides - 1);
          break;
      }
    });

      // ナビゲーションボタンイベント
      document.getElementById('first-btn').onclick = () => showSlide(0);
    document.getElementById('prev-btn').onclick = prevSlide;
    document.getElementById('next-btn').onclick = nextSlide;
    document.getElementById('last-btn').onclick = () => showSlide(totalSlides - 1);
    
      // サムネイルクリックイベント
      document.getElementById('thumbnails-container').addEventListener('click', (e) => {
      const thumbnail = e.target.closest('.thumbnail');
      if (thumbnail) {
        const slideIndex = parseInt(thumbnail.dataset.slide);
        goToSlide(slideIndex);
      }
    });

      // 論理ゲートシミュレータ関数
      function toggleInput(gate, input) {
        gateStates[gate][input] = 1 - gateStates[gate][input];
        updateGateSimulator(gate);
      }
      
      // グローバルスコープで利用可能にする
      window.toggleInput = toggleInput;

      function updateGateSimulator(gate) {
      const state = gateStates[gate];
      
      if (gate === 'and') {
        const output = state.A && state.B ? 1 : 0;
        updateButton(`${gate}-A`, state.A);
        updateButton(`${gate}-B`, state.B);
        updateOutput(`${gate}-output`, output);
        document.getElementById('and-formula').textContent = `Y = A・B = ${state.A}・${state.B} = ${output}`;
      } else if (gate === 'or') {
        const output = state.A || state.B ? 1 : 0;
        updateButton(`${gate}-A`, state.A);
        updateButton(`${gate}-B`, state.B);
        updateOutput(`${gate}-output`, output);
        document.getElementById('or-formula').textContent = `Y = A+B = ${state.A}+${state.B} = ${output}`;
      } else if (gate === 'not') {
        const output = state.A ? 0 : 1;
        updateButton(`${gate}-A`, state.A);
        updateOutput(`${gate}-output`, output);
        document.getElementById('not-formula').textContent = `Y = A̅ = ${state.A}̅ = ${output}`;
      }
    }

      function updateButton(id, value) {
      const button = document.getElementById(id);
      if (button) {
        button.textContent = value;
        button.style.background = value ? '#22c55e' : '#ef4444';
      }
    }

      function updateOutput(id, value) {
      const output = document.getElementById(id);
      if (output) {
        output.textContent = value;
        output.style.background = value ? '#22c55e' : '#ef4444';
      }
    }

      function initLogicSimulator() {
      // 各ゲートの初期状態を更新
      updateGateSimulator('and');
      updateGateSimulator('or');
      updateGateSimulator('not');
    }

      // 初期化
      updateUI();
    });
  </script>
</body>
</html>