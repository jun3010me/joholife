---
const title = "プログラミングとは何か";
const description = "プログラミングの基本概念と重要性について学習します";
const chapter = "programming-basics";
const slideNumber = 1;
const totalSlides = 5;
const estimatedTime = 5;

const slides = [
  {
    id: 1,
    title: "学習目標",
    content: `
      <div>
        <h1>プログラミングとは何か</h1>
        <h2>🎯 学習目標</h2>
        <p>この単元では、プログラミングの基本概念を理解し、なぜプログラミングが重要なのかを学習します。</p>
        <div style="margin-top: 2rem; padding: 1.5rem; background: #f0f9ff; border-radius: 0.75rem; border: 1px solid #0ea5e9;">
          <h3 style="color: #0ea5e9; margin-bottom: 1rem;">📚 このレッスンで学ぶこと</h3>
          <ul style="list-style: none; padding: 0;">
            <li style="margin-bottom: 0.5rem;">✓ プログラミングの定義と概念</li>
            <li style="margin-bottom: 0.5rem;">✓ 現代社会におけるプログラミングの重要性</li>
            <li style="margin-bottom: 0.5rem;">✓ プログラムの3つの基本要素</li>
            <li>✓ プログラミングの思考プロセス</li>
          </ul>
        </div>
      </div>
    `
  },
  {
    id: 2,
    title: "プログラミングの定義",
    content: `
      <div>
        <h1>プログラミングの定義</h1>
        <div style="text-align: center; margin: 2rem 0;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem; border-radius: 1rem; margin: 2rem 0;">
            <h2 style="color: white; margin-bottom: 1rem;">💻 プログラミングとは</h2>
            <p style="font-size: 1.25rem; line-height: 1.6; color: white;">コンピュータに対して「何をどのような順序で実行するか」を指示すること</p>
          </div>
        </div>
        <div>
          <p>私たちがコンピュータと対話するための言語として、</p>
          <p><strong>プログラミング言語</strong>を使用します。</p>
          <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem;">
            <h3>🗣️ 身近な例で考えてみよう</h3>
            <p>料理のレシピのように、コンピュータに「材料を準備して」「火をつけて」「10分煮込んで」といった具体的な手順を教えるのがプログラミングです。</p>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 3,
    title: "プログラミングの重要性",
    content: `
      <div>
        <h1>なぜプログラミングが重要なのか</h1>
        <p>現代社会では、あらゆる場面でコンピュータが活用されています：</p>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0;">
          <div style="background: #f0fdf4; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #22c55e;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🏦</div>
            <h3>銀行のATM</h3>
            <p>お金の入出金処理</p>
          </div>
          <div style="background: #eff6ff; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #3b82f6;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🚗</div>
            <h3>自動車</h3>
            <p>エンジン制御、ナビゲーション</p>
          </div>
          <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #f59e0b;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">📱</div>
            <h3>スマートフォン</h3>
            <p>アプリの動作</p>
          </div>
          <div style="background: #fdf2f8; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #ec4899;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🏥</div>
            <h3>病院</h3>
            <p>患者の記録管理、医療機器制御</p>
          </div>
        </div>
        <div style="text-align: center; background: #f1f5f9; padding: 1.5rem; border-radius: 0.75rem; margin-top: 2rem;">
          <p style="font-size: 1.1rem; font-weight: 600;">🌟 これらすべてがプログラムによって動作しています！</p>
        </div>
      </div>
    `
  },
  {
    id: 4,
    title: "プログラムの基本要素",
    content: `
      <div>
        <h1>プログラムの基本要素</h1>
        <p>すべてのプログラムは、次の3つの基本要素で構成されています：</p>
        <div style="margin: 2rem 0;">
          <div style="background: #f0f9ff; padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 1rem; border: 1px solid #0ea5e9;">
            <h3 style="color: #0ea5e9;">1. 順次処理（Sequential）</h3>
            <p>命令を上から下へ順番に実行する</p>
            <div style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace;">
              <div>1. コップを取る</div>
              <div>2. 水を注ぐ</div>
              <div>3. 水を飲む</div>
            </div>
          </div>
          <div style="background: #f0fdf4; padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 1rem; border: 1px solid #22c55e;">
            <h3 style="color: #22c55e;">2. 分岐処理（Selection）</h3>
            <p>条件によって実行する処理を変える</p>
            <pre style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">もし 雨が降っているなら
    傘を持つ
そうでなければ
    傘は持たない</pre>
          </div>
          <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #f59e0b;">
            <h3 style="color: #f59e0b;">3. 反復処理（Iteration）</h3>
            <p>同じ処理を繰り返す</p>
            <pre style="background: white; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">10回繰り返す:
    "こんにちは"と表示する</pre>
          </div>
        </div>
      </div>
    `
  },
  {
    id: 5,
    title: "プログラミングの思考プロセス",
    content: `
      <div>
        <h1>プログラミングの思考プロセス</h1>
        <div style="background: #fef3c7; padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 2rem; border: 1px solid #f59e0b;">
          <h2>💡 重要なポイント</h2>
          <p>プログラミングは単に「コードを書く」ことではありません。</p>
        </div>
        <div style="display: flex; align-items: center; justify-content: center; margin: 2rem 0; flex-wrap: wrap; gap: 1rem;">
          <div style="background: #dbeafe; padding: 1rem; border-radius: 0.5rem; text-align: center; min-width: 150px;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">🔍</div>
            <div style="font-weight: 600;">問題を分析</div>
          </div>
          <div style="font-size: 1.5rem; color: #6b7280;">→</div>
          <div style="background: #dcfce7; padding: 1rem; border-radius: 0.5rem; text-align: center; min-width: 150px;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">💡</div>
            <div style="font-weight: 600;">解決方法を考える</div>
          </div>
          <div style="font-size: 1.5rem; color: #6b7280;">→</div>
          <div style="background: #fef3c7; padding: 1rem; border-radius: 0.5rem; text-align: center; min-width: 150px;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">📝</div>
            <div style="font-weight: 600;">手順を整理</div>
          </div>
          <div style="font-size: 1.5rem; color: #6b7280;">→</div>
          <div style="background: #fdf2f8; padding: 1rem; border-radius: 0.5rem; text-align: center; min-width: 150px;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">⌨️</div>
            <div style="font-weight: 600;">コードで表現</div>
          </div>
        </div>
        <div style="text-align: center; background: #f1f5f9; padding: 2rem; border-radius: 0.75rem; margin-top: 2rem;">
          <h2>🎯 次のステップ</h2>
          <p style="font-size: 1.1rem;">次のレッスンでは、具体的にプログラミング言語を使って簡単なプログラムを作成してみましょう！</p>
          <div style="margin-top: 1.5rem; color: #6b7280;">
            <p>✅ 推定学習時間: 5分</p>
            <p>🎉 おつかれさまでした！</p>
          </div>
        </div>
      </div>
    `
  }
];
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <meta name="description" content={description}>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+JP:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', 'Noto Sans JP', sans-serif;
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: #f8fafc;
        overflow: hidden;
      }

      @media (max-width: 768px) {
        body {
          height: auto;
          min-height: 100vh;
          overflow: visible;
        }
      }

      /* ヘッダー */
      .slide-header {
        background: white;
        border-bottom: 1px solid #e2e8f0;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        z-index: 10;
      }

      .header-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
        height: 4rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .nav-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        background: white;
        color: #64748b;
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
      }

      .nav-btn:hover:not(:disabled) {
        background: #f1f5f9;
        border-color: #cbd5e1;
      }

      .nav-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .nav-btn.primary {
        background: #3b82f6;
        color: white;
        border-color: #3b82f6;
      }

      .nav-btn.primary:hover:not(:disabled) {
        background: #1d4ed8;
        border-color: #1d4ed8;
      }

      .lesson-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #374151;
        font-weight: 500;
      }

      .slide-counter {
        background: #f1f5f9;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 600;
        color: #475569;
      }

      .header-right {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .progress-container {
        height: 4px;
        background: #e2e8f0;
        position: relative;
      }

      .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6, #06b6d4);
        transition: width 0.3s ease;
      }

      /* メインエリア */
      .slide-main {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        overflow-y: auto;
        min-height: 0;
      }

      .slide-container {
        width: 100%;
        max-width: 900px;
        height: auto;
        min-height: 100%;
      }

      .slide-content {
        display: none;
        width: 100%;
        height: auto;
      }

      .slide-content.active {
        display: block;
      }

      .slide-inner {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        padding: 3rem;
        width: 100%;
        height: auto;
        min-height: 500px;
      }

      /* フッター */
      .slide-footer {
        background: white;
        border-top: 1px solid #e2e8f0;
        padding: 1rem;
      }

      .footer-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
      }

      .slide-thumbnails {
        display: flex;
        gap: 0.5rem;
        overflow-x: auto;
        padding: 0.5rem 0;
      }

      .thumbnail {
        min-width: 120px;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
      }

      .thumbnail:hover {
        border-color: #3b82f6;
        background: #f0f9ff;
      }

      .thumbnail.active {
        border-color: #3b82f6;
        background: #3b82f6;
        color: white;
      }

      .thumbnail-number {
        font-size: 0.75rem;
        font-weight: 600;
        opacity: 0.8;
      }

      .thumbnail-title {
        font-size: 0.75rem;
        margin-top: 0.25rem;
        line-height: 1.3;
      }

      .keyboard-hints {
        color: #64748b;
        font-size: 0.875rem;
        white-space: nowrap;
      }

      /* スライドコンテンツのスタイル */
      .slide-inner h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: #111827;
        margin-bottom: 2rem;
        text-align: center;
        border-bottom: 4px solid #3b82f6;
        padding-bottom: 1rem;
      }

      .slide-inner h2 {
        font-size: 1.75rem;
        font-weight: 600;
        color: #1f2937;
        margin-top: 2rem;
        margin-bottom: 1rem;
      }

      .slide-inner h3 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
      }

      .slide-inner p {
        color: #374151;
        line-height: 1.7;
        margin-bottom: 1rem;
        font-size: 1.1rem;
      }

      .slide-inner strong {
        color: #111827;
        font-weight: 600;
      }

      .slide-inner code {
        background: #f1f5f9;
        color: #e11d48;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.9em;
      }

      .slide-inner pre {
        background: #1e293b;
        color: #f1f5f9;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        overflow-x: auto;
      }

      /* レスポンシブ */
      @media (max-width: 768px) {
        .header-content {
          padding: 0 0.5rem;
        }

        .lesson-info span {
          display: none;
        }

        .slide-main {
          padding: 1rem;
        }

        .slide-inner {
          padding: 2rem 1.5rem;
          min-height: 400px;
        }

        .slide-thumbnails {
          display: none;
        }

        .keyboard-hints {
          font-size: 0.75rem;
        }

        .slide-inner h1 {
          font-size: 2rem;
        }
      }
    </style>
</head>

<body>
  <div class="slide-player">
    <!-- ヘッダー -->
    <header class="slide-header">
      <div class="header-content">
        <div class="header-left">
          <a href="/lessons" class="nav-btn">
            🏠 <span>レッスン一覧</span>
          </a>
          <div class="lesson-info">
            📖 <span>{title}</span>
          </div>
        </div>
        
        <div class="header-center">
          <span class="slide-counter" id="slide-counter">
            1 / {slides.length}
          </span>
        </div>
        
        <div class="header-right">
          <button onclick="goToSlide(0)" class="nav-btn" id="first-btn">
            ⏮️
          </button>
          <button onclick="prevSlide()" class="nav-btn" id="prev-btn">
            ◀️
          </button>
          <button onclick="nextSlide()" class="nav-btn primary" id="next-btn">
            次へ ▶️
          </button>
          <button onclick="goToSlide({slides.length - 1})" class="nav-btn" id="last-btn">
            ⏭️
          </button>
        </div>
      </div>
      
      <!-- プログレスバー -->
      <div class="progress-container">
        <div class="progress-bar" id="progress-bar"></div>
      </div>
    </header>

    <!-- スライドエリア -->
    <main class="slide-main">
      <div class="slide-container">
        {slides.map((slide, index) => (
          <div class={`slide-content ${index === 0 ? 'active' : ''}`} id={`slide-${index}`}>
            <div class="slide-inner">
              <div set:html={slide.content} />
            </div>
          </div>
        ))}
      </div>
    </main>

    <!-- フッター -->
    <footer class="slide-footer">
      <div class="footer-content">
        <div class="slide-thumbnails">
          {slides.map((slide, index) => (
            <button
              onclick={`goToSlide(${index})`}
              class={`thumbnail ${index === 0 ? 'active' : ''}`}
              id={`thumb-${index}`}
            >
              <div class="thumbnail-number">{index + 1}</div>
              <div class="thumbnail-title">{slide.title}</div>
            </button>
          ))}
        </div>
        
        <div class="keyboard-hints">
          🌟 キーボード: ← → スペース
        </div>
      </div>
    </footer>
  </div>

  <script define:vars={{ slides }}>
    let currentSlide = 0;
    const totalSlides = slides.length;

    function updateUI() {
      // スライドカウンター更新
      document.getElementById('slide-counter').textContent = `${currentSlide + 1} / ${totalSlides}`;
      
      // プログレスバー更新
      const progress = ((currentSlide + 1) / totalSlides) * 100;
      document.getElementById('progress-bar').style.width = `${progress}%`;
      
      // ボタン状態更新
      document.getElementById('first-btn').disabled = currentSlide === 0;
      document.getElementById('prev-btn').disabled = currentSlide === 0;
      document.getElementById('last-btn').disabled = currentSlide === totalSlides - 1;
      
      // 次へボタンのテキスト更新
      const nextBtn = document.getElementById('next-btn');
      nextBtn.textContent = currentSlide === totalSlides - 1 ? '完了 ✅' : '次へ ▶️';
      
      // スライド表示更新
      document.querySelectorAll('.slide-content').forEach((slide, index) => {
        if (index === currentSlide) {
          slide.classList.add('active');
        } else {
          slide.classList.remove('active');
        }
      });
      
      // サムネイル更新
      document.querySelectorAll('.thumbnail').forEach((thumb, index) => {
        thumb.classList.toggle('active', index === currentSlide);
      });
    }

    function nextSlide() {
      if (currentSlide < totalSlides - 1) {
        currentSlide++;
        updateUI();
      } else {
        // 完了時の処理
        window.location.href = '/lessons/programming-basics/2';
      }
    }

    function prevSlide() {
      if (currentSlide > 0) {
        currentSlide--;
        updateUI();
      }
    }

    function goToSlide(index) {
      if (index >= 0 && index < totalSlides) {
        currentSlide = index;
        updateUI();
      }
    }

    // キーボードショートカット
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight' || e.key === ' ') {
        e.preventDefault();
        nextSlide();
      } else if (e.key === 'ArrowLeft') {
        e.preventDefault();
        prevSlide();
      } else if (e.key === 'Home') {
        e.preventDefault();
        goToSlide(0);
      } else if (e.key === 'End') {
        e.preventDefault();
        goToSlide(totalSlides - 1);
      }
    });

    // グローバル関数として公開
    window.nextSlide = nextSlide;
    window.prevSlide = prevSlide;
    window.goToSlide = goToSlide;
  </script>
</body>
</html>