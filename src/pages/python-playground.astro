---
// python-playground.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Python プレイグラウンド">
    <div class="python-playground">
        <div class="playground-header">
            <h1>🐍 Python プレイグラウンド</h1>
            <p>ブラウザ上でPythonコードを実行してみよう！</p>
        </div>

        <div class="playground-content">
            <div class="code-section">
                <div class="section-header">
                    <h3>📝 コードエディタ</h3>
                    <div class="controls">
                        <button id="run-btn" class="btn btn-primary" disabled>
                            ▶️ 実行
                        </button>
                        <button id="clear-btn" class="btn btn-secondary">
                            🗑️ クリア
                        </button>
                        <button id="example-btn" class="btn btn-secondary">
                            📚 サンプル
                        </button>
                        <button id="save-btn" class="btn btn-success">
                            💾 保存
                        </button>
                        <button id="load-btn" class="btn btn-info">
                            📂 読込
                        </button>
                        <input type="file" id="file-input" accept=".py" style="display: none;">
                    </div>
                </div>
                <div id="code-editor-container">
                    <div id="code-editor"></div>
                </div>
            </div>

            <div class="output-section">
                <div class="section-header">
                    <h3>📤 実行結果</h3>
                    <div class="status">
                        <label class="error-lang-toggle">
                            <input type="checkbox" id="japanese-error-toggle" checked>
                            <span>エラーを日本語化する</span>
                        </label>
                        <span id="python-status">Pythonエンジンを読み込み中...</span>
                    </div>
                </div>
                <div id="output-area">
                    <div class="loading">
                        🔄 Pyodideを読み込んでいます...しばらくお待ちください
                    </div>
                </div>
            </div>
        </div>

        <div class="debug-panels">
            <div class="debug-panel">
                <div class="debug-header">
                    <h3>🔍 変数トラッカー</h3>
                </div>
                <div id="variable-tracker" class="debug-content">
                    <div class="debug-empty">変数はまだありません</div>
                </div>
            </div>

            <div class="debug-panel">
                <div class="debug-header">
                    <h3>🔄 ループ実行カウンター</h3>
                </div>
                <div id="loop-tracker" class="debug-content">
                    <div class="debug-empty">ループはまだ実行されていません</div>
                </div>
            </div>

            <div class="debug-panel">
                <div class="debug-header">
                    <h3>🔁 再帰トラッカー</h3>
                </div>
                <div id="recursion-tracker" class="debug-content">
                    <div class="debug-empty">再帰関数はまだ呼ばれていません</div>
                </div>
            </div>
        </div>

        <div class="help-section">
            <h3>💡 使い方</h3>
            <ul>
                <li><strong>print()</strong>: 文字列や値を出力します</li>
                <li><strong>input()</strong>: ユーザーからの入力を受け取ります</li>
                <li><strong>変数</strong>: name = "値" で変数を定義できます</li>
                <li><strong>計算</strong>: +, -, *, / などの演算子が使えます</li>
                <li><strong>繰り返し</strong>: for文やwhile文が使えます</li>
            </ul>
        </div>
    </div>

    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material-darker.min.css">
    
    <script>
        let pyodide = null;
        let inputQueue = [];
        let isWaitingForInput = false;
        let inputResolver = null;
        let codeEditor = null;
        let variableState = {};
        let loopCounts = {};
        let recursionData = {};
        let outputLineCount = 0;
        const MAX_OUTPUT_LINES = 10000; // 最大出力行数

        // CodeMirrorの読み込みと初期化
        async function initCodeEditor() {
            try {
                // CodeMirrorのスクリプトを読み込み
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/selection/active-line.min.js');
                
                // CodeMirrorエディタを初期化
                const editorElement = document.getElementById('code-editor');
                codeEditor = CodeMirror(editorElement, {
                    value: '',
                    mode: 'python',
                    theme: 'material-darker',
                    lineNumbers: true,
                    indentUnit: 4,
                    indentWithTabs: false,
                    autoCloseBrackets: true,
                    matchBrackets: true,
                    styleActiveLine: true,
                    lineWrapping: true,
                    viewportMargin: Infinity,
                    extraKeys: {
                        "Ctrl-Enter": function(cm) {
                            runCode();
                        },
                        "Tab": function(cm) {
                            // Tabキーでインデント
                            if (cm.somethingSelected()) {
                                cm.indentSelection("add");
                            } else {
                                cm.replaceSelection("    "); // 4スペース
                            }
                        },
                        "Shift-Tab": function(cm) {
                            // Shift+Tabでインデント解除
                            cm.indentSelection("subtract");
                        }
                    }
                });
                
                // エディタのサイズを強制的に調整
                setTimeout(() => {
                    const isMobile = window.innerWidth <= 768;
                    const height = isMobile ? 350 : 400;
                    codeEditor.setSize(null, height);
                    codeEditor.refresh();
                }, 100);
                
                // ウィンドウリサイズ時に高さを再調整
                window.addEventListener('resize', () => {
                    setTimeout(() => {
                        const isMobile = window.innerWidth <= 768;
                        const height = isMobile ? 350 : 400;
                        codeEditor.setSize(null, height);
                        codeEditor.refresh();
                    }, 100);
                });
                
                console.log('CodeMirror editor initialized');
                
            } catch (error) {
                console.error('Failed to initialize CodeMirror:', error);
                // フォールバック: 通常のtextareaを使用
                document.getElementById('code-editor').innerHTML = '<textarea id="fallback-editor" style="width:100%;height:400px;font-family:monospace;"></textarea>';
            }
        }

        // スクリプト読み込み用のヘルパー関数
        function loadScript(src) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }

        // Pyodideの読み込み
        async function loadPyodide() {
            try {
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                
                statusElement.textContent = 'Pythonエンジンを初期化中...';
                
                // PyodideをCDNから読み込み
                if (!window.loadPyodide) {
                    await loadScript('https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js');
                }

                statusElement.textContent = 'Python環境を構築中...';

                // Pyodideを初期化（グローバルのloadPyodide関数を使用）
                pyodide = await window.loadPyodide({
                    indexURL: "https://cdn.jsdelivr.net/pyodide/v0.24.1/full/",
                    stdout: (text) => {
                        // テキストを改行で分割して1行ずつ追加
                        const lines = text.split('\n');
                        for (let i = 0; i < lines.length; i++) {
                            if (i === lines.length - 1 && lines[i] === '') continue;
                            appendOutput(lines[i], 'stdout');
                        }
                    },
                    stderr: (text) => {
                        const lines = text.split('\n');
                        for (let i = 0; i < lines.length; i++) {
                            if (i === lines.length - 1 && lines[i] === '') continue;
                            appendOutput(lines[i], 'stderr');
                        }
                    }
                });

                // stdoutのバッファリングを無効化
                pyodide.runPython(`
import sys
import io

class UnbufferedTextIO(io.TextIOWrapper):
    def write(self, s):
        super().write(s)
        self.flush()
        return len(s)

sys.stdout = UnbufferedTextIO(sys.stdout.buffer, encoding='utf-8', line_buffering=False)
sys.stderr = UnbufferedTextIO(sys.stderr.buffer, encoding='utf-8', line_buffering=False)
                `);

                console.log('Pyodide loaded successfully');

                // input関数をオーバーライド
                pyodide.runPython(`
import builtins
from js import prompt

def custom_input(prompt_text=""):
    result = prompt(str(prompt_text))
    return result if result is not None else ""

# 組み込みのinput関数を置き換え
builtins.input = custom_input
                `);

                statusElement.textContent = '✅ Python準備完了';
                outputArea.innerHTML = '<div class="ready">Python環境が準備できました！コードを実行してみましょう。</div>';
                
                // 実行ボタンを有効化
                document.getElementById('run-btn').disabled = false;
                
            } catch (error) {
                console.error('Pyodide読み込みエラー:', error);
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                statusElement.textContent = '❌ 読み込み失敗';
                outputArea.innerHTML = `<div class="error">Pythonエンジンの読み込みに失敗しました。<br>エラー: ${error.message}<br>ページを再読み込みしてみてください。</div>`;
            }
        }

        // 出力エリアにテキストを追加（1行ずつリアルタイム）
        function appendOutput(text, type = 'stdout') {
            const outputArea = document.getElementById('output-area');

            // 最大行数チェック
            if (outputLineCount >= MAX_OUTPUT_LINES) {
                if (outputLineCount === MAX_OUTPUT_LINES) {
                    const warningLine = document.createElement('div');
                    warningLine.className = 'output-line info';
                    warningLine.textContent = `\n⚠️ 出力が${MAX_OUTPUT_LINES}行を超えました。これ以上の出力は省略されます。`;
                    outputArea.appendChild(warningLine);
                    outputLineCount++;
                }
                return;
            }

            // 「実行中...」メッセージを最初の出力で削除
            const runningMsg = outputArea.querySelector('.running-msg');
            if (runningMsg) {
                runningMsg.remove();
            }

            if (outputArea.querySelector('.loading') || outputArea.querySelector('.ready')) {
                outputArea.innerHTML = '';
            }

            // 1行ずつ即座に追加
            const outputLine = document.createElement('div');
            outputLine.className = `output-line ${type}`;
            outputLine.textContent = text;
            outputArea.appendChild(outputLine);

            outputLineCount++;

            // スクロールは適度に（100行ごと）
            if (outputLineCount % 100 === 0) {
                outputArea.scrollTop = outputArea.scrollHeight;
            }
        }

        // 変数トラッカーの更新
        function updateVariableTracker(variables) {
            const tracker = document.getElementById('variable-tracker');
            if (Object.keys(variables).length === 0) {
                tracker.innerHTML = '<div class="debug-empty">変数はまだありません</div>';
                return;
            }

            let html = '<div class="variable-list">';
            for (const [name, value] of Object.entries(variables)) {
                const valueStr = JSON.stringify(value);
                const typeStr = typeof value;
                html += `
                    <div class="variable-item">
                        <span class="var-name">${name}</span>
                        <span class="var-type">${typeStr}</span>
                        <span class="var-value">${valueStr}</span>
                    </div>
                `;
            }
            html += '</div>';
            tracker.innerHTML = html;
        }

        // ループカウンターの更新
        function updateLoopTracker(counts, codeLines, loopIterations) {
            const tracker = document.getElementById('loop-tracker');
            if (Object.keys(counts).length === 0) {
                tracker.innerHTML = '<div class="debug-empty">ループはまだ実行されていません</div>';
                return;
            }

            let html = '<div class="loop-list">';

            // ループごとにグループ化
            const loopGroups = {};
            for (const [line, count] of Object.entries(counts)) {
                // この行がどのループに属するか探す
                let belongsToLoop = null;
                for (const loopLine of Object.keys(loopIterations)) {
                    const loopLineNum = parseInt(loopLine);
                    const currentLineNum = parseInt(line);
                    if (currentLineNum > loopLineNum) {
                        belongsToLoop = loopLine;
                    }
                }

                if (!belongsToLoop) {
                    // ループ行から最も近いループを探す
                    const sortedLoops = Object.keys(loopIterations).map(Number).sort((a, b) => a - b);
                    for (const loopLine of sortedLoops) {
                        if (loopLine < parseInt(line)) {
                            belongsToLoop = loopLine.toString();
                        }
                    }
                }

                if (belongsToLoop) {
                    if (!loopGroups[belongsToLoop]) {
                        loopGroups[belongsToLoop] = [];
                    }
                    loopGroups[belongsToLoop].push([line, count]);
                }
            }

            // ループごとに表示
            for (const [loopLine, lines] of Object.entries(loopGroups)) {
                const loopLineNum = parseInt(loopLine);
                const loopCodeSnippet = codeLines[loopLineNum - 1] || '';
                const iterations = loopIterations[loopLine]?.iterations || 0;

                html += `
                    <div class="loop-group">
                        <div class="loop-header">
                            <span class="loop-header-line">行 ${loopLine}</span>
                            <span class="loop-iteration-count">🔄 ${iterations}回ループ</span>
                        </div>
                        <div class="loop-header-code">${escapeHtml(loopCodeSnippet.trim())}</div>
                `;

                // 行番号でソート
                const sortedLines = lines.sort((a, b) => parseInt(a[0]) - parseInt(b[0]));
                const maxCount = Math.max(...lines.map(l => l[1]));

                for (const [line, count] of sortedLines) {
                    const lineNum = parseInt(line);
                    const codeSnippet = codeLines[lineNum - 1] || '';
                    const trimmedCode = codeSnippet.trim();
                    const percentage = (count / maxCount) * 100;
                    const dots = '●'.repeat(Math.min(count, 10)) + (count > 10 ? '...' : '');

                    html += `
                        <div class="loop-item">
                            <div class="loop-info">
                                <span class="loop-line">行 ${line}</span>
                                <span class="loop-iterations">${dots}</span>
                                <span class="loop-count">${count}回</span>
                            </div>
                            <div class="loop-progress-bar">
                                <div class="loop-progress-fill" style="width: ${percentage}%"></div>
                            </div>
                            <div class="loop-code">${escapeHtml(trimmedCode)}</div>
                        </div>
                    `;
                }

                html += '</div>';
            }

            html += '</div>';
            tracker.innerHTML = html;
        }

        // HTMLエスケープ用ヘルパー関数
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Pythonエラーを日本語に翻訳
        function translatePythonError(errorMessage) {
            // エラーメッセージを行ごとに処理
            const lines = errorMessage.split('\n');
            const translatedLines = [];

            for (let line of lines) {
                let translatedLine = line;

                // よくあるエラーメッセージのパターンを日本語化
                const errorPatterns = [
                    // SyntaxError系（詳細版）
                    { pattern: /SyntaxError: invalid syntax\. Perhaps you forgot a comma\?/i, replacement: '文法エラー: カンマ（,）を忘れていませんか？' },
                    { pattern: /SyntaxError: expected ':'/i, replacement: '文法エラー: コロン（:）が必要です（if、for、while、def、classの後ろには必ずコロンが必要です）' },
                    { pattern: /SyntaxError: expected '\('/i, replacement: '文法エラー: 開き括弧 ( が必要です' },
                    { pattern: /SyntaxError: expected '\)'/i, replacement: '文法エラー: 閉じ括弧 ) が必要です' },
                    { pattern: /SyntaxError: '(.+?)' was never closed/i, replacement: '文法エラー: $1 が閉じられていません' },
                    { pattern: /SyntaxError: closing parenthesis '\)' does not match opening parenthesis '\['/i, replacement: '文法エラー: 括弧の種類が合っていません（[ で開いたら ] で閉じる必要があります）' },
                    { pattern: /SyntaxError: closing parenthesis '\)' does not match opening parenthesis '\{'/i, replacement: '文法エラー: 括弧の種類が合っていません（{ で開いたら } で閉じる必要があります）' },
                    { pattern: /SyntaxError: unmatched '\)'/i, replacement: '文法エラー: 閉じ括弧 ) に対応する開き括弧がありません' },
                    { pattern: /SyntaxError: unmatched '\]'/i, replacement: '文法エラー: 閉じ括弧 ] に対応する開き括弧がありません' },
                    { pattern: /SyntaxError: unmatched '\}'/i, replacement: '文法エラー: 閉じ括弧 } に対応する開き括弧がありません' },
                    { pattern: /SyntaxError: EOL while scanning string literal/i, replacement: '文法エラー: 文字列の閉じ括弧（\'または"）が足りません（文字列を開始したら同じ括弧で閉じる必要があります）' },
                    { pattern: /SyntaxError: unexpected EOF while parsing/i, replacement: '文法エラー: カッコや括弧が閉じられていません（プログラムの途中で終わっています）' },
                    { pattern: /SyntaxError: invalid character '(.+?)'/i, replacement: '文法エラー: 使えない文字「$1」が含まれています（全角文字や特殊文字が紛れ込んでいませんか？）' },
                    { pattern: /SyntaxError: invalid character in identifier/i, replacement: '文法エラー: 変数名や関数名に使えない文字が含まれています（全角文字が紛れ込んでいませんか？）' },
                    { pattern: /SyntaxError: cannot assign to (.+)/i, replacement: '文法エラー: $1 に値を代入することはできません' },
                    { pattern: /SyntaxError: invalid syntax/i, replacement: '文法エラー: 書き方が間違っています（コロン、括弧、カンマなどを確認してください）' },
                    { pattern: /SyntaxError: /i, replacement: '文法エラー: ' },

                    // NameError系
                    { pattern: /NameError: name '(.+?)' is not defined/i, replacement: '変数エラー: 「$1」という変数や関数が見つかりません（定義されていないか、スペルミスの可能性があります）' },
                    { pattern: /NameError: /i, replacement: '変数エラー: ' },

                    // TypeError系
                    { pattern: /TypeError: unsupported operand type\(s\) for \+: '(.+?)' and '(.+?)'/i, replacement: '型エラー: $1と$2を「+」で足すことはできません（異なる型同士の計算はできません）' },
                    { pattern: /TypeError: unsupported operand type\(s\) for -: '(.+?)' and '(.+?)'/i, replacement: '型エラー: $1と$2を「-」で引くことはできません（異なる型同士の計算はできません）' },
                    { pattern: /TypeError: unsupported operand type\(s\) for \*: '(.+?)' and '(.+?)'/i, replacement: '型エラー: $1と$2を「*」で掛けることはできません（異なる型同士の計算はできません）' },
                    { pattern: /TypeError: unsupported operand type\(s\) for \/: '(.+?)' and '(.+?)'/i, replacement: '型エラー: $1と$2を「/」で割ることはできません（異なる型同士の計算はできません）' },
                    { pattern: /TypeError: can only concatenate str .+ to str/i, replacement: '型エラー: 文字列には文字列しか連結できません（数値を連結したい場合は str() で文字列に変換してください）' },
                    { pattern: /TypeError: '(.+?)' object is not subscriptable/i, replacement: '型エラー: $1 には [ ] でアクセスできません（リストや文字列ではありません）' },
                    { pattern: /TypeError: '(.+?)' object is not callable/i, replacement: '型エラー: $1 は関数ではないので ( ) で呼び出せません' },
                    { pattern: /TypeError: (.+?)\(\) missing (\d+) required positional argument/i, replacement: '型エラー: $1() 関数に必要な引数が $2 個足りません' },
                    { pattern: /TypeError: (.+?)\(\) takes (\d+) positional argument but (\d+) were given/i, replacement: '型エラー: $1() 関数は $2 個の引数しか受け取れませんが、$3 個の引数が渡されています' },
                    { pattern: /TypeError: /i, replacement: '型エラー: ' },

                    // ValueError系
                    { pattern: /ValueError: invalid literal for int\(\) with base (.+?): '(.+?)'/i, replacement: '値エラー: 「$2」を数値（整数）に変換できません（数字以外の文字が含まれています）' },
                    { pattern: /ValueError: invalid literal for float\(\): '(.+?)'/i, replacement: '値エラー: 「$1」を小数（float）に変換できません（数字以外の文字が含まれています）' },
                    { pattern: /ValueError: not enough values to unpack \(expected (\d+), got (\d+)\)/i, replacement: '値エラー: 展開する値が足りません（$1個必要ですが、$2個しかありません）' },
                    { pattern: /ValueError: too many values to unpack \(expected (\d+)\)/i, replacement: '値エラー: 展開する値が多すぎます（$1個しか受け取れません）' },
                    { pattern: /ValueError: /i, replacement: '値エラー: ' },

                    // IndexError系
                    { pattern: /IndexError: list index out of range/i, replacement: 'インデックスエラー: リストの範囲外を参照しようとしています（リストの長さを超えた位置にアクセスしています）' },
                    { pattern: /IndexError: string index out of range/i, replacement: 'インデックスエラー: 文字列の範囲外を参照しようとしています（文字列の長さを超えた位置にアクセスしています）' },
                    { pattern: /IndexError: tuple index out of range/i, replacement: 'インデックスエラー: タプルの範囲外を参照しようとしています（タプルの長さを超えた位置にアクセスしています）' },
                    { pattern: /IndexError: /i, replacement: 'インデックスエラー: ' },

                    // KeyError系
                    { pattern: /KeyError: '(.+?)'/i, replacement: 'キーエラー: 辞書に「$1」というキーが存在しません（スペルミスや存在しないキーにアクセスしています）' },
                    { pattern: /KeyError: (\d+)/i, replacement: 'キーエラー: 辞書に $1 というキーが存在しません' },
                    { pattern: /KeyError: /i, replacement: 'キーエラー: ' },

                    // AttributeError系
                    { pattern: /AttributeError: '(.+?)' object has no attribute '(.+?)'/i, replacement: '属性エラー: $1 には「$2」という属性やメソッドがありません（スペルミスや存在しないメソッドを呼び出しています）' },
                    { pattern: /AttributeError: /i, replacement: '属性エラー: ' },

                    // ZeroDivisionError系
                    { pattern: /ZeroDivisionError: division by zero/i, replacement: 'ゼロ除算エラー: 0で割ることはできません（割る数が0になっていませんか？）' },
                    { pattern: /ZeroDivisionError: /i, replacement: 'ゼロ除算エラー: ' },

                    // IndentationError系
                    { pattern: /IndentationError: expected an indented block after '(.+?)'/i, replacement: 'インデントエラー: $1 の後にはインデント（字下げ）が必要です' },
                    { pattern: /IndentationError: expected an indented block/i, replacement: 'インデントエラー: ここにはインデント（字下げ）が必要です（if、for、while、def の次の行は必ず字下げします）' },
                    { pattern: /IndentationError: unexpected indent/i, replacement: 'インデントエラー: 予期しないインデント（字下げ）があります（ここに字下げは必要ありません）' },
                    { pattern: /IndentationError: unindent does not match any outer indentation level/i, replacement: 'インデントエラー: インデント（字下げ）の深さが合っていません（字下げの数を確認してください）' },
                    { pattern: /IndentationError: /i, replacement: 'インデントエラー: ' },

                    // RecursionError系
                    { pattern: /RecursionError: maximum recursion depth exceeded/i, replacement: '再帰エラー: 関数の呼び出しが深すぎます（無限ループになっている可能性があります。終了条件を確認してください）' },
                    { pattern: /RecursionError: /i, replacement: '再帰エラー: ' },

                    // ImportError系
                    { pattern: /ImportError: No module named '(.+?)'/i, replacement: 'インポートエラー: 「$1」というモジュールが見つかりません（このブラウザ環境では使えないモジュールです）' },
                    { pattern: /ImportError: /i, replacement: 'インポートエラー: ' },

                    // ModuleNotFoundError系
                    { pattern: /ModuleNotFoundError: No module named '(.+?)'/i, replacement: 'モジュール未検出エラー: 「$1」というモジュールが見つかりません（このブラウザ環境では使えないモジュールです）' },

                    // その他のメッセージ
                    { pattern: /File "<exec>", line (\d+)/i, replacement: '📍 $1行目でエラーが発生しました' },
                    { pattern: /Traceback \(most recent call last\):/i, replacement: '🔍 エラーの詳細:' },
                    { pattern: /\^+/i, replacement: '  ↑ この部分に問題があります' },
                ];

                // パターンマッチングで翻訳
                for (const { pattern, replacement } of errorPatterns) {
                    if (pattern.test(translatedLine)) {
                        translatedLine = translatedLine.replace(pattern, replacement);
                        break; // 最初にマッチしたパターンのみ適用
                    }
                }

                translatedLines.push(translatedLine);
            }

            // 最初の行に「❌ エラーが発生しました」を追加
            const result = ['❌ エラーが発生しました:', '', ...translatedLines];
            return result.join('\n');
        }

        // 再帰トラッカーの更新
        function updateRecursionTracker(data) {
            const tracker = document.getElementById('recursion-tracker');
            if (Object.keys(data).length === 0) {
                tracker.innerHTML = '<div class="debug-empty">再帰関数はまだ呼ばれていません</div>';
                return;
            }

            let html = '<div class="recursion-list">';

            for (const [funcName, info] of Object.entries(data)) {
                const maxDepth = info.max_depth;
                const totalCalls = info.total_calls;
                const depthBars = '━'.repeat(Math.min(maxDepth, 20));

                html += `
                    <div class="recursion-item">
                        <div class="recursion-header">
                            <span class="recursion-name">${funcName}()</span>
                            <span class="recursion-stats">
                                <span class="stat-badge">呼出: ${totalCalls}回</span>
                                <span class="stat-badge depth">深さ: ${maxDepth}</span>
                            </span>
                        </div>
                        <div class="recursion-depth-bar">
                            <div class="depth-fill" style="width: ${Math.min(maxDepth * 10, 100)}%">
                                ${depthBars}
                            </div>
                        </div>
                    </div>
                `;
            }

            html += '</div>';
            tracker.innerHTML = html;
        }

        // デバッグ情報のクリア
        function clearDebugInfo() {
            variableState = {};
            loopCounts = {};
            recursionData = {};
            outputLineCount = 0;
            updateVariableTracker({});
            updateLoopTracker({});
            updateRecursionTracker({});
        }

        // コード実行
        async function runCode() {
            if (!pyodide) {
                const outputArea = document.getElementById('output-area');
                outputArea.innerHTML = '';
                appendOutput('Pythonエンジンがまだ読み込まれていません。しばらく待ってから再試行してください。', 'stderr');
                return;
            }

            // CodeMirrorまたはフォールバックエディタからコードを取得
            let code;
            if (codeEditor) {
                code = codeEditor.getValue().trim();
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                code = fallbackEditor ? fallbackEditor.value.trim() : '';
            }

            if (!code) {
                const outputArea = document.getElementById('output-area');
                outputArea.innerHTML = '';
                appendOutput('実行するコードを入力してください。', 'stderr');
                return;
            }

            const outputArea = document.getElementById('output-area');
            const runBtn = document.getElementById('run-btn');

            // 出力エリアを完全にクリア（以前のエラーや出力を確実に削除）
            outputArea.innerHTML = '';
            outputLineCount = 0;

            // 実行中メッセージを表示
            outputArea.innerHTML = '<div class="running-msg">🔄 実行中...<br><small style="color: #94a3b8;">※大量の出力は実行完了後に表示されます</small></div>';
            clearDebugInfo();
            runBtn.disabled = true;

            try {
                // トレーサーを設定するPythonコード
                const tracerCode = `
import sys
import json
import re

__loop_counts__ = {}
__loop_iterations__ = {}  # ループごとの反復回数を記録
__variables__ = {}
__all_variables__ = {}  # すべての変数を収集
__recursion_data__ = {}  # 再帰情報を追跡
__call_stack__ = {}  # 関数呼び出しスタック
__user_code_file__ = '<exec>'
__tracing_enabled__ = False
__user_code_lines__ = []
__loop_stack__ = []  # ループのネストを追跡
__in_loop__ = False

def __is_loop_start__(line_text):
    """行がforまたはwhileで始まるかチェック"""
    stripped = line_text.lstrip()
    return stripped.startswith('for ') or stripped.startswith('while ')

def __get_indent__(line_text):
    """行のインデントレベルを取得"""
    return len(line_text) - len(line_text.lstrip())

def __tracer__(frame, event, arg):
    global __loop_counts__, __loop_iterations__, __variables__, __all_variables__, __recursion_data__, __call_stack__
    global __tracing_enabled__, __loop_stack__, __in_loop__

    # ユーザーコードのみを追跡（<exec>ファイル名でフィルタ）
    filename = frame.f_code.co_filename
    if filename != __user_code_file__:
        return __tracer__

    # 関数呼び出しと再帰の追跡
    if event == 'call' and __tracing_enabled__:
        func_name = frame.f_code.co_name

        # 除外する関数名
        excluded_funcs = {
            '<module>', '<listcomp>', '<dictcomp>', '<setcomp>', '<genexpr>',
            'write', 'flush', 'custom_input', 'custom_print'
        }

        # メイン実行や組み込み関数を除外
        if func_name not in excluded_funcs and not func_name.startswith('_'):
            # スタックに追加
            if func_name not in __call_stack__:
                __call_stack__[func_name] = 0
            __call_stack__[func_name] += 1

            current_depth = __call_stack__[func_name]

            # 再帰データを記録
            if func_name not in __recursion_data__:
                __recursion_data__[func_name] = {
                    'total_calls': 0,
                    'max_depth': 0
                }

            __recursion_data__[func_name]['total_calls'] += 1
            if current_depth > __recursion_data__[func_name]['max_depth']:
                __recursion_data__[func_name]['max_depth'] = current_depth

    # 関数からの戻り
    if event == 'return' and __tracing_enabled__:
        func_name = frame.f_code.co_name
        if func_name in __call_stack__ and __call_stack__[func_name] > 0:
            __call_stack__[func_name] -= 1

    # ループのカウント（行番号ベース）
    if event == 'line' and __tracing_enabled__:
        lineno = frame.f_lineno

        if lineno <= len(__user_code_lines__):
            line_text = __user_code_lines__[lineno - 1]
            current_indent = __get_indent__(line_text)

            # ループの開始を検出
            if __is_loop_start__(line_text):
                __loop_stack__.append({
                    'line': lineno,
                    'indent': current_indent,
                    'iterations': 0
                })
                __in_loop__ = True

            # ループ本体内の行をカウント
            elif __loop_stack__:
                # 現在のループのインデントレベル
                loop_info = __loop_stack__[-1]
                loop_indent = loop_info['indent']
                loop_line = loop_info['line']

                # インデントがループより深い = ループ本体内
                if current_indent > loop_indent:
                    if lineno in __loop_counts__:
                        __loop_counts__[lineno] += 1
                    else:
                        __loop_counts__[lineno] = 1

                    # ループの最初の行に戻ったら反復回数をカウント
                    # （ループ本体の最小行番号を基準に判定）
                    if loop_line not in __loop_iterations__:
                        __loop_iterations__[loop_line] = {'iterations': 0, 'first_body_line': lineno}

                    # 最初の本体行に戻ってきたら反復回数を増やす
                    if lineno == __loop_iterations__[loop_line]['first_body_line']:
                        __loop_iterations__[loop_line]['iterations'] += 1

                # インデントが戻った = ループ終了
                elif current_indent <= loop_indent:
                    __loop_stack__.pop()
                    if not __loop_stack__:
                        __in_loop__ = False

    # すべての変数を収集（グローバル + ローカル）
    if event in ['line', 'call', 'return'] and __tracing_enabled__:
        # ローカル変数のみを取得（関数内の変数）
        locals_dict = frame.f_locals.copy()

        # グローバル変数を取得（ユーザー定義のみ）
        globals_dict = frame.f_globals.copy()

        # 除外するキー
        excluded_keys = {
            'sys', 'json', 're', 'io', 'builtins', 'prompt',
            'UnbufferedTextIO', 'self', 's', 'custom_input'
        }

        # 組み合わせて、内部変数やモジュールを除外
        for k, v in {**globals_dict, **locals_dict}.items():
            if (not k.startswith('_') and
                k not in excluded_keys and
                not callable(v) and
                'TextIO' not in str(type(v)) and
                '<_io.' not in str(v) and
                str(type(v)) not in ['<class \\'module\\'>', '<class \\'type\\'>']):
                try:
                    # シリアライズ可能な値のみ保存
                    json.dumps(v)
                    __all_variables__[k] = v
                except:
                    # シリアライズできない値はスキップ
                    pass

    return __tracer__
`;

                // トレーサーを設定
                await pyodide.runPythonAsync(tracerCode);

                // ユーザーコードの行を設定（インデント判定用）
                const codeLines = code.split('\n');
                pyodide.globals.set('__user_code_lines__', codeLines);

                // トレーサーを有効化してからユーザーコードを実行
                await pyodide.runPythonAsync('sys.settrace(__tracer__)');
                await pyodide.runPythonAsync('__tracing_enabled__ = True');

                // ユーザーコードを実行
                const result = await pyodide.runPythonAsync(code);

                // トレーサーを無効化
                await pyodide.runPythonAsync('__tracing_enabled__ = False');
                await pyodide.runPythonAsync('sys.settrace(None)');

                // 最終的なスクロール
                const outputArea = document.getElementById('output-area');
                outputArea.scrollTop = outputArea.scrollHeight;

                // 変数、ループカウント、再帰データを取得
                const variables = pyodide.globals.get('__all_variables__');
                const loopCountsRaw = pyodide.globals.get('__loop_counts__');
                const recursionDataRaw = pyodide.globals.get('__recursion_data__');

                // JavaScriptオブジェクトに変換
                if (variables) {
                    variableState = variables.toJs({dict_converter: Object.fromEntries});
                    updateVariableTracker(variableState);
                }

                if (loopCountsRaw) {
                    const loopCountsObj = loopCountsRaw.toJs({dict_converter: Object.fromEntries});
                    loopCounts = loopCountsObj;

                    // ループ反復回数を取得
                    const loopIterationsRaw = pyodide.globals.get('__loop_iterations__');
                    let loopIterationsObj = {};
                    if (loopIterationsRaw) {
                        loopIterationsObj = loopIterationsRaw.toJs({dict_converter: Object.fromEntries});
                    }

                    updateLoopTracker(loopCounts, codeLines, loopIterationsObj);
                }

                if (recursionDataRaw) {
                    recursionData = recursionDataRaw.toJs({dict_converter: Object.fromEntries});
                    updateRecursionTracker(recursionData);
                }

                // 「実行中...」が残っていたら削除
                const runningMsg = outputArea.querySelector('.running-msg');
                if (runningMsg) {
                    runningMsg.remove();
                }

                // 結果がある場合は表示
                if (result !== undefined && result !== null && result !== '') {
                    appendOutput(`結果: ${result}`, 'info');
                }

                // 出力がなかった場合のみメッセージ表示
                if (outputArea.children.length === 0) {
                    appendOutput('✅ 実行完了（出力なし）', 'info');
                }

            } catch (error) {
                console.error('Python実行エラー:', error);

                // エラー時も出力エリアを完全にクリアしてから表示
                const outputArea = document.getElementById('output-area');
                outputArea.innerHTML = '';
                outputLineCount = 0;

                // チェックボックスの状態を確認
                const japaneseErrorToggle = document.getElementById('japanese-error-toggle');
                const useJapanese = japaneseErrorToggle ? japaneseErrorToggle.checked : true;

                // エラーメッセージを日本語化するかどうか
                const errorMessage = useJapanese ? translatePythonError(error.message) : `エラー:\n${error.message}`;
                appendOutput(errorMessage, 'stderr');
            } finally {
                runBtn.disabled = false;
            }
        }

        // サンプルコードの挿入
        function insertSampleCode() {
            const samples = [
                '# 基本的な計算\\nprint("=== 計算の例 ===")\\nprint("10 + 5 =", 10 + 5)\\nprint("10 - 3 =", 10 - 3)\\nprint("4 * 6 =", 4 * 6)\\nprint("15 / 3 =", 15 / 3)',

                '# 変数と文字列\\nprint("=== 変数の例 ===")\\nname = "太郎"\\nage = 16\\nprint(f"名前: {name}")\\nprint(f"年齢: {age}歳")\\nprint(f"{name}さんは{age}歳です")',

                '# 繰り返し処理\\nprint("=== 繰り返しの例 ===")\\nfor i in range(5):\\n    print(f"カウント: {i}")\\n\\nprint("\\n偶数の表示:")\\nfor i in range(10):\\n    if i % 2 == 0:\\n        print(f"{i}は偶数")',

                '# リストの操作\\nprint("=== リストの例 ===")\\nfruits = ["りんご", "バナナ", "オレンジ"]\\nprint("果物リスト:", fruits)\\n\\nfruits.append("ぶどう")\\nprint("追加後:", fruits)\\n\\nfor fruit in fruits:\\n    print(f"- {fruit}")',

                '# 関数の定義\\nprint("=== 関数の例 ===")\\ndef greet(name):\\n    return f"こんにちは、{name}さん!"\\n\\ndef add_numbers(a, b):\\n    return a + b\\n\\nprint(greet("花子"))\\nprint(f"5 + 3 = {add_numbers(5, 3)}")',
            ];

            const randomSample = samples[Math.floor(Math.random() * samples.length)];
            const formattedCode = randomSample.replace(/\\n/g, '\n');
            
            if (codeEditor) {
                codeEditor.setValue(formattedCode);
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                if (fallbackEditor) {
                    fallbackEditor.value = formattedCode;
                }
            }
        }

        // コードエディタをクリア
        function clearCode() {
            if (codeEditor) {
                codeEditor.setValue('');
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                if (fallbackEditor) {
                    fallbackEditor.value = '';
                }
            }
            document.getElementById('output-area').innerHTML = '<div class="ready">コードを入力して実行ボタンを押してください。</div>';
            clearDebugInfo();
        }

        // 保存機能
        function saveCode() {
            if (!codeEditor) {
                alert('エディタが初期化されていません');
                return;
            }

            const code = codeEditor.getValue();
            if (!code.trim()) {
                alert('保存するコードがありません');
                return;
            }

            const blob = new Blob([code], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `python_playground_${new Date().toISOString().split('T')[0]}.py`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // 読込機能
        function loadCode() {
            const fileInput = document.getElementById('file-input');
            fileInput.click();
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;

            if (!file.name.endsWith('.py')) {
                alert('.pyファイルを選択してください');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                if (codeEditor) {
                    codeEditor.setValue(e.target.result);
                }
            };
            reader.readAsText(file);

            // ファイル入力をリセット（同じファイルを再度読み込めるようにする）
            event.target.value = '';
        }

        // ドラッグ&ドロップ機能
        function setupDragAndDrop() {
            const editorContainer = document.getElementById('code-editor-container');

            editorContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.border = '3px dashed #3b82f6';
                editorContainer.style.background = 'rgba(59, 130, 246, 0.05)';
            });

            editorContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.border = '2px solid #e2e8f0';
                editorContainer.style.background = '';
            });

            editorContainer.addEventListener('drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.border = '2px solid #e2e8f0';
                editorContainer.style.background = '';

                const files = e.dataTransfer.files;
                if (files.length === 0) return;

                const file = files[0];
                if (!file.name.endsWith('.py')) {
                    alert('.pyファイルをドロップしてください');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(event) {
                    if (codeEditor) {
                        codeEditor.setValue(event.target.result);
                    }
                };
                reader.readAsText(file);
            });
        }

        // イベントリスナーの設定
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('DOM loaded, starting CodeMirror and Pyodide initialization...');
            
            // CodeMirrorエディタを初期化
            await initCodeEditor();
            
            // Pyodideを読み込み
            loadPyodide().catch(error => {
                console.error('Failed to load Pyodide:', error);
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                statusElement.textContent = '❌ 読み込み失敗';
                outputArea.innerHTML = `<div class="error">Pythonエンジンの読み込みに失敗しました。<br>ネットワーク接続を確認してページを再読み込みしてください。<br>詳細: ${error.message}</div>`;
            });

            // ボタンイベント
            document.getElementById('run-btn').addEventListener('click', runCode);
            document.getElementById('clear-btn').addEventListener('click', clearCode);
            document.getElementById('example-btn').addEventListener('click', insertSampleCode);
            document.getElementById('save-btn').addEventListener('click', saveCode);
            document.getElementById('load-btn').addEventListener('click', loadCode);
            document.getElementById('file-input').addEventListener('change', handleFileSelect);

            // ドラッグ&ドロップ機能を有効化
            setupDragAndDrop();
        });
    </script>

    <style>
        .python-playground {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .playground-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .playground-header h1 {
            color: #2563eb;
            margin-bottom: 10px;
            font-size: clamp(1.75rem, 5vw, 2.25rem);
        }

        .playground-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px 15px;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #2563eb;
            flex-wrap: wrap;
            gap: 10px;
        }

        .section-header h3 {
            margin: 0;
            color: #1e293b;
            font-size: clamp(1rem, 2.5vw, 1.25rem);
            white-space: nowrap;
        }

        .controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center;
        }

        .status {
            font-size: 14px;
            color: #64748b;
            display: flex;
            flex-direction: column;
            gap: 8px;
            align-items: flex-end;
        }

        .error-lang-toggle {
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
            font-size: 13px;
            color: #475569;
            user-select: none;
        }

        .error-lang-toggle input[type="checkbox"] {
            cursor: pointer;
            width: 16px;
            height: 16px;
        }

        .error-lang-toggle span {
            white-space: nowrap;
        }

        .error-lang-toggle:hover {
            color: #1e293b;
        }

        #code-editor-container {
            width: 100%;
            height: 400px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            overflow: hidden;
            transition: border-color 0.3s;
            display: flex;
            flex-direction: column;
        }

        #code-editor-container:focus-within {
            border-color: #2563eb;
        }

        /* CodeMirrorエディタのスタイル調整 */
        .CodeMirror {
            height: 400px !important;
            font-family: 'Monaco', 'Menlo', 'Consolas', 'Liberation Mono', 'Courier New', monospace;
            font-size: 16px; /* モバイルでズームを防ぐため16px以上に */
            line-height: 1.5;
            border-radius: 6px;
            flex: 1;
            -webkit-text-size-adjust: 100%; /* Webkit系でのテキストサイズ調整を防ぐ */
        }

        .CodeMirror-scroll {
            min-height: 400px !important;
        }

        .CodeMirror-lines {
            padding: 4px 0;
        }

        .CodeMirror-focused .CodeMirror-cursor {
            border-left: 2px solid #2563eb;
        }

        .CodeMirror-selected {
            background: rgba(37, 99, 235, 0.2);
        }

        .CodeMirror-line::selection, 
        .CodeMirror-line > span::selection, 
        .CodeMirror-line > span > span::selection {
            background: rgba(37, 99, 235, 0.2);
        }

        /* フォールバックエディタのスタイル */
        #fallback-editor {
            width: 100%;
            height: 400px;
            padding: 15px;
            border: none;
            outline: none;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 16px; /* モバイルでズームを防ぐため16px以上に */
            line-height: 1.5;
            resize: vertical;
            -webkit-text-size-adjust: 100%; /* Webkit系でのテキストサイズ調整を防ぐ */
        }

        #output-area {
            height: 400px;
            padding: 15px;
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            overflow-y: auto;
            white-space: pre-wrap;
        }

        .output-line {
            margin-bottom: 4px;
        }

        .output-line.stderr {
            color: #ef4444;
        }

        .output-line.info {
            color: #10b981;
        }

        .loading, .ready, .running-msg {
            color: #64748b;
            font-style: italic;
            text-align: center;
            padding: 20px;
        }

        .running-msg {
            color: #3b82f6;
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .error {
            color: #ef4444;
            padding: 20px;
            text-align: center;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            font-size: clamp(0.75rem, 1.8vw, 0.875rem);
            white-space: nowrap;
            min-width: fit-content;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: #1d4ed8;
        }

        .btn-secondary {
            background: #64748b;
            color: white;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-success {
            background: #22c55e;
            color: white;
        }

        .btn-success:hover {
            background: #16a34a;
        }

        .btn-info {
            background: #06b6d4;
            color: white;
        }

        .btn-info:hover {
            background: #0891b2;
        }

        .help-section {
            background: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #10b981;
        }

        .help-section h3 {
            color: #1e293b;
            margin-bottom: 15px;
        }

        .help-section ul {
            list-style: none;
            padding: 0;
        }

        .help-section li {
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .help-section li:last-child {
            border-bottom: none;
        }

        /* デバッグパネル */
        .debug-panels {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .debug-panel {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            overflow: hidden;
        }

        .debug-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 15px;
        }

        .debug-header h3 {
            margin: 0;
            font-size: 1rem;
        }

        .debug-content {
            padding: 15px;
            min-height: 200px;
            max-height: 400px;
            overflow-y: auto;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 14px;
        }

        .debug-empty {
            color: #94a3b8;
            text-align: center;
            padding: 40px 20px;
            font-style: italic;
        }

        .variable-list, .loop-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .variable-item {
            background: #f8fafc;
            padding: 10px 12px;
            border-radius: 6px;
            border-left: 3px solid #3b82f6;
            display: grid;
            grid-template-columns: auto auto 1fr;
            gap: 10px;
            align-items: center;
        }

        .var-name {
            font-weight: 600;
            color: #1e293b;
        }

        .var-type {
            font-size: 11px;
            color: #64748b;
            background: #e2e8f0;
            padding: 2px 6px;
            border-radius: 3px;
        }

        .var-value {
            color: #059669;
            font-weight: 500;
            text-align: right;
        }

        .loop-group {
            margin-bottom: 20px;
            background: #fffbeb;
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #f59e0b;
        }

        .loop-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .loop-header-line {
            font-weight: 700;
            color: #92400e;
            font-size: 15px;
        }

        .loop-iteration-count {
            background: #f59e0b;
            color: white;
            padding: 4px 12px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 13px;
        }

        .loop-header-code {
            background: white;
            padding: 8px 10px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 13px;
            color: #92400e;
            border: 1px solid #fde68a;
            margin-bottom: 12px;
            font-weight: 600;
        }

        .loop-item {
            background: #fef3c7;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #fbbf24;
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-bottom: 8px;
        }

        .loop-item:last-child {
            margin-bottom: 0;
        }

        .loop-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
        }

        .loop-line {
            font-weight: 600;
            color: #92400e;
            min-width: 50px;
        }

        .loop-iterations {
            color: #f59e0b;
            font-size: 14px;
            letter-spacing: 2px;
            flex: 1;
        }

        .loop-count {
            color: #b45309;
            font-weight: 600;
            background: white;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 13px;
            white-space: nowrap;
        }

        .loop-progress-bar {
            height: 6px;
            background: #fde68a;
            border-radius: 3px;
            overflow: hidden;
        }

        .loop-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%);
            transition: width 0.3s ease;
            border-radius: 3px;
        }

        .loop-code {
            background: white;
            padding: 8px 10px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 13px;
            color: #1e293b;
            border: 1px solid #fde68a;
            overflow-x: auto;
            white-space: pre;
            line-height: 1.4;
        }

        /* 再帰トラッカー */
        .recursion-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .recursion-item {
            background: #f0f9ff;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }

        .recursion-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            gap: 10px;
            flex-wrap: wrap;
        }

        .recursion-name {
            font-weight: 700;
            color: #1e40af;
            font-size: 15px;
        }

        .recursion-stats {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }

        .stat-badge {
            background: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            color: #475569;
            font-weight: 500;
            border: 1px solid #dbeafe;
        }

        .stat-badge.depth {
            background: #dbeafe;
            color: #1e40af;
            font-weight: 600;
        }

        .recursion-depth-bar {
            background: #dbeafe;
            border-radius: 4px;
            padding: 6px 8px;
            overflow-x: auto;
        }

        .depth-fill {
            color: #3b82f6;
            font-weight: 700;
            font-family: monospace;
            letter-spacing: 1px;
            white-space: nowrap;
            font-size: 14px;
        }

        /* レスポンシブ対応 */
        @media (max-width: 768px) {
            .playground-content {
                grid-template-columns: 1fr;
            }

            .debug-panels {
                grid-template-columns: 1fr;
            }

            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }

            .section-header h3 {
                font-size: 1.1rem;
            }

            .controls {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));
                gap: 6px;
                width: 100%;
            }

            .btn {
                padding: 10px 8px;
                font-size: 0.8rem;
            }

            #code-editor-container {
                height: 350px;
            }

            .CodeMirror {
                height: 350px !important;
            }

            .CodeMirror-scroll {
                min-height: 350px !important;
            }

            #output-area {
                height: 350px;
            }

            .debug-content {
                max-height: 300px;
            }

            .variable-item {
                grid-template-columns: 1fr;
                gap: 5px;
            }

            .var-value {
                text-align: left;
            }
        }

        @media (max-width: 480px) {
            .controls {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .btn {
                padding: 12px 6px;
                font-size: 0.75rem;
            }
        }
    </style>
</Layout>