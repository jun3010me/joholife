---
// python-playground.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Python プレイグラウンド">
    <div class="python-playground">
        <div class="playground-header">
            <h1>🐍 Python プレイグラウンド</h1>
            <p>ブラウザ上でPythonコードを実行してみよう！</p>
        </div>

        <div class="playground-content">
            <div class="code-section">
                <div class="section-header">
                    <h3>📝 コードエディタ</h3>
                    <div class="controls">
                        <button id="run-btn" class="btn btn-primary" disabled>
                            ▶️ 実行
                        </button>
                        <button id="clear-btn" class="btn btn-secondary">
                            🗑️ クリア
                        </button>
                        <button id="example-btn" class="btn btn-secondary">
                            📚 サンプル
                        </button>
                    </div>
                </div>
                <div id="code-editor-container">
                    <div id="code-editor"></div>
                </div>
            </div>

            <div class="output-section">
                <div class="section-header">
                    <h3>📤 実行結果</h3>
                    <div class="status">
                        <span id="python-status">Pythonエンジンを読み込み中...</span>
                    </div>
                </div>
                <div id="output-area">
                    <div class="loading">
                        🔄 Pyodideを読み込んでいます...しばらくお待ちください
                    </div>
                </div>
            </div>
        </div>

        <div class="help-section">
            <h3>💡 使い方</h3>
            <ul>
                <li><strong>print()</strong>: 文字列や値を出力します</li>
                <li><strong>input()</strong>: ユーザーからの入力を受け取ります</li>
                <li><strong>変数</strong>: name = "値" で変数を定義できます</li>
                <li><strong>計算</strong>: +, -, *, / などの演算子が使えます</li>
                <li><strong>繰り返し</strong>: for文やwhile文が使えます</li>
            </ul>
        </div>
    </div>

    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material-darker.min.css">
    
    <script>
        let pyodide = null;
        let inputQueue = [];
        let isWaitingForInput = false;
        let inputResolver = null;
        let codeEditor = null;

        // CodeMirrorの読み込みと初期化
        async function initCodeEditor() {
            try {
                // CodeMirrorのスクリプトを読み込み
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/selection/active-line.min.js');
                
                // CodeMirrorエディタを初期化
                const editorElement = document.getElementById('code-editor');
                codeEditor = CodeMirror(editorElement, {
                    value: `print("Hello, Python!")
print("1 + 1 =", 1 + 1)

name = input("あなたの名前を入力してください: ")
print("こんにちは、" + name + "さん!")

for i in range(3):
    print("カウント:", i)`,
                    mode: 'python',
                    theme: 'material-darker',
                    lineNumbers: true,
                    indentUnit: 4,
                    indentWithTabs: false,
                    autoCloseBrackets: true,
                    matchBrackets: true,
                    styleActiveLine: true,
                    lineWrapping: true,
                    viewportMargin: Infinity,
                    extraKeys: {
                        "Ctrl-Enter": function(cm) {
                            runCode();
                        },
                        "Tab": function(cm) {
                            // Tabキーでインデント
                            if (cm.somethingSelected()) {
                                cm.indentSelection("add");
                            } else {
                                cm.replaceSelection("    "); // 4スペース
                            }
                        },
                        "Shift-Tab": function(cm) {
                            // Shift+Tabでインデント解除
                            cm.indentSelection("subtract");
                        }
                    }
                });
                
                // エディタのサイズを強制的に調整
                setTimeout(() => {
                    const isMobile = window.innerWidth <= 768;
                    const height = isMobile ? 350 : 400;
                    codeEditor.setSize(null, height);
                    codeEditor.refresh();
                }, 100);
                
                // ウィンドウリサイズ時に高さを再調整
                window.addEventListener('resize', () => {
                    setTimeout(() => {
                        const isMobile = window.innerWidth <= 768;
                        const height = isMobile ? 350 : 400;
                        codeEditor.setSize(null, height);
                        codeEditor.refresh();
                    }, 100);
                });
                
                console.log('CodeMirror editor initialized');
                
            } catch (error) {
                console.error('Failed to initialize CodeMirror:', error);
                // フォールバック: 通常のtextareaを使用
                document.getElementById('code-editor').innerHTML = '<textarea id="fallback-editor" style="width:100%;height:400px;font-family:monospace;"></textarea>';
            }
        }

        // スクリプト読み込み用のヘルパー関数
        function loadScript(src) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }

        // Pyodideの読み込み
        async function loadPyodide() {
            try {
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                
                statusElement.textContent = 'Pythonエンジンを初期化中...';
                
                // PyodideをCDNから読み込み
                if (!window.loadPyodide) {
                    await loadScript('https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js');
                }

                statusElement.textContent = 'Python環境を構築中...';

                // Pyodideを初期化（グローバルのloadPyodide関数を使用）
                pyodide = await window.loadPyodide({
                    indexURL: "https://cdn.jsdelivr.net/pyodide/v0.24.1/full/",
                    stdout: (text) => {
                        appendOutput(text, 'stdout');
                    },
                    stderr: (text) => {
                        appendOutput(text, 'stderr');
                    }
                });

                console.log('Pyodide loaded successfully');

                // input関数をオーバーライド
                pyodide.runPython(`
import builtins
from js import prompt

def custom_input(prompt_text=""):
    result = prompt(str(prompt_text))
    return result if result is not None else ""

# 組み込みのinput関数を置き換え
builtins.input = custom_input
                `);

                statusElement.textContent = '✅ Python準備完了';
                outputArea.innerHTML = '<div class="ready">Python環境が準備できました！コードを実行してみましょう。</div>';
                
                // 実行ボタンを有効化
                document.getElementById('run-btn').disabled = false;
                
            } catch (error) {
                console.error('Pyodide読み込みエラー:', error);
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                statusElement.textContent = '❌ 読み込み失敗';
                outputArea.innerHTML = `<div class="error">Pythonエンジンの読み込みに失敗しました。<br>エラー: ${error.message}<br>ページを再読み込みしてみてください。</div>`;
            }
        }

        // 出力エリアにテキストを追加
        function appendOutput(text, type = 'stdout') {
            const outputArea = document.getElementById('output-area');
            if (outputArea.querySelector('.loading') || outputArea.querySelector('.ready')) {
                outputArea.innerHTML = '';
            }
            
            const outputLine = document.createElement('div');
            outputLine.className = `output-line ${type}`;
            outputLine.textContent = text;
            outputArea.appendChild(outputLine);
            outputArea.scrollTop = outputArea.scrollHeight;
        }

        // コード実行
        async function runCode() {
            if (!pyodide) {
                appendOutput('Pythonエンジンがまだ読み込まれていません。しばらく待ってから再試行してください。', 'stderr');
                return;
            }

            // CodeMirrorまたはフォールバックエディタからコードを取得
            let code;
            if (codeEditor) {
                code = codeEditor.getValue().trim();
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                code = fallbackEditor ? fallbackEditor.value.trim() : '';
            }
            
            if (!code) {
                appendOutput('実行するコードを入力してください。', 'stderr');
                return;
            }

            const outputArea = document.getElementById('output-area');
            const runBtn = document.getElementById('run-btn');
            
            // 出力エリアをクリア
            outputArea.innerHTML = '';
            appendOutput('🔄 実行中...', 'info');
            runBtn.disabled = true;

            try {
                // コードを実行
                const result = await pyodide.runPythonAsync(code);
                
                // 結果がある場合は表示
                if (result !== undefined && result !== null && result !== '') {
                    appendOutput(`結果: ${result}`, 'info');
                }
                
                // 実行完了メッセージ
                setTimeout(() => {
                    appendOutput('✅ 実行完了', 'info');
                }, 100);
                
            } catch (error) {
                console.error('Python実行エラー:', error);
                appendOutput(`エラー: ${error.message}`, 'stderr');
            } finally {
                runBtn.disabled = false;
            }
        }

        // サンプルコードの挿入
        function insertSampleCode() {
            const samples = [
                '# 基本的な計算\\nprint("=== 計算の例 ===")\\nprint("10 + 5 =", 10 + 5)\\nprint("10 - 3 =", 10 - 3)\\nprint("4 * 6 =", 4 * 6)\\nprint("15 / 3 =", 15 / 3)',

                '# 変数と文字列\\nprint("=== 変数の例 ===")\\nname = "太郎"\\nage = 16\\nprint(f"名前: {name}")\\nprint(f"年齢: {age}歳")\\nprint(f"{name}さんは{age}歳です")',

                '# 繰り返し処理\\nprint("=== 繰り返しの例 ===")\\nfor i in range(5):\\n    print(f"カウント: {i}")\\n\\nprint("\\n偶数の表示:")\\nfor i in range(10):\\n    if i % 2 == 0:\\n        print(f"{i}は偶数")',

                '# リストの操作\\nprint("=== リストの例 ===")\\nfruits = ["りんご", "バナナ", "オレンジ"]\\nprint("果物リスト:", fruits)\\n\\nfruits.append("ぶどう")\\nprint("追加後:", fruits)\\n\\nfor fruit in fruits:\\n    print(f"- {fruit}")',

                '# 関数の定義\\nprint("=== 関数の例 ===")\\ndef greet(name):\\n    return f"こんにちは、{name}さん!"\\n\\ndef add_numbers(a, b):\\n    return a + b\\n\\nprint(greet("花子"))\\nprint(f"5 + 3 = {add_numbers(5, 3)}")',
            ];

            const randomSample = samples[Math.floor(Math.random() * samples.length)];
            const formattedCode = randomSample.replace(/\\n/g, '\n');
            
            if (codeEditor) {
                codeEditor.setValue(formattedCode);
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                if (fallbackEditor) {
                    fallbackEditor.value = formattedCode;
                }
            }
        }

        // コードエディタをクリア
        function clearCode() {
            if (codeEditor) {
                codeEditor.setValue('');
            } else {
                const fallbackEditor = document.getElementById('fallback-editor');
                if (fallbackEditor) {
                    fallbackEditor.value = '';
                }
            }
            document.getElementById('output-area').innerHTML = '<div class="ready">コードを入力して実行ボタンを押してください。</div>';
        }

        // イベントリスナーの設定
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('DOM loaded, starting CodeMirror and Pyodide initialization...');
            
            // CodeMirrorエディタを初期化
            await initCodeEditor();
            
            // Pyodideを読み込み
            loadPyodide().catch(error => {
                console.error('Failed to load Pyodide:', error);
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                statusElement.textContent = '❌ 読み込み失敗';
                outputArea.innerHTML = `<div class="error">Pythonエンジンの読み込みに失敗しました。<br>ネットワーク接続を確認してページを再読み込みしてください。<br>詳細: ${error.message}</div>`;
            });

            // ボタンイベント
            document.getElementById('run-btn').addEventListener('click', runCode);
            document.getElementById('clear-btn').addEventListener('click', clearCode);
            document.getElementById('example-btn').addEventListener('click', insertSampleCode);
        });
    </script>

    <style>
        .python-playground {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .playground-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .playground-header h1 {
            color: #2563eb;
            margin-bottom: 10px;
        }

        .playground-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px 15px;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #2563eb;
            flex-wrap: wrap;
            gap: 10px;
        }

        .section-header h3 {
            margin: 0;
            color: #1e293b;
            font-size: clamp(1rem, 2.5vw, 1.25rem);
            white-space: nowrap;
        }

        .controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center;
        }

        .status {
            font-size: 14px;
            color: #64748b;
        }

        #code-editor-container {
            width: 100%;
            height: 400px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            overflow: hidden;
            transition: border-color 0.3s;
            display: flex;
            flex-direction: column;
        }

        #code-editor-container:focus-within {
            border-color: #2563eb;
        }

        /* CodeMirrorエディタのスタイル調整 */
        .CodeMirror {
            height: 400px !important;
            font-family: 'Monaco', 'Menlo', 'Consolas', 'Liberation Mono', 'Courier New', monospace;
            font-size: 16px; /* モバイルでズームを防ぐため16px以上に */
            line-height: 1.5;
            border-radius: 6px;
            flex: 1;
            -webkit-text-size-adjust: 100%; /* Webkit系でのテキストサイズ調整を防ぐ */
        }

        .CodeMirror-scroll {
            min-height: 400px !important;
        }

        .CodeMirror-lines {
            padding: 4px 0;
        }

        .CodeMirror-focused .CodeMirror-cursor {
            border-left: 2px solid #2563eb;
        }

        .CodeMirror-selected {
            background: rgba(37, 99, 235, 0.2);
        }

        .CodeMirror-line::selection, 
        .CodeMirror-line > span::selection, 
        .CodeMirror-line > span > span::selection {
            background: rgba(37, 99, 235, 0.2);
        }

        /* フォールバックエディタのスタイル */
        #fallback-editor {
            width: 100%;
            height: 400px;
            padding: 15px;
            border: none;
            outline: none;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 16px; /* モバイルでズームを防ぐため16px以上に */
            line-height: 1.5;
            resize: vertical;
            -webkit-text-size-adjust: 100%; /* Webkit系でのテキストサイズ調整を防ぐ */
        }

        #output-area {
            height: 400px;
            padding: 15px;
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            overflow-y: auto;
            white-space: pre-wrap;
        }

        .output-line {
            margin-bottom: 4px;
        }

        .output-line.stderr {
            color: #ef4444;
        }

        .output-line.info {
            color: #10b981;
        }

        .loading, .ready {
            color: #64748b;
            font-style: italic;
            text-align: center;
            padding: 20px;
        }

        .error {
            color: #ef4444;
            padding: 20px;
            text-align: center;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            font-size: clamp(0.75rem, 1.8vw, 0.875rem);
            white-space: nowrap;
            min-width: fit-content;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: #1d4ed8;
        }

        .btn-secondary {
            background: #64748b;
            color: white;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .help-section {
            background: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #10b981;
        }

        .help-section h3 {
            color: #1e293b;
            margin-bottom: 15px;
        }

        .help-section ul {
            list-style: none;
            padding: 0;
        }

        .help-section li {
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .help-section li:last-child {
            border-bottom: none;
        }

        /* レスポンシブ対応 */
        @media (max-width: 768px) {
            .playground-content {
                grid-template-columns: 1fr;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }
            
            .section-header h3 {
                font-size: 1.1rem;
            }
            
            .controls {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));
                gap: 6px;
                width: 100%;
            }
            
            .btn {
                padding: 10px 8px;
                font-size: 0.8rem;
            }
            
            #code-editor-container {
                height: 350px;
            }
            
            .CodeMirror {
                height: 350px !important;
            }
            
            .CodeMirror-scroll {
                min-height: 350px !important;
            }
            
            #output-area {
                height: 350px;
            }
        }

        @media (max-width: 480px) {
            .controls {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .btn {
                padding: 12px 6px;
                font-size: 0.75rem;
            }
        }
    </style>
</Layout>