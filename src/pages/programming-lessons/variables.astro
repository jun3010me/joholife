---
import Layout from '../../layouts/Layout.astro';

const title = "変数 - プログラミングレッスン";
const description = "Pythonの変数について、基本的な概念から使い方まで段階的に学習します";

const steps = [
    {
        id: 1,
        title: '変数とは何か',
        description: '変数は、データを入れておく「箱」のようなものです。箱に名前をつけて、その中に値を保存できます。',
        code: 'name = "太郎"\nprint(name)',
        explanation: '変数は、プログラムの中でデータを一時的に保存するために使います。上の例では「name」という名前の箱に「太郎」という文字列を入れています。'
    },
    {
        id: 2,
        title: '変数の作り方（代入）',
        description: '変数を作るには「変数名 = 値」という形で書きます。これを「代入」と呼びます。',
        code: 'age = 15\ncity = "東京"\n\nprint(age)\nprint(city)',
        explanation: '「=」は「等しい」ではなく、「右側の値を左側の変数に入れる」という意味です。この記号を「代入演算子」と呼びます。'
    },
    {
        id: 3,
        title: '変数の使い方',
        description: '変数に入れた値は、何度でも使うことができます。変数名を書くだけで、中身の値を取り出せます。',
        code: 'fruit = "りんご"\nprice = 100\n\nprint(fruit)\nprint(price)',
        explanation: '変数を使うと、同じ値を何度も書く必要がなくなります。また、値を変更したいときも、変数への代入部分を変えるだけで済みます。'
    },
    {
        id: 4,
        title: '変数名のルール',
        description: '変数名には決まりがあります。正しい名前をつけないと、エラーになってしまいます。',
        code: 'user_name = "花子"\nage1 = 16\ntotal_score = 95\n\nprint(user_name)\nprint(age1)\nprint(total_score)',
        explanation: '変数名のルール：\n1. 英字、数字、アンダースコア(_)が使える\n2. 数字から始めてはいけない\n3. 予約語（if、for など）は使えない\n4. わかりやすい名前をつける'
    },
    {
        id: 5,
        title: '複数の変数を使った計算',
        description: '複数の変数を組み合わせて計算ができます。計算結果も変数に入れることができます。',
        code: 'apple = 120\norange = 80\n\ntotal = apple + orange\n\nprint(apple)\nprint(orange)\nprint(total)',
        explanation: '変数を使った計算の結果を、新しい変数に保存できます。これにより、複雑な計算も段階的に行うことができます。'
    },
    {
        id: 6,
        title: '変数の値を変更する',
        description: '変数に入っている値は、後から変更することができます。',
        code: 'count = 0\nprint(count)\n\ncount = 5\nprint(count)\n\ncount = count + 1\nprint(count)',
        explanation: '「count = count + 1」のように、変数自身の値を使って新しい値を計算することもできます。これは「今の値に1を足した値を、countに代入する」という意味です。'
    },
    {
        id: 7,
        title: '実践：買い物の計算',
        description: '変数を使って、買い物の合計金額と消費税を計算してみましょう。',
        code: 'notebook = 200\npen = 150\neraser = 100\n\nsubtotal = notebook + pen + eraser\ntax = subtotal * 0.1\ntotal = subtotal + tax\n\nprint(notebook)\nprint(pen)\nprint(eraser)\nprint(subtotal)\nprint(int(tax))\nprint(int(total))',
        explanation: '変数を使うことで、複雑な計算も段階的に、わかりやすく書くことができます。また、商品の値段を変更したいときも、最初の部分だけ変えれば、自動的に全ての計算が更新されます。'
    }
];
---

<Layout title={title} description={description}>
    <div class="lesson-container">
        <header class="lesson-header">
            <a href="/programming-lessons" class="back-link">← レッスン一覧に戻る</a>
            <h1>📦 変数</h1>
            <p>変数の基本的な使い方を学びましょう</p>
        </header>

        <div class="lesson-content">
            <div class="steps-section">
                <h2>📝 学習ステップ</h2>
                {steps.map((step) => (
                    <div class="step-card" id={`step-${step.id}`}>
                        <div class="step-header">
                            <span class="step-number">Step {step.id}</span>
                            <h3>{step.title}</h3>
                        </div>
                        <div class="step-content">
                            <p class="step-description">{step.description}</p>
                            <div class="code-example">
                                <div class="code-header">
                                    <span>💻 コード例（手で入力してみましょう）</span>
                                </div>
                                <pre><code class="python-code no-select" data-code-content={step.code}></code></pre>
                            </div>
                            <div class="explanation">
                                <strong>💡 解説：</strong>
                                <p style="white-space: pre-line;">{step.explanation}</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            <div class="editor-section">
                <div class="editor-sticky">
                    <h2>🐍 Pythonエディタ</h2>
                    <p class="editor-hint">左のコード例を入力して実行してみましょう！</p>

                    <div class="editor-controls">
                        <button id="run-btn" class="btn btn-primary" disabled>
                            ▶️ 実行
                        </button>
                        <button id="clear-btn" class="btn btn-secondary">
                            🗑️ クリア
                        </button>
                        <button id="save-btn" class="btn btn-success">
                            💾 保存
                        </button>
                        <button id="load-btn" class="btn btn-info">
                            📂 読込
                        </button>
                        <input type="file" id="file-input" accept=".py" style="display: none;">
                    </div>

                    <div id="code-editor-container">
                        <div id="code-editor"></div>
                    </div>

                    <div class="output-section">
                        <div class="output-header">
                            <span>📤 実行結果</span>
                            <span id="python-status" class="status">準備中...</span>
                        </div>
                        <div id="output-area">
                            <div class="loading">🔄 Pythonエンジンを読み込み中...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material-darker.min.css">

    <script>
        let pyodide = null;
        let codeEditor = null;

        // CodeMirrorの読み込みと初期化
        async function initCodeEditor() {
            try {
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js');
                await loadScript('https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js');

                const editorElement = document.getElementById('code-editor');
                codeEditor = CodeMirror(editorElement, {
                    value: '',
                    mode: 'python',
                    theme: 'material-darker',
                    lineNumbers: true,
                    indentUnit: 4,
                    indentWithTabs: false,
                    autoCloseBrackets: true,
                    lineWrapping: true,
                    extraKeys: {
                        "Ctrl-Enter": function(cm) { runCode(); },
                        "Tab": function(cm) {
                            if (cm.somethingSelected()) {
                                cm.indentSelection("add");
                            } else {
                                cm.replaceSelection("    ");
                            }
                        }
                    }
                });

                codeEditor.setSize(null, 300);
            } catch (error) {
                console.error('Failed to initialize CodeMirror:', error);
            }
        }

        function loadScript(src) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }

        // Pyodideの読み込み
        async function loadPyodide() {
            try {
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');

                statusElement.textContent = '初期化中...';

                if (!window.loadPyodide) {
                    await loadScript('https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js');
                }

                pyodide = await window.loadPyodide({
                    indexURL: "https://cdn.jsdelivr.net/pyodide/v0.24.1/full/",
                    stdout: (text) => appendOutput(text, 'stdout'),
                    stderr: (text) => appendOutput(text, 'stderr')
                });

                await pyodide.runPython(`
import sys
import io

class UnbufferedTextIO(io.TextIOWrapper):
    def write(self, s):
        super().write(s)
        self.flush()
        return len(s)

sys.stdout = UnbufferedTextIO(sys.stdout.buffer, encoding='utf-8', line_buffering=False)
sys.stderr = UnbufferedTextIO(sys.stderr.buffer, encoding='utf-8', line_buffering=False)
                `);

                statusElement.textContent = '✅ 準備完了';
                outputArea.innerHTML = '<div class="ready">準備完了！コードを入力して実行してみましょう</div>';

                document.getElementById('run-btn').disabled = false;
            } catch (error) {
                console.error('Pyodide読み込みエラー:', error);
                const statusElement = document.getElementById('python-status');
                const outputArea = document.getElementById('output-area');
                statusElement.textContent = '❌ エラー';
                outputArea.innerHTML = `<div class="error">エラーが発生しました: ${error.message}</div>`;
            }
        }

        function appendOutput(text, type = 'stdout') {
            const outputArea = document.getElementById('output-area');

            if (outputArea.querySelector('.loading') || outputArea.querySelector('.ready')) {
                outputArea.innerHTML = '';
            }

            const lines = text.split('\n');
            for (let i = 0; i < lines.length; i++) {
                if (i === lines.length - 1 && lines[i] === '') continue;
                const outputLine = document.createElement('div');
                outputLine.className = `output-line ${type}`;
                outputLine.textContent = lines[i];
                outputArea.appendChild(outputLine);
            }

            outputArea.scrollTop = outputArea.scrollHeight;
        }

        async function runCode() {
            if (!pyodide) {
                const outputArea = document.getElementById('output-area');
                outputArea.innerHTML = '';
                appendOutput('Pythonエンジンがまだ読み込まれていません', 'stderr');
                return;
            }

            const code = codeEditor ? codeEditor.getValue().trim() : '';
            if (!code) {
                const outputArea = document.getElementById('output-area');
                outputArea.innerHTML = '';
                appendOutput('コードを入力してください', 'stderr');
                return;
            }

            const outputArea = document.getElementById('output-area');
            outputArea.innerHTML = '';

            try {
                await pyodide.runPythonAsync(code);
            } catch (error) {
                // Pyodideがstderrに出力していない場合のみ、エラーメッセージを追加
                // （outputAreaを再度クリアしないことで、遅延したstderrコールバックによる
                //   古いエラー表示を防ぐ）
                if (outputArea.children.length === 0) {
                    appendOutput(`エラー: ${error.message}`, 'stderr');
                }
            }
        }

        function clearCode() {
            if (codeEditor) {
                codeEditor.setValue('');
            }
            document.getElementById('output-area').innerHTML = '<div class="ready">コードを入力して実行してください</div>';
        }

        // 保存機能
        function saveCode() {
            if (!codeEditor) {
                alert('エディタが初期化されていません');
                return;
            }

            const code = codeEditor.getValue();
            if (!code.trim()) {
                alert('保存するコードがありません');
                return;
            }

            const blob = new Blob([code], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'code.py';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // 読込機能
        function loadCode() {
            const fileInput = document.getElementById('file-input');
            fileInput.click();
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;

            if (!file.name.endsWith('.py')) {
                alert('.pyファイルを選択してください');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                if (codeEditor) {
                    codeEditor.setValue(e.target.result);
                }
            };
            reader.readAsText(file);

            // ファイル入力をリセット（同じファイルを再度読み込めるようにする）
            event.target.value = '';
        }

        // ドラッグ&ドロップ機能
        function setupDragAndDrop() {
            const editorContainer = document.getElementById('code-editor-container');

            editorContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.borderColor = '#3b82f6';
                editorContainer.style.backgroundColor = '#eff6ff';
            });

            editorContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.borderColor = '#e2e8f0';
                editorContainer.style.backgroundColor = 'transparent';
            });

            editorContainer.addEventListener('drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
                editorContainer.style.borderColor = '#e2e8f0';
                editorContainer.style.backgroundColor = 'transparent';

                const files = e.dataTransfer.files;
                if (files.length === 0) return;

                const file = files[0];
                if (!file.name.endsWith('.py')) {
                    alert('.pyファイルをドロップしてください');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(event) {
                    if (codeEditor) {
                        codeEditor.setValue(event.target.result);
                    }
                };
                reader.readAsText(file);
            });
        }


        // スクロール位置に応じてエディタのスタイルを調整
        function setupScrollBehavior() {
            const editorSticky = document.querySelector('.editor-sticky');
            const editorSection = document.querySelector('.editor-section');
            const stepsSection = document.querySelector('.steps-section');

            if (!editorSticky || !editorSection || !stepsSection) {
                console.error('Required elements not found');
                return;
            }

            // 親要素の高さを左側のステップセクションに合わせる
            function adjustEditorSectionHeight() {
                const stepsHeight = stepsSection.offsetHeight;
                editorSection.style.minHeight = `${stepsHeight}px`;
            }

            // 初回実行
            adjustEditorSectionHeight();

            // ウィンドウリサイズ時にも調整
            window.addEventListener('resize', adjustEditorSectionHeight);
        }

        // コード例の表示
        function displayCodeExamples() {
            document.querySelectorAll('.python-code').forEach(codeElement => {
                const code = codeElement.getAttribute('data-code-content');
                if (code) {
                    codeElement.textContent = code;
                }
            });
        }

        document.addEventListener('DOMContentLoaded', async () => {
            displayCodeExamples();
            await initCodeEditor();
            loadPyodide();
            setupScrollBehavior();
            setupDragAndDrop();

            document.getElementById('run-btn').addEventListener('click', runCode);
            document.getElementById('clear-btn').addEventListener('click', clearCode);
            document.getElementById('save-btn').addEventListener('click', saveCode);
            document.getElementById('load-btn').addEventListener('click', loadCode);
            document.getElementById('file-input').addEventListener('change', handleFileSelect);
        });
    </script>

    <style>
        /* Layout.astroの.main-contentの制約を上書き */
        :global(.main-content) {
            max-width: 100% !important;
            padding: 0 !important;
        }

        html, body {
            overflow-x: hidden;
            height: 100%;
        }

        .lesson-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            overflow: visible;
            height: auto;
        }

        .lesson-header {
            margin-bottom: 2rem;
        }

        .back-link {
            display: inline-block;
            color: #3b82f6;
            text-decoration: none;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .back-link:hover {
            text-decoration: underline;
        }

        .lesson-header h1 {
            font-size: clamp(2rem, 4vw, 2.5rem);
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .lesson-header p {
            font-size: 1.125rem;
            color: #64748b;
        }

        .lesson-content {
            display: grid;
            grid-template-columns: 1fr 500px;
            gap: 2rem;
            align-items: flex-start;
            position: relative;
            min-height: 100vh;
        }

        .steps-section {
            overflow: visible;
        }

        .editor-section {
            position: relative;
            will-change: transform;
            height: 100%;
            align-self: stretch;
        }

        .steps-section h2 {
            font-size: 1.75rem;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        .step-card {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            scroll-margin-top: 2rem;
        }

        .step-header {
            margin-bottom: 1rem;
        }

        .step-number {
            display: inline-block;
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .step-card h3 {
            font-size: 1.375rem;
            color: #1e293b;
            margin-top: 0.5rem;
        }

        .step-description {
            color: #475569;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .code-example {
            background: #0d1117;
            border-radius: 0.5rem;
            overflow: hidden;
            margin-bottom: 1rem;
            border: 1px solid #30363d;
        }

        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background: #161b22;
            color: #c9d1d9;
            font-size: 0.875rem;
            border-bottom: 1px solid #30363d;
        }


        .code-example pre {
            margin: 0;
            padding: 1rem;
            overflow-x: auto;
            background: #0d1117;
            white-space: pre;
        }

        .code-example pre code {
            display: block;
        }

        .code-example code {
            color: #c9d1d9 !important;
            font-family: 'Monaco', 'Menlo', 'Consolas', 'Courier New', monospace !important;
            font-size: 0.9375rem !important;
            line-height: 1.6 !important;
            font-weight: 400 !important;
        }

        .python-code {
            color: #c9d1d9 !important;
            background: transparent !important;
        }

        /* コード例を選択不可にする */
        .no-select {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: default;
        }

        /* preタグも選択不可に */
        .code-example pre {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .explanation {
            background: #f0f9ff;
            border-left: 4px solid #3b82f6;
            padding: 1rem;
            border-radius: 0.5rem;
        }

        .explanation strong {
            color: #1e40af;
        }

        .explanation p {
            margin: 0.5rem 0 0 0;
            color: #475569;
            line-height: 1.6;
        }

        .editor-sticky {
            position: -webkit-sticky !important;
            position: sticky !important;
            top: 5rem !important;
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: box-shadow 0.3s ease;
            max-height: calc(100vh - 6rem);
            overflow-y: auto;
            z-index: 50;
            align-self: flex-start;
            will-change: transform;
        }

        .editor-sticky:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .editor-section h2 {
            font-size: 1.5rem;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .editor-hint {
            color: #64748b;
            font-size: 0.875rem;
            margin-bottom: 1rem;
        }

        .editor-controls {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .btn {
            padding: 0.625rem 1rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9375rem;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: #2563eb;
        }

        .btn-secondary {
            background: #64748b;
            color: white;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-info {
            background: #0ea5e9;
            color: white;
        }

        .btn-info:hover {
            background: #0284c7;
        }

        #code-editor-container {
            border: 2px solid #e2e8f0;
            border-radius: 0.5rem;
            overflow: hidden;
            margin-bottom: 1rem;
            transition: border-color 0.2s, background-color 0.2s;
        }

        .CodeMirror {
            height: 300px !important;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 14px;
        }

        .output-section {
            margin-top: 1rem;
        }

        .output-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background: #0f172a;
            color: #94a3b8;
            font-size: 0.875rem;
            border-radius: 0.5rem 0.5rem 0 0;
        }

        .status {
            font-size: 0.8125rem;
            color: #64748b;
        }

        #output-area {
            background: #1e293b;
            color: #e2e8f0;
            padding: 1rem;
            border-radius: 0 0 0.5rem 0.5rem;
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 0.875rem;
            min-height: 200px;
            max-height: 300px;
            overflow-y: auto;
        }

        .output-line {
            margin-bottom: 0.25rem;
        }

        .output-line.stderr {
            color: #ef4444;
        }

        .loading, .ready {
            color: #64748b;
            font-style: italic;
            text-align: center;
            padding: 2rem;
        }

        .error {
            color: #ef4444;
            padding: 1rem;
        }

        /* デスクトップ: stickyを確実に適用 */
        @media (min-width: 1025px) {
            .lesson-content {
                display: grid;
                grid-template-columns: 1fr 500px;
            }

            .editor-sticky {
                position: -webkit-sticky !important;
                position: sticky !important;
                top: 5rem !important;
                max-height: calc(100vh - 6rem) !important;
            }
        }

        /* タブレット・モバイル: staticに戻す */
        @media (max-width: 1024px) {
            .lesson-content {
                grid-template-columns: 1fr !important;
            }

            .editor-sticky {
                position: static !important;
                max-height: none !important;
            }
        }

        @media (max-width: 768px) {
            .lesson-container {
                padding: 1rem;
            }

            .CodeMirror {
                height: 250px !important;
                font-size: 13px;
            }

            #output-area {
                max-height: 200px;
                font-size: 0.8125rem;
            }
        }
    </style>
</Layout>
