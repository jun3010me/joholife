id: network-construction
title: ネットワーク構築課題①
description: ネットワーク構築シミュレータで作成したネットワークをJSONファイルでアップロードして、課題条件を満たしているかを判定します
icon: 🌐
difficulty: medium
estimatedTime: 20
category: ネットワーク
tags:
  - ネットワーク
  - IP設定
  - 接続構成
  - シミュレータ
questions:
  - id: basic-pc-connection
    type: file-upload
    title: 基本的なPC間接続
    description: |
      **課題内容**
      
      以下の条件でネットワークを構築し、JSONファイルをアップロードしてください：
      
      **構成要件**
      - PC-1とPC-2を直接LANケーブルで接続
      - PC-1のIPアドレス: 192.168.0.2
      - PC-2のIPアドレス: 192.168.0.3  
      - 両PCのサブネットマスク: 255.255.255.0
      - 両PCのデフォルトゲートウェイ: 192.168.0.1
      - PC間でPing疎通が可能であること
      
      **判定条件**
      - 2台のPCが存在する
      - PC間がLANケーブルで接続されている
      - IPアドレスが指定通りに設定されている
      - サブネットマスクとデフォルトゲートウェイが正しく設定されている
    validation: |
      function validateNetwork(networkData) {
        const { devices, connections } = networkData;
        
        // PC数の確認
        const pcs = devices.filter(d => d.type === 'pc');
        if (pcs.length !== 2) {
          return { valid: false, message: 'PC数が2台ではありません' };
        }
        
        // 接続の確認
        if (connections.length !== 1) {
          return { valid: false, message: 'PC間の接続が正しくありません' };
        }
        
        // IPアドレスの確認
        const targetIPs = ['192.168.0.2', '192.168.0.3'];
        const actualIPs = pcs.map(pc => pc.config.ipAddress).sort();
        targetIPs.sort();
        
        if (!targetIPs.every((ip, i) => ip === actualIPs[i])) {
          return { valid: false, message: 'IPアドレスが指定通りに設定されていません' };
        }
        
        // サブネットマスクとデフォルトゲートウェイの確認
        for (const pc of pcs) {
          if (pc.config.subnetMask !== '255.255.255.0') {
            return { valid: false, message: 'サブネットマスクが正しく設定されていません' };
          }
          if (pc.config.defaultGateway !== '192.168.0.1') {
            return { valid: false, message: 'デフォルトゲートウェイが正しく設定されていません' };
          }
        }
        
        return { valid: true, message: '全ての条件を満たしています！' };
      }
    explanation: |
      この課題では、最も基本的なネットワーク構成である2台のPCの直接接続を学習しました。
      
      **ポイント**
      - **IPアドレス設定**: 同じネットワークセグメント（192.168.0.0/24）内でユニークなIPアドレスを設定
      - **サブネットマスク**: ネットワーク部とホスト部を分ける設定（255.255.255.0）
      - **デフォルトゲートウェイ**: 他のネットワークへの出口となるルータのIPアドレス
      - **物理接続**: LANケーブルによるPC間の直接接続
      
      このような基本構成を理解することで、より複雑なネットワーク設計の基礎となります。
    difficulty: easy
    points: 10
    tags:
      - 基本構成
      - PC接続
      - IP設定

  - id: router-network
    type: file-upload
    title: スイッチを使った3台PC接続とPing疎通
    description: |
      **課題内容**

      以下の条件でネットワークを構築し、JSONファイルをアップロードしてください：

      **構成要件**
      - スイッチ1台とPC3台を使用
      - PC-1、PC-2、PC-3をすべてスイッチに接続
      - PC-1のIPアドレス: 192.168.1.10
      - PC-2のIPアドレス: 192.168.1.20
      - PC-3のIPアドレス: 192.168.1.30
      - 全PCのサブネットマスク: 255.255.255.0
      - 全PC間でPing疎通が確認できること

      **判定条件**
      - 1台のスイッチと3台のPCが存在する
      - 全てのPCがスイッチに接続されている
      - IPアドレスが指定通りに設定されている
      - 全PCが同一ネットワークセグメントに属している
      - PC間でPing疎通が確認できる
    validation: |
      function validateNetwork(networkData) {
        const { devices, connections } = networkData;

        // デバイス数の確認
        const switches = devices.filter(d => d.type === 'switch');
        const pcs = devices.filter(d => d.type === 'pc');

        if (switches.length !== 1) {
          return { valid: false, message: 'スイッチが1台ではありません' };
        }
        if (pcs.length !== 3) {
          return { valid: false, message: 'PC数が3台ではありません' };
        }

        // 接続の確認（3台のPCがスイッチに接続されている）
        if (connections.length !== 3) {
          return { valid: false, message: 'PC-スイッチ間の接続が正しくありません' };
        }

        const switchId = switches[0].id;
        const pcConnections = connections.filter(conn =>
          conn.from.deviceId === switchId || conn.to.deviceId === switchId
        );

        if (pcConnections.length !== 3) {
          return { valid: false, message: '全てのPCがスイッチに接続されていません' };
        }

        // IPアドレスの確認
        const targetIPs = ['192.168.1.10', '192.168.1.20', '192.168.1.30'];
        const actualIPs = pcs.map(pc => pc.config.ipAddress).sort();
        targetIPs.sort();

        if (!targetIPs.every((ip, i) => ip === actualIPs[i])) {
          return { valid: false, message: 'PCのIPアドレスが指定通りに設定されていません' };
        }

        // PCのサブネットマスクの確認（スイッチなのでデフォルトゲートウェイは不要）
        for (const pc of pcs) {
          if (pc.config.subnetMask !== '255.255.255.0') {
            return { valid: false, message: 'サブネットマスクが正しく設定されていません' };
          }
        }

        // Ping疎通確認（同一セグメント内でのPing）
        // 192.168.1.0/24 セグメント内で全PC間が疎通可能かチェック
        const ipAddresses = pcs.map(pc => pc.config.ipAddress);
        for (let i = 0; i < ipAddresses.length; i++) {
          for (let j = i + 1; j < ipAddresses.length; j++) {
            const ip1 = ipAddresses[i];
            const ip2 = ipAddresses[j];

            // 同一セグメント確認（192.168.1.0/24）
            const subnet1 = ip1.split('.').slice(0, 3).join('.');
            const subnet2 = ip2.split('.').slice(0, 3).join('.');

            if (subnet1 !== '192.168.1' || subnet2 !== '192.168.1') {
              return { valid: false, message: '全PCが同一セグメント（192.168.1.0/24）に属していません' };
            }
          }
        }

        return { valid: true, message: '全ての条件を満たしています！スイッチ経由で3台のPCが同一セグメントで接続され、Ping疎通が可能です。' };
      }
    explanation: |
      この課題では、スイッチを中心とした基本的なLAN構成を学習しました。

      **ポイント**
      - **スイッチの役割**: レイヤー2で動作し、MACアドレスを学習してフレームを転送
      - **スター型トポロジ**: スイッチを中心とした接続形態で、コリジョンドメインを分離
      - **同一セグメント通信**: 全PCが同じネットワークセグメントでPing疎通が可能
      - **IPアドレス管理**: 同一セグメント内でのユニークなIPアドレス割り当て
      - **ブロードキャストドメイン**: スイッチ配下の全ポートが同一ブロードキャストドメイン

      この構成は、小規模なLANセグメントの基本形で、スイッチの動作原理を理解できます。
    difficulty: medium
    points: 15
    tags:
      - スイッチ構成
      - 同一セグメント
      - Ping疎通
      - LAN設計
      - スター型

