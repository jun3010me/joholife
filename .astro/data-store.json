[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.1","content-config-digest","0628b5c8aa8e848c","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://joho.jun3010.me\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","lessons",["Map",11,12,30,31,48,49,66,67],"programming-basics/1",{"id":11,"data":13,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":24},{"title":14,"description":15,"chapter":16,"slideNumber":17,"totalSlides":18,"difficulty":19,"estimatedTime":18,"tags":20,"category":23,"hasQuiz":24,"hasCode":25,"hasVisualization":25},"プログラミングとは何か","プログラミングの基本概念と重要性について学習します","programming-basics",1,5,"easy",[21,22],"基礎","概念","プログラミング基礎",true,false,"# プログラミングとは何か\n\n## 🎯 学習目標\nこの単元では、プログラミングの基本概念を理解し、なぜプログラミングが重要なのかを学習します。\n\n## プログラミングの定義\n\n**プログラミング**とは、コンピュータに対して「何をどのような順序で実行するか」を指示することです。\n\n私たちがコンピュータと対話するための言語として、**プログラミング言語**を使用します。\n\n## なぜプログラミングが重要なのか\n\n現代社会では、あらゆる場面でコンピュータが活用されています：\n\n- 🏦 **銀行のATM** - お金の入出金処理\n- 🚗 **自動車** - エンジン制御、ナビゲーション\n- 📱 **スマートフォン** - アプリの動作\n- 🏥 **病院** - 患者の記録管理、医療機器制御\n\nこれらすべてがプログラムによって動作しています。\n\n## プログラムの基本要素\n\nすべてのプログラムは、次の3つの基本要素で構成されています：\n\n### 1. 順次処理（Sequential）\n命令を上から下へ順番に実行する\n\n### 2. 分岐処理（Selection）\n条件によって実行する処理を変える\n```\nもし 雨が降っているなら\n    傘を持つ\nそうでなければ\n    傘は持たない\n```\n\n### 3. 反復処理（Iteration）\n同じ処理を繰り返す\n```\n10回繰り返す:\n    \"こんにちは\"と表示する\n```\n\n## 💡 ポイント\n\nプログラミングは単に「コードを書く」ことではありません。\n\n**問題を分析** → **解決方法を考える** → **手順を整理** → **コードで表現**\n\nというプロセス全体がプログラミングです。\n\n## 次のステップ\n\n次のスライドでは、具体的にプログラミング言語を使って簡単なプログラムを作成してみましょう！\n\n---\n\n*推定学習時間: 5分*","src/content/lessons/programming-basics/1.mdx","535260d80a8edfc8","programming-basics/1.mdx","logic-circuits/1",{"id":30,"data":32,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":24},{"title":33,"description":34,"chapter":35,"slideNumber":17,"totalSlides":36,"difficulty":19,"estimatedTime":37,"tags":38,"category":43,"hasQuiz":24,"hasCode":25,"hasVisualization":24},"基本的な論理ゲート","AND、OR、NOTゲートの動作を理解しよう","logic-circuits",4,8,[39,40,41,42],"論理ゲート","AND","OR","NOT","論理回路","# 基本的な論理ゲート\n\n## 🎯 学習目標\n- 基本的な論理ゲート（AND、OR、NOT）の動作を理解する\n- 真理値表の読み方を身につける\n- 論理式の表記方法を学習する\n\n## 論理ゲートとは\n\n**論理ゲート**は、1つまたは複数の論理入力を受け取り、論理的な演算を行って1つの論理出力を生成する電子回路です。\n\nすべてのデジタル機器（コンピュータ、スマートフォンなど）は、これらの基本的な論理ゲートの組み合わせで動作しています。\n\n## 論理値の基礎\n\nデジタル回路では、情報を**2つの状態**で表現します：\n\n- **1（真、True、High）**：電圧が高い状態\n- **0（偽、False、Low）**：電圧が低い状態\n\n## ANDゲート\n\n### 動作原理\n**すべての入力が1の時のみ、出力が1になる**\n\n**真理値表**：\n\n| A | B | A AND B |\n|---|---|---------|\n| 0 | 0 | 0       |\n| 0 | 1 | 0       |\n| 1 | 0 | 0       |\n| 1 | 1 | 1       |\n\n### 記号と表記\n- **論理式**: A ∧ B または A・B\n- **プログラミング**: A && B\n- **回路記号**: D字型のゲート\n\n### 実生活での例\n「雨が降っている **AND** 傘を持っている」→ 濡れない\n\n## ORゲート\n\n### 動作原理\n**少なくとも1つの入力が1の時、出力が1になる**\n\n**真理値表**：\n\n| A | B | A OR B |\n|---|---|--------|\n| 0 | 0 | 0      |\n| 0 | 1 | 1      |\n| 1 | 0 | 1      |\n| 1 | 1 | 1      |\n\n### 記号と表記\n- **論理式**: A ∨ B または A+B\n- **プログラミング**: A || B\n- **回路記号**: 弓型のゲート\n\n### 実生活での例\n「電車で行く **OR** バスで行く」→ 目的地に到着\n\n## NOTゲート（インバータ）\n\n### 動作原理\n**入力の論理値を反転する**\n\n| A | NOT A |\n|---|-------|\n| 0 | 1     |\n| 1 | 0     |\n\n### 記号と表記\n- **論理式**: ¬A または Ā\n- **プログラミング**: !A\n- **回路記号**: 三角形に小さな円\n\n### 実生活での例\n「宿題が終わっていない」→ 「宿題が終わっている」の否定\n\n## 複合的な論理式\n\nこれらの基本ゲートを組み合わせて、より複雑な論理を表現できます。\n\n### 例1：信号機の制御\n```\n赤信号 = ¬(青信号 ∨ 黄信号)\n```\n\n### 例2：エレベーターのドア開閉\n```\nドア開 = ボタン押下 ∧ 停止中 ∧ ¬障害物検知\n```\n\n## 🧪 実際に試してみよう\n\n以下の論理式の結果を考えてみましょう：\n\n1. A=1, B=0 の時、A AND B = ?\n2. A=1, B=0 の時、A OR B = ?\n3. A=1 の時、NOT A = ?\n4. A=1, B=1, C=0 の時、(A AND B) OR C = ?\n\n\u003Cdetails>\n\u003Csummary>答えを見る\u003C/summary>\n\n1. A AND B = 1 AND 0 = **0**\n2. A OR B = 1 OR 0 = **1**\n3. NOT A = NOT 1 = **0**\n4. (A AND B) OR C = (1 AND 1) OR 0 = 1 OR 0 = **1**\n\n\u003C/details>\n\n## 💡 重要なポイント\n\n### De Morgan の法則\n論理回路設計でよく使われる重要な法則：\n\n```\n¬(A ∧ B) = ¬A ∨ ¬B\n¬(A ∨ B) = ¬A ∧ ¬B\n```\n\nこれらの法則により、ANDゲートとORゲートを相互に変換できます。\n\n### 論理ゲートの階層\n1. **基本ゲート**: AND, OR, NOT\n2. **複合ゲート**: NAND, NOR, XOR\n3. **複雑な回路**: 加算器、メモリ、プロセッサ\n\n## 次のステップ\n\n次のスライドでは、NANDゲートとNORゲートという**複合論理ゲート**について学習します！\n\n---\n\n*推定学習時間: 8分*","src/content/lessons/logic-circuits/1.mdx","4bdb0eb4450d25e5","logic-circuits/1.mdx","algorithms/1",{"id":48,"data":50,"body":62,"filePath":63,"digest":64,"legacyId":65,"deferredRender":24},{"title":51,"description":52,"chapter":53,"slideNumber":17,"totalSlides":54,"difficulty":55,"estimatedTime":56,"tags":57,"category":61,"hasQuiz":24,"hasCode":24,"hasVisualization":24},"バブルソートアルゴリズム","バブルソートの仕組みを可視化して理解しよう","algorithms",3,"medium",10,[58,59,60],"ソート","バブルソート","可視化","アルゴリズム","# バブルソートアルゴリズム\n\n## 🎯 学習目標\n- バブルソートの仕組みを理解する\n- 隣接要素の比較と交換の流れを把握する\n- アルゴリズムの効率性について考える\n\n## バブルソートとは\n\n**バブルソート**は、隣り合う2つの要素を比較して、順序が逆であれば交換する操作を繰り返すソートアルゴリズムです。\n\n名前の由来：大きな値が「泡（バブル）」のように配列の後ろに浮き上がっていく様子から。\n\n## アルゴリズムの流れ\n\n1. **隣接要素の比較**：配列の先頭から隣り合う2つの要素を比較\n2. **条件による交換**：左の要素が右の要素より大きければ交換\n3. **次の要素へ**：次の隣接ペアに移動\n4. **1回のパス完了**：配列の最後まで到達\n5. **繰り返し**：未ソート部分がなくなるまで1-4を繰り返し\n\n## アルゴリズムの可視化\n\nバブルソートは以下のような動作をします：\n\n1. **第1パス**: [64, 34, 25, 12, 22, 11, 90] → [34, 25, 12, 22, 11, 64, 90]\n2. **第2パス**: [34, 25, 12, 22, 11, 64, 90] → [25, 12, 22, 11, 34, 64, 90]\n3. **第3パス**: [25, 12, 22, 11, 34, 64, 90] → [12, 22, 11, 25, 34, 64, 90]\n4. **第4パス**: [12, 22, 11, 25, 34, 64, 90] → [12, 11, 22, 25, 34, 64, 90]\n5. **第5パス**: [12, 11, 22, 25, 34, 64, 90] → [11, 12, 22, 25, 34, 64, 90]\n\n各パスで最大値が右端に「浮き上がって」いきます。\n\n## JavaScriptでの実装\n\n```javascript\nfunction bubbleSort(arr) {\n    // 配列をコピー（元の配列を変更しないため）\n    let sortedArray = [...arr];\n    let n = sortedArray.length;\n    \n    console.log(\"初期配列:\", sortedArray);\n    \n    // 外側のループ：パス数を制御\n    for (let i = 0; i \u003C n - 1; i++) {\n        console.log(`\\n--- パス ${i + 1} 開始 ---`);\n        let swapped = false; // 交換が発生したかのフラグ\n        \n        // 内側のループ：隣接要素の比較\n        for (let j = 0; j \u003C n - i - 1; j++) {\n            console.log(`比較: ${sortedArray[j]} と ${sortedArray[j + 1]}`);\n            \n            // 左の要素が右の要素より大きい場合は交換\n            if (sortedArray[j] > sortedArray[j + 1]) {\n                // 交換処理\n                let temp = sortedArray[j];\n                sortedArray[j] = sortedArray[j + 1];\n                sortedArray[j + 1] = temp;\n                swapped = true;\n                \n                console.log(`交換後: [${sortedArray.join(', ')}]`);\n            }\n        }\n        \n        console.log(`パス ${i + 1} 終了: [${sortedArray.join(', ')}]`);\n        \n        // もし交換が1回も発生しなかった場合、ソート完了\n        if (!swapped) {\n            console.log(\"早期終了：ソート完了\");\n            break;\n        }\n    }\n    \n    console.log(\"\\\\n最終結果:\", sortedArray);\n    return sortedArray;\n}\n\n// テスト実行\nlet testArray = [64, 34, 25, 12, 22, 11, 90];\nbubbleSort(testArray);\n```\n\n## 時間計算量の分析\n\n### 最悪の場合：O(n²)\n- 配列が逆順にソートされている場合\n- すべての要素をすべての要素と比較する必要がある\n- 比較回数：n × (n-1) / 2\n\n### 最良の場合：O(n)\n- 配列が既にソートされている場合\n- 1回のパスで完了（改良版の場合）\n\n### 平均的な場合：O(n²)\n\n## 💡 特徴とポイント\n\n### 長所\n- **理解しやすい**：アルゴリズムが直感的\n- **実装が簡単**：少ないコードで実装可能\n- **安定ソート**：同じ値の要素の順序が保たれる\n- **その場ソート**：追加メモリをほとんど使わない\n\n### 短所\n- **効率が悪い**：大きなデータに対して非常に遅い\n- **比較回数が多い**：常にO(n²)の比較が必要\n\n## 実際の使用場面\n\nバブルソートは教育目的以外では**ほとんど使用されません**。\n\n実用的なソートアルゴリズム：\n- **クイックソート**：平均O(n log n)\n- **マージソート**：常にO(n log n)\n- **ヒープソート**：常にO(n log n)\n\n## 次のステップ\n\n次のスライドでは、より効率的な**選択ソート**について学習します！\n\n---\n\n*推定学習時間: 10分*","src/content/lessons/algorithms/1.mdx","4283f02518ad2556","algorithms/1.mdx","programming-basics/2",{"id":66,"data":68,"body":75,"filePath":76,"digest":77,"legacyId":78,"deferredRender":24},{"title":69,"description":70,"chapter":16,"slideNumber":71,"totalSlides":18,"difficulty":19,"estimatedTime":37,"tags":72,"category":23,"hasQuiz":24,"hasCode":24,"hasVisualization":25},"変数とデータ型","プログラミングにおける変数の概念とデータ型について学習します",2,[73,74,21],"変数","データ型","# 変数とデータ型\n\n## 🎯 学習目標\n- 変数の概念を理解する\n- 基本的なデータ型を学習する\n- 変数の宣言と使用方法を身につける\n\n## 変数とは\n\n**変数**は、データを一時的に保存するための「箱」のようなものです。\n\nこの箱には：\n- **名前**（変数名）をつけることができる\n- **値**を入れることができる\n- **値を変更**することができる\n\n## 変数の例（日常生活）\n\n例えば、買い物の場面を考えてみましょう：\n\n```\nりんごの値段 = 100円\nみかんの値段 = 80円\n合計金額 = りんごの値段 + みかんの値段\n```\n\nここで「りんごの値段」「みかんの値段」「合計金額」が変数です。\n\n## プログラミングでの変数宣言\n\nJavaScriptでの変数宣言方法：\n\n```javascript\n// 変数の宣言と初期化\nlet applePrice = 100;\nlet orangePrice = 80;\n\n// 計算\nlet totalPrice = applePrice + orangePrice;\n\n// 結果の表示\nconsole.log(\"りんごの値段: \" + applePrice + \"円\");\nconsole.log(\"みかんの値段: \" + orangePrice + \"円\");\nconsole.log(\"合計金額: \" + totalPrice + \"円\");\n```\n\n## 基本的なデータ型\n\nプログラミングでは、データの種類によって**データ型**が決まります：\n\n### 1. 数値型（Number）\n整数や小数点を含む数値\n```javascript\nlet age = 15;          // 整数\nlet height = 165.5;    // 小数\nlet temperature = -5;  // 負の数\n```\n\n### 2. 文字列型（String）\n文字や文字列\n```javascript\nlet name = \"田中太郎\";\nlet message = \"こんにちは！\";\nlet empty = \"\";        // 空の文字列\n```\n\n### 3. 真偽値型（Boolean）\n真（true）または偽（false）\n```javascript\nlet isStudent = true;\nlet isRaining = false;\n```\n\n## 実際に試してみよう\n\n```javascript\n// 自分の情報を変数に入れてみよう\nlet myName = \"あなたの名前\";\nlet myAge = 16;\nlet isHighSchoolStudent = true;\n\n// 自己紹介文を作ってみよう\nlet introduction = \"私の名前は\" + myName + \"です。\";\nintroduction = introduction + \"年齢は\" + myAge + \"歳です。\";\n\nif (isHighSchoolStudent) {\n    introduction = introduction + \"高校生です。\";\n} else {\n    introduction = introduction + \"高校生ではありません。\";\n}\n\nconsole.log(introduction);\n\n// 計算もしてみよう\nlet birthYear = 2024 - myAge;\nconsole.log(\"生まれた年: \" + birthYear + \"年\");\n```\n\nこのコードを実際に実行してみましょう！変数の値を変更して、自分の情報に合わせてカスタマイズしてみてください。\n\n## 💡 重要なポイント\n\n### 変数名のルール\n- **英数字とアンダースコア**が使用可能\n- **数字から始まってはいけない**\n- **予約語**（if、for、letなど）は使用不可\n- **意味のある名前**をつける\n\n良い例：\n```javascript\nlet studentCount = 30;\nlet maxScore = 100;\nlet userName = \"user001\";\n```\n\n悪い例：\n```javascript\nlet a = 30;        // 何の値かわからない\nlet 1count = 30;   // 数字から始まっている\nlet let = 30;      // 予約語を使用\n```\n\n## 次のステップ\n\n次のスライドでは、これらの変数を使って条件分岐（if文）を学習します！\n\n---\n\n*推定学習時間: 8分*","src/content/lessons/programming-basics/2.mdx","674b46d7c2ca85de","programming-basics/2.mdx"]